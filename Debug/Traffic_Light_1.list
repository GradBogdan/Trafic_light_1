
Traffic_Light_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004170  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000448  080042f8  080042f8  000142f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004740  08004740  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08004740  08004740  00014740  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004748  08004748  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004748  08004748  00014748  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800474c  0800474c  0001474c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08004750  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000500  20000048  08004798  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000548  08004798  00020548  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000eba3  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000202c  00000000  00000000  0002ec1b  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000cf0  00000000  00000000  00030c48  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000ba8  00000000  00000000  00031938  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025d61  00000000  00000000  000324e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000bd1c  00000000  00000000  00058241  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e8fd3  00000000  00000000  00063f5d  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0014cf30  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003380  00000000  00000000  0014cfac  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080042e0 	.word	0x080042e0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	080042e0 	.word	0x080042e0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CL_SetLightColor>:
/* this function set the color of the car traffic light
 *param: CL_state: the state in which the car light is in  (RED, YELLOW, GREEN)
 *
 *
 */
void CL_SetLightColor(trafficLightState_t CL_state){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	switch(CL_state){
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	f200 8094 	bhi.w	8000602 <CL_SetLightColor+0x13a>
 80004da:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <CL_SetLightColor+0x18>)
 80004dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e0:	080004f5 	.word	0x080004f5
 80004e4:	0800054b 	.word	0x0800054b
 80004e8:	08000589 	.word	0x08000589
 80004ec:	08000533 	.word	0x08000533
 80004f0:	080005c7 	.word	0x080005c7
		case CL_RED :
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4849      	ldr	r0, [pc, #292]	; (8000620 <CL_SetLightColor+0x158>)
 80004fc:	f000 fbc6 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4846      	ldr	r0, [pc, #280]	; (8000620 <CL_SetLightColor+0x158>)
 8000506:	f000 fbc1 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <CL_SetLightColor+0x158>)
 8000510:	f000 fbbc 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051e:	f000 fbb5 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_RED_LED_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fbae 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 8000530:	e071      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_FLASH_RED :
			HAL_GPIO_TogglePin(GPIOC, RED_LIGHT_LED_Pin);
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <CL_SetLightColor+0x158>)
 8000538:	f000 fbc0 	bl	8000cbc <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, PED_GREEN_LED_Pin);
 800053c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fbba 	bl	8000cbc <HAL_GPIO_TogglePin>
			break;
 8000548:	e065      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_YELLOW :
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2140      	movs	r1, #64	; 0x40
 800054e:	4834      	ldr	r0, [pc, #208]	; (8000620 <CL_SetLightColor+0x158>)
 8000550:	f000 fb9c 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	4831      	ldr	r0, [pc, #196]	; (8000620 <CL_SetLightColor+0x158>)
 800055c:	f000 fb96 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2120      	movs	r1, #32
 8000564:	482e      	ldr	r0, [pc, #184]	; (8000620 <CL_SetLightColor+0x158>)
 8000566:	f000 fb91 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_RED_LED_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fb8a 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fb83 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 8000586:	e046      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_GREEN :
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2120      	movs	r1, #32
 800058c:	4824      	ldr	r0, [pc, #144]	; (8000620 <CL_SetLightColor+0x158>)
 800058e:	f000 fb7d 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <CL_SetLightColor+0x158>)
 8000598:	f000 fb78 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	481f      	ldr	r0, [pc, #124]	; (8000620 <CL_SetLightColor+0x158>)
 80005a4:	f000 fb72 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_RED_LED_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fb6b 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f000 fb64 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 80005c4:	e027      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_DEFAULT_GREEN :
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <CL_SetLightColor+0x158>)
 80005cc:	f000 fb5e 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <CL_SetLightColor+0x158>)
 80005d6:	f000 fb59 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	480f      	ldr	r0, [pc, #60]	; (8000620 <CL_SetLightColor+0x158>)
 80005e2:	f000 fb53 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, PED_RED_LED_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <CL_SetLightColor+0x158>)
 80005ee:	f000 fb4d 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fb46 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 8000600:	e009      	b.n	8000616 <CL_SetLightColor+0x14e>
		default :
			HAL_GPIO_TogglePin(GPIOC, YELLOW_LIGHT_LED_Pin);
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <CL_SetLightColor+0x158>)
 8000606:	f000 fb59 	bl	8000cbc <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, PED_REQUEST_LED_Pin);
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <CL_SetLightColor+0x15c>)
 8000610:	f000 fb54 	bl	8000cbc <HAL_GPIO_TogglePin>
			break;
 8000614:	bf00      	nop
	};
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000800 	.word	0x48000800
 8000624:	48000400 	.word	0x48000400

08000628 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_Init+0x3c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_Init+0x3c>)
 8000638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f93a 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f80f 	bl	8000668 <HAL_InitTick>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	e001      	b.n	800065a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000656:	f003 fc5d 	bl	8003f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065a:	79fb      	ldrb	r3, [r7, #7]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_InitTick+0x68>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d022      	beq.n	80006c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_InitTick+0x6c>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_InitTick+0x68>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000688:	fbb1 f3f3 	udiv	r3, r1, r3
 800068c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f946 	bl	8000922 <HAL_SYSTICK_Config>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10f      	bne.n	80006bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	d809      	bhi.n	80006b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a2:	2200      	movs	r2, #0
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	f04f 30ff 	mov.w	r0, #4294967295
 80006aa:	f000 f910 	bl	80008ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0x70>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e007      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	e004      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000004 	.word	0x20000004
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x1c>)
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	20000470 	.word	0x20000470
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_GetTick+0x14>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	20000470 	.word	0x20000470

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db0b      	blt.n	80007a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 021f 	and.w	r2, r3, #31
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <__NVIC_EnableIRQ+0x38>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	095b      	lsrs	r3, r3, #5
 800079c:	2001      	movs	r0, #1
 800079e:	fa00 f202 	lsl.w	r2, r0, r2
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f7ff ff8e 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff29 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff3e 	bl	8000760 <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff8e 	bl	800080c <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff31 	bl	800077c <__NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffa2 	bl	8000874 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e17f      	b.n	8000c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8171 	beq.w	8000c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d003      	beq.n	8000974 <HAL_GPIO_Init+0x38>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b12      	cmp	r3, #18
 8000972:	d123      	bne.n	80009bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	08da      	lsrs	r2, r3, #3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3208      	adds	r2, #8
 800097c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	08da      	lsrs	r2, r3, #3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3208      	adds	r2, #8
 80009b6:	6939      	ldr	r1, [r7, #16]
 80009b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0203 	and.w	r2, r3, #3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d00b      	beq.n	8000a10 <HAL_GPIO_Init+0xd4>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d007      	beq.n	8000a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a04:	2b11      	cmp	r3, #17
 8000a06:	d003      	beq.n	8000a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b12      	cmp	r3, #18
 8000a0e:	d130      	bne.n	8000a72 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a46:	2201      	movs	r2, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	f003 0201 	and.w	r2, r3, #1
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d118      	bne.n	8000ab0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a84:	2201      	movs	r2, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	f003 0201 	and.w	r2, r3, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 80ac 	beq.w	8000c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b5e      	ldr	r3, [pc, #376]	; (8000c68 <HAL_GPIO_Init+0x32c>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a5d      	ldr	r2, [pc, #372]	; (8000c68 <HAL_GPIO_Init+0x32c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <HAL_GPIO_Init+0x32c>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b06:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <HAL_GPIO_Init+0x330>)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b30:	d025      	beq.n	8000b7e <HAL_GPIO_Init+0x242>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4e      	ldr	r2, [pc, #312]	; (8000c70 <HAL_GPIO_Init+0x334>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d01f      	beq.n	8000b7a <HAL_GPIO_Init+0x23e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4d      	ldr	r2, [pc, #308]	; (8000c74 <HAL_GPIO_Init+0x338>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d019      	beq.n	8000b76 <HAL_GPIO_Init+0x23a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <HAL_GPIO_Init+0x33c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d013      	beq.n	8000b72 <HAL_GPIO_Init+0x236>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a4b      	ldr	r2, [pc, #300]	; (8000c7c <HAL_GPIO_Init+0x340>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d00d      	beq.n	8000b6e <HAL_GPIO_Init+0x232>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4a      	ldr	r2, [pc, #296]	; (8000c80 <HAL_GPIO_Init+0x344>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d007      	beq.n	8000b6a <HAL_GPIO_Init+0x22e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a49      	ldr	r2, [pc, #292]	; (8000c84 <HAL_GPIO_Init+0x348>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_GPIO_Init+0x22a>
 8000b62:	2306      	movs	r3, #6
 8000b64:	e00c      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b66:	2307      	movs	r3, #7
 8000b68:	e00a      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	e008      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b6e:	2304      	movs	r3, #4
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	f002 0203 	and.w	r2, r2, #3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b90:	4936      	ldr	r1, [pc, #216]	; (8000c6c <HAL_GPIO_Init+0x330>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa22 f303 	lsr.w	r3, r2, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f ae78 	bne.w	800094c <HAL_GPIO_Init+0x10>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000800 	.word	0x48000800
 8000c78:	48000c00 	.word	0x48000c00
 8000c7c:	48001000 	.word	0x48001000
 8000c80:	48001400 	.word	0x48001400
 8000c84:	48001800 	.word	0x48001800
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c9c:	787b      	ldrb	r3, [r7, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca8:	e002      	b.n	8000cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	619a      	str	r2, [r3, #24]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f806 	bl	8000d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr

08000d36 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8000d36:	b580      	push	{r7, lr}
 8000d38:	b082      	sub	sp, #8
 8000d3a:	af00      	add	r7, sp, #0
 8000d3c:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8000d3e:	687b      	ldr	r3, [r7, #4]
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d101      	bne.n	8000d48 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8000d44:	2301      	movs	r3, #1
 8000d46:	e081      	b.n	8000e4c <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000d4e:	b2db      	uxtb	r3, r3
 8000d50:	2b00      	cmp	r3, #0
 8000d52:	d106      	bne.n	8000d62 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8000d54:	687b      	ldr	r3, [r7, #4]
 8000d56:	2200      	movs	r2, #0
 8000d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8000d5c:	6878      	ldr	r0, [r7, #4]
 8000d5e:	f003 f8fd 	bl	8003f5c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8000d62:	687b      	ldr	r3, [r7, #4]
 8000d64:	2224      	movs	r2, #36	; 0x24
 8000d66:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8000d6a:	687b      	ldr	r3, [r7, #4]
 8000d6c:	681b      	ldr	r3, [r3, #0]
 8000d6e:	681a      	ldr	r2, [r3, #0]
 8000d70:	687b      	ldr	r3, [r7, #4]
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	f022 0201 	bic.w	r2, r2, #1
 8000d78:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	685a      	ldr	r2, [r3, #4]
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	681b      	ldr	r3, [r3, #0]
 8000d82:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000d86:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	689a      	ldr	r2, [r3, #8]
 8000d8e:	687b      	ldr	r3, [r7, #4]
 8000d90:	681b      	ldr	r3, [r3, #0]
 8000d92:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000d96:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68db      	ldr	r3, [r3, #12]
 8000d9c:	2b01      	cmp	r3, #1
 8000d9e:	d107      	bne.n	8000db0 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8000da0:	687b      	ldr	r3, [r7, #4]
 8000da2:	689a      	ldr	r2, [r3, #8]
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8000dac:	609a      	str	r2, [r3, #8]
 8000dae:	e006      	b.n	8000dbe <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	689a      	ldr	r2, [r3, #8]
 8000db4:	687b      	ldr	r3, [r7, #4]
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8000dbc:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	68db      	ldr	r3, [r3, #12]
 8000dc2:	2b02      	cmp	r3, #2
 8000dc4:	d104      	bne.n	8000dd0 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8000dc6:	687b      	ldr	r3, [r7, #4]
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000dce:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	681b      	ldr	r3, [r3, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	687a      	ldr	r2, [r7, #4]
 8000dd8:	6812      	ldr	r2, [r2, #0]
 8000dda:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000dde:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000de2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	681b      	ldr	r3, [r3, #0]
 8000de8:	68da      	ldr	r2, [r3, #12]
 8000dea:	687b      	ldr	r3, [r7, #4]
 8000dec:	681b      	ldr	r3, [r3, #0]
 8000dee:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8000df2:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	691a      	ldr	r2, [r3, #16]
 8000df8:	687b      	ldr	r3, [r7, #4]
 8000dfa:	695b      	ldr	r3, [r3, #20]
 8000dfc:	ea42 0103 	orr.w	r1, r2, r3
 8000e00:	687b      	ldr	r3, [r7, #4]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	021a      	lsls	r2, r3, #8
 8000e06:	687b      	ldr	r3, [r7, #4]
 8000e08:	681b      	ldr	r3, [r3, #0]
 8000e0a:	430a      	orrs	r2, r1
 8000e0c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	69d9      	ldr	r1, [r3, #28]
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6a1a      	ldr	r2, [r3, #32]
 8000e16:	687b      	ldr	r3, [r7, #4]
 8000e18:	681b      	ldr	r3, [r3, #0]
 8000e1a:	430a      	orrs	r2, r1
 8000e1c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	681a      	ldr	r2, [r3, #0]
 8000e24:	687b      	ldr	r3, [r7, #4]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f042 0201 	orr.w	r2, r2, #1
 8000e2c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	2200      	movs	r2, #0
 8000e32:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	2220      	movs	r2, #32
 8000e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8000e3c:	687b      	ldr	r3, [r7, #4]
 8000e3e:	2200      	movs	r2, #0
 8000e40:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	2200      	movs	r2, #0
 8000e46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8000e4a:	2300      	movs	r3, #0
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b088      	sub	sp, #32
 8000e58:	af02      	add	r7, sp, #8
 8000e5a:	60f8      	str	r0, [r7, #12]
 8000e5c:	607a      	str	r2, [r7, #4]
 8000e5e:	461a      	mov	r2, r3
 8000e60:	460b      	mov	r3, r1
 8000e62:	817b      	strh	r3, [r7, #10]
 8000e64:	4613      	mov	r3, r2
 8000e66:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8000e6e:	b2db      	uxtb	r3, r3
 8000e70:	2b20      	cmp	r3, #32
 8000e72:	f040 80da 	bne.w	800102a <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8000e76:	68fb      	ldr	r3, [r7, #12]
 8000e78:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8000e7c:	2b01      	cmp	r3, #1
 8000e7e:	d101      	bne.n	8000e84 <HAL_I2C_Master_Transmit+0x30>
 8000e80:	2302      	movs	r3, #2
 8000e82:	e0d3      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	2201      	movs	r2, #1
 8000e88:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8000e8c:	f7ff fc38 	bl	8000700 <HAL_GetTick>
 8000e90:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8000e92:	697b      	ldr	r3, [r7, #20]
 8000e94:	9300      	str	r3, [sp, #0]
 8000e96:	2319      	movs	r3, #25
 8000e98:	2201      	movs	r2, #1
 8000e9a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000e9e:	68f8      	ldr	r0, [r7, #12]
 8000ea0:	f000 f9f7 	bl	8001292 <I2C_WaitOnFlagUntilTimeout>
 8000ea4:	4603      	mov	r3, r0
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d001      	beq.n	8000eae <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8000eaa:	2301      	movs	r3, #1
 8000eac:	e0be      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	2221      	movs	r2, #33	; 0x21
 8000eb2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	2210      	movs	r2, #16
 8000eba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8000ebe:	68fb      	ldr	r3, [r7, #12]
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	687a      	ldr	r2, [r7, #4]
 8000ec8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	893a      	ldrh	r2, [r7, #8]
 8000ece:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8000ed0:	68fb      	ldr	r3, [r7, #12]
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000ed6:	68fb      	ldr	r3, [r7, #12]
 8000ed8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000eda:	b29b      	uxth	r3, r3
 8000edc:	2bff      	cmp	r3, #255	; 0xff
 8000ede:	d90e      	bls.n	8000efe <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8000ee0:	68fb      	ldr	r3, [r7, #12]
 8000ee2:	22ff      	movs	r2, #255	; 0xff
 8000ee4:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8000ee6:	68fb      	ldr	r3, [r7, #12]
 8000ee8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000eea:	b2da      	uxtb	r2, r3
 8000eec:	8979      	ldrh	r1, [r7, #10]
 8000eee:	4b51      	ldr	r3, [pc, #324]	; (8001034 <HAL_I2C_Master_Transmit+0x1e0>)
 8000ef0:	9300      	str	r3, [sp, #0]
 8000ef2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000ef6:	68f8      	ldr	r0, [r7, #12]
 8000ef8:	f000 faee 	bl	80014d8 <I2C_TransferConfig>
 8000efc:	e06c      	b.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8000efe:	68fb      	ldr	r3, [r7, #12]
 8000f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f02:	b29a      	uxth	r2, r3
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8000f08:	68fb      	ldr	r3, [r7, #12]
 8000f0a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f0c:	b2da      	uxtb	r2, r3
 8000f0e:	8979      	ldrh	r1, [r7, #10]
 8000f10:	4b48      	ldr	r3, [pc, #288]	; (8001034 <HAL_I2C_Master_Transmit+0x1e0>)
 8000f12:	9300      	str	r3, [sp, #0]
 8000f14:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000f18:	68f8      	ldr	r0, [r7, #12]
 8000f1a:	f000 fadd 	bl	80014d8 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 8000f1e:	e05b      	b.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000f20:	697a      	ldr	r2, [r7, #20]
 8000f22:	6a39      	ldr	r1, [r7, #32]
 8000f24:	68f8      	ldr	r0, [r7, #12]
 8000f26:	f000 f9f4 	bl	8001312 <I2C_WaitOnTXISFlagUntilTimeout>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 8000f30:	2301      	movs	r3, #1
 8000f32:	e07b      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f38:	781a      	ldrb	r2, [r3, #0]
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8000f40:	68fb      	ldr	r3, [r7, #12]
 8000f42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000f44:	1c5a      	adds	r2, r3, #1
 8000f46:	68fb      	ldr	r3, [r7, #12]
 8000f48:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f4e:	b29b      	uxth	r3, r3
 8000f50:	3b01      	subs	r3, #1
 8000f52:	b29a      	uxth	r2, r3
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f5c:	3b01      	subs	r3, #1
 8000f5e:	b29a      	uxth	r2, r3
 8000f60:	68fb      	ldr	r3, [r7, #12]
 8000f62:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f68:	b29b      	uxth	r3, r3
 8000f6a:	2b00      	cmp	r3, #0
 8000f6c:	d034      	beq.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d130      	bne.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8000f76:	697b      	ldr	r3, [r7, #20]
 8000f78:	9300      	str	r3, [sp, #0]
 8000f7a:	6a3b      	ldr	r3, [r7, #32]
 8000f7c:	2200      	movs	r2, #0
 8000f7e:	2180      	movs	r1, #128	; 0x80
 8000f80:	68f8      	ldr	r0, [r7, #12]
 8000f82:	f000 f986 	bl	8001292 <I2C_WaitOnFlagUntilTimeout>
 8000f86:	4603      	mov	r3, r0
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d001      	beq.n	8000f90 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8000f8c:	2301      	movs	r3, #1
 8000f8e:	e04d      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000f94:	b29b      	uxth	r3, r3
 8000f96:	2bff      	cmp	r3, #255	; 0xff
 8000f98:	d90e      	bls.n	8000fb8 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	22ff      	movs	r2, #255	; 0xff
 8000f9e:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8000fa0:	68fb      	ldr	r3, [r7, #12]
 8000fa2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fa4:	b2da      	uxtb	r2, r3
 8000fa6:	8979      	ldrh	r1, [r7, #10]
 8000fa8:	2300      	movs	r3, #0
 8000faa:	9300      	str	r3, [sp, #0]
 8000fac:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8000fb0:	68f8      	ldr	r0, [r7, #12]
 8000fb2:	f000 fa91 	bl	80014d8 <I2C_TransferConfig>
 8000fb6:	e00f      	b.n	8000fd8 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fbc:	b29a      	uxth	r2, r3
 8000fbe:	68fb      	ldr	r3, [r7, #12]
 8000fc0:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8000fc2:	68fb      	ldr	r3, [r7, #12]
 8000fc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8000fc6:	b2da      	uxtb	r2, r3
 8000fc8:	8979      	ldrh	r1, [r7, #10]
 8000fca:	2300      	movs	r3, #0
 8000fcc:	9300      	str	r3, [sp, #0]
 8000fce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8000fd2:	68f8      	ldr	r0, [r7, #12]
 8000fd4:	f000 fa80 	bl	80014d8 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8000fd8:	68fb      	ldr	r3, [r7, #12]
 8000fda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8000fdc:	b29b      	uxth	r3, r3
 8000fde:	2b00      	cmp	r3, #0
 8000fe0:	d19e      	bne.n	8000f20 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8000fe2:	697a      	ldr	r2, [r7, #20]
 8000fe4:	6a39      	ldr	r1, [r7, #32]
 8000fe6:	68f8      	ldr	r0, [r7, #12]
 8000fe8:	f000 f9d3 	bl	8001392 <I2C_WaitOnSTOPFlagUntilTimeout>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 8000ff2:	2301      	movs	r3, #1
 8000ff4:	e01a      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8000ff6:	68fb      	ldr	r3, [r7, #12]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	2220      	movs	r2, #32
 8000ffc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8000ffe:	68fb      	ldr	r3, [r7, #12]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	6859      	ldr	r1, [r3, #4]
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	681a      	ldr	r2, [r3, #0]
 8001008:	4b0b      	ldr	r3, [pc, #44]	; (8001038 <HAL_I2C_Master_Transmit+0x1e4>)
 800100a:	400b      	ands	r3, r1
 800100c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800100e:	68fb      	ldr	r3, [r7, #12]
 8001010:	2220      	movs	r2, #32
 8001012:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	2200      	movs	r2, #0
 800101a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	2200      	movs	r2, #0
 8001022:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001026:	2300      	movs	r3, #0
 8001028:	e000      	b.n	800102c <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 800102a:	2302      	movs	r3, #2
  }
}
 800102c:	4618      	mov	r0, r3
 800102e:	3718      	adds	r7, #24
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}
 8001034:	80002000 	.word	0x80002000
 8001038:	fe00e800 	.word	0xfe00e800

0800103c <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b08a      	sub	sp, #40	; 0x28
 8001040:	af02      	add	r7, sp, #8
 8001042:	60f8      	str	r0, [r7, #12]
 8001044:	607a      	str	r2, [r7, #4]
 8001046:	603b      	str	r3, [r7, #0]
 8001048:	460b      	mov	r3, r1
 800104a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 800104c:	2300      	movs	r3, #0
 800104e:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001056:	b2db      	uxtb	r3, r3
 8001058:	2b20      	cmp	r3, #32
 800105a:	f040 80f1 	bne.w	8001240 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	699b      	ldr	r3, [r3, #24]
 8001064:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001068:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800106c:	d101      	bne.n	8001072 <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 800106e:	2302      	movs	r3, #2
 8001070:	e0e7      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001072:	68fb      	ldr	r3, [r7, #12]
 8001074:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001078:	2b01      	cmp	r3, #1
 800107a:	d101      	bne.n	8001080 <HAL_I2C_IsDeviceReady+0x44>
 800107c:	2302      	movs	r3, #2
 800107e:	e0e0      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
 8001080:	68fb      	ldr	r3, [r7, #12]
 8001082:	2201      	movs	r2, #1
 8001084:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001088:	68fb      	ldr	r3, [r7, #12]
 800108a:	2224      	movs	r2, #36	; 0x24
 800108c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001090:	68fb      	ldr	r3, [r7, #12]
 8001092:	2200      	movs	r2, #0
 8001094:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001096:	68fb      	ldr	r3, [r7, #12]
 8001098:	68db      	ldr	r3, [r3, #12]
 800109a:	2b01      	cmp	r3, #1
 800109c:	d107      	bne.n	80010ae <HAL_I2C_IsDeviceReady+0x72>
 800109e:	897b      	ldrh	r3, [r7, #10]
 80010a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80010a8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80010ac:	e004      	b.n	80010b8 <HAL_I2C_IsDeviceReady+0x7c>
 80010ae:	897b      	ldrh	r3, [r7, #10]
 80010b0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80010b4:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 80010b8:	68fa      	ldr	r2, [r7, #12]
 80010ba:	6812      	ldr	r2, [r2, #0]
 80010bc:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 80010be:	f7ff fb1f 	bl	8000700 <HAL_GetTick>
 80010c2:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 80010c4:	68fb      	ldr	r3, [r7, #12]
 80010c6:	681b      	ldr	r3, [r3, #0]
 80010c8:	699b      	ldr	r3, [r3, #24]
 80010ca:	f003 0320 	and.w	r3, r3, #32
 80010ce:	2b20      	cmp	r3, #32
 80010d0:	bf0c      	ite	eq
 80010d2:	2301      	moveq	r3, #1
 80010d4:	2300      	movne	r3, #0
 80010d6:	b2db      	uxtb	r3, r3
 80010d8:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	681b      	ldr	r3, [r3, #0]
 80010de:	699b      	ldr	r3, [r3, #24]
 80010e0:	f003 0310 	and.w	r3, r3, #16
 80010e4:	2b10      	cmp	r3, #16
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
 80010ee:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 80010f0:	e034      	b.n	800115c <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f8:	d01a      	beq.n	8001130 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80010fa:	f7ff fb01 	bl	8000700 <HAL_GetTick>
 80010fe:	4602      	mov	r2, r0
 8001100:	69bb      	ldr	r3, [r7, #24]
 8001102:	1ad3      	subs	r3, r2, r3
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	429a      	cmp	r2, r3
 8001108:	d302      	bcc.n	8001110 <HAL_I2C_IsDeviceReady+0xd4>
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	2b00      	cmp	r3, #0
 800110e:	d10f      	bne.n	8001130 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	2220      	movs	r2, #32
 8001114:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001118:	68fb      	ldr	r3, [r7, #12]
 800111a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800111c:	f043 0220 	orr.w	r2, r3, #32
 8001120:	68fb      	ldr	r3, [r7, #12]
 8001122:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	e088      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	681b      	ldr	r3, [r3, #0]
 8001134:	699b      	ldr	r3, [r3, #24]
 8001136:	f003 0320 	and.w	r3, r3, #32
 800113a:	2b20      	cmp	r3, #32
 800113c:	bf0c      	ite	eq
 800113e:	2301      	moveq	r3, #1
 8001140:	2300      	movne	r3, #0
 8001142:	b2db      	uxtb	r3, r3
 8001144:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	699b      	ldr	r3, [r3, #24]
 800114c:	f003 0310 	and.w	r3, r3, #16
 8001150:	2b10      	cmp	r3, #16
 8001152:	bf0c      	ite	eq
 8001154:	2301      	moveq	r3, #1
 8001156:	2300      	movne	r3, #0
 8001158:	b2db      	uxtb	r3, r3
 800115a:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 800115c:	7ffb      	ldrb	r3, [r7, #31]
 800115e:	2b00      	cmp	r3, #0
 8001160:	d102      	bne.n	8001168 <HAL_I2C_IsDeviceReady+0x12c>
 8001162:	7fbb      	ldrb	r3, [r7, #30]
 8001164:	2b00      	cmp	r3, #0
 8001166:	d0c4      	beq.n	80010f2 <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001168:	68fb      	ldr	r3, [r7, #12]
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	699b      	ldr	r3, [r3, #24]
 800116e:	f003 0310 	and.w	r3, r3, #16
 8001172:	2b10      	cmp	r3, #16
 8001174:	d01a      	beq.n	80011ac <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001176:	69bb      	ldr	r3, [r7, #24]
 8001178:	9300      	str	r3, [sp, #0]
 800117a:	683b      	ldr	r3, [r7, #0]
 800117c:	2200      	movs	r2, #0
 800117e:	2120      	movs	r1, #32
 8001180:	68f8      	ldr	r0, [r7, #12]
 8001182:	f000 f886 	bl	8001292 <I2C_WaitOnFlagUntilTimeout>
 8001186:	4603      	mov	r3, r0
 8001188:	2b00      	cmp	r3, #0
 800118a:	d001      	beq.n	8001190 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 800118c:	2301      	movs	r3, #1
 800118e:	e058      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001190:	68fb      	ldr	r3, [r7, #12]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	2220      	movs	r2, #32
 8001196:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001198:	68fb      	ldr	r3, [r7, #12]
 800119a:	2220      	movs	r2, #32
 800119c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80011a0:	68fb      	ldr	r3, [r7, #12]
 80011a2:	2200      	movs	r2, #0
 80011a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 80011a8:	2300      	movs	r3, #0
 80011aa:	e04a      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	9300      	str	r3, [sp, #0]
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	2200      	movs	r2, #0
 80011b4:	2120      	movs	r1, #32
 80011b6:	68f8      	ldr	r0, [r7, #12]
 80011b8:	f000 f86b 	bl	8001292 <I2C_WaitOnFlagUntilTimeout>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 80011c2:	2301      	movs	r3, #1
 80011c4:	e03d      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80011c6:	68fb      	ldr	r3, [r7, #12]
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	2210      	movs	r2, #16
 80011cc:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80011ce:	68fb      	ldr	r3, [r7, #12]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	2220      	movs	r2, #32
 80011d4:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 80011d6:	697b      	ldr	r3, [r7, #20]
 80011d8:	687a      	ldr	r2, [r7, #4]
 80011da:	429a      	cmp	r2, r3
 80011dc:	d118      	bne.n	8001210 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 80011de:	68fb      	ldr	r3, [r7, #12]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	685a      	ldr	r2, [r3, #4]
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80011ec:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 80011ee:	69bb      	ldr	r3, [r7, #24]
 80011f0:	9300      	str	r3, [sp, #0]
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	2200      	movs	r2, #0
 80011f6:	2120      	movs	r1, #32
 80011f8:	68f8      	ldr	r0, [r7, #12]
 80011fa:	f000 f84a 	bl	8001292 <I2C_WaitOnFlagUntilTimeout>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001204:	2301      	movs	r3, #1
 8001206:	e01c      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001208:	68fb      	ldr	r3, [r7, #12]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	2220      	movs	r2, #32
 800120e:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001210:	697b      	ldr	r3, [r7, #20]
 8001212:	3301      	adds	r3, #1
 8001214:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001216:	697b      	ldr	r3, [r7, #20]
 8001218:	687a      	ldr	r2, [r7, #4]
 800121a:	429a      	cmp	r2, r3
 800121c:	f63f af3b 	bhi.w	8001096 <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001220:	68fb      	ldr	r3, [r7, #12]
 8001222:	2220      	movs	r2, #32
 8001224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800122c:	f043 0220 	orr.w	r2, r3, #32
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	2200      	movs	r2, #0
 8001238:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 800123c:	2301      	movs	r3, #1
 800123e:	e000      	b.n	8001242 <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001240:	2302      	movs	r3, #2
  }
}
 8001242:	4618      	mov	r0, r3
 8001244:	3720      	adds	r7, #32
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}

0800124a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800124a:	b480      	push	{r7}
 800124c:	b083      	sub	sp, #12
 800124e:	af00      	add	r7, sp, #0
 8001250:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	681b      	ldr	r3, [r3, #0]
 8001256:	699b      	ldr	r3, [r3, #24]
 8001258:	f003 0302 	and.w	r3, r3, #2
 800125c:	2b02      	cmp	r3, #2
 800125e:	d103      	bne.n	8001268 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	2200      	movs	r2, #0
 8001266:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001268:	687b      	ldr	r3, [r7, #4]
 800126a:	681b      	ldr	r3, [r3, #0]
 800126c:	699b      	ldr	r3, [r3, #24]
 800126e:	f003 0301 	and.w	r3, r3, #1
 8001272:	2b01      	cmp	r3, #1
 8001274:	d007      	beq.n	8001286 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	681b      	ldr	r3, [r3, #0]
 800127a:	699a      	ldr	r2, [r3, #24]
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	f042 0201 	orr.w	r2, r2, #1
 8001284:	619a      	str	r2, [r3, #24]
  }
}
 8001286:	bf00      	nop
 8001288:	370c      	adds	r7, #12
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001292:	b580      	push	{r7, lr}
 8001294:	b084      	sub	sp, #16
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	603b      	str	r3, [r7, #0]
 800129e:	4613      	mov	r3, r2
 80012a0:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012a2:	e022      	b.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80012a4:	683b      	ldr	r3, [r7, #0]
 80012a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012aa:	d01e      	beq.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80012ac:	f7ff fa28 	bl	8000700 <HAL_GetTick>
 80012b0:	4602      	mov	r2, r0
 80012b2:	69bb      	ldr	r3, [r7, #24]
 80012b4:	1ad3      	subs	r3, r2, r3
 80012b6:	683a      	ldr	r2, [r7, #0]
 80012b8:	429a      	cmp	r2, r3
 80012ba:	d302      	bcc.n	80012c2 <I2C_WaitOnFlagUntilTimeout+0x30>
 80012bc:	683b      	ldr	r3, [r7, #0]
 80012be:	2b00      	cmp	r3, #0
 80012c0:	d113      	bne.n	80012ea <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012c6:	f043 0220 	orr.w	r2, r3, #32
 80012ca:	68fb      	ldr	r3, [r7, #12]
 80012cc:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	2220      	movs	r2, #32
 80012d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	2200      	movs	r2, #0
 80012da:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80012de:	68fb      	ldr	r3, [r7, #12]
 80012e0:	2200      	movs	r2, #0
 80012e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 80012e6:	2301      	movs	r3, #1
 80012e8:	e00f      	b.n	800130a <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	699a      	ldr	r2, [r3, #24]
 80012f0:	68bb      	ldr	r3, [r7, #8]
 80012f2:	4013      	ands	r3, r2
 80012f4:	68ba      	ldr	r2, [r7, #8]
 80012f6:	429a      	cmp	r2, r3
 80012f8:	bf0c      	ite	eq
 80012fa:	2301      	moveq	r3, #1
 80012fc:	2300      	movne	r3, #0
 80012fe:	b2db      	uxtb	r3, r3
 8001300:	461a      	mov	r2, r3
 8001302:	79fb      	ldrb	r3, [r7, #7]
 8001304:	429a      	cmp	r2, r3
 8001306:	d0cd      	beq.n	80012a4 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001308:	2300      	movs	r3, #0
}
 800130a:	4618      	mov	r0, r3
 800130c:	3710      	adds	r7, #16
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b084      	sub	sp, #16
 8001316:	af00      	add	r7, sp, #0
 8001318:	60f8      	str	r0, [r7, #12]
 800131a:	60b9      	str	r1, [r7, #8]
 800131c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800131e:	e02c      	b.n	800137a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001320:	687a      	ldr	r2, [r7, #4]
 8001322:	68b9      	ldr	r1, [r7, #8]
 8001324:	68f8      	ldr	r0, [r7, #12]
 8001326:	f000 f871 	bl	800140c <I2C_IsAcknowledgeFailed>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001330:	2301      	movs	r3, #1
 8001332:	e02a      	b.n	800138a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001334:	68bb      	ldr	r3, [r7, #8]
 8001336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800133a:	d01e      	beq.n	800137a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800133c:	f7ff f9e0 	bl	8000700 <HAL_GetTick>
 8001340:	4602      	mov	r2, r0
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	68ba      	ldr	r2, [r7, #8]
 8001348:	429a      	cmp	r2, r3
 800134a:	d302      	bcc.n	8001352 <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800134c:	68bb      	ldr	r3, [r7, #8]
 800134e:	2b00      	cmp	r3, #0
 8001350:	d113      	bne.n	800137a <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001352:	68fb      	ldr	r3, [r7, #12]
 8001354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001356:	f043 0220 	orr.w	r2, r3, #32
 800135a:	68fb      	ldr	r3, [r7, #12]
 800135c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	2220      	movs	r2, #32
 8001362:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	2200      	movs	r2, #0
 800136a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800136e:	68fb      	ldr	r3, [r7, #12]
 8001370:	2200      	movs	r2, #0
 8001372:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001376:	2301      	movs	r3, #1
 8001378:	e007      	b.n	800138a <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800137a:	68fb      	ldr	r3, [r7, #12]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	699b      	ldr	r3, [r3, #24]
 8001380:	f003 0302 	and.w	r3, r3, #2
 8001384:	2b02      	cmp	r3, #2
 8001386:	d1cb      	bne.n	8001320 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001388:	2300      	movs	r3, #0
}
 800138a:	4618      	mov	r0, r3
 800138c:	3710      	adds	r7, #16
 800138e:	46bd      	mov	sp, r7
 8001390:	bd80      	pop	{r7, pc}

08001392 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001392:	b580      	push	{r7, lr}
 8001394:	b084      	sub	sp, #16
 8001396:	af00      	add	r7, sp, #0
 8001398:	60f8      	str	r0, [r7, #12]
 800139a:	60b9      	str	r1, [r7, #8]
 800139c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800139e:	e028      	b.n	80013f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 80013a0:	687a      	ldr	r2, [r7, #4]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f000 f831 	bl	800140c <I2C_IsAcknowledgeFailed>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d001      	beq.n	80013b4 <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e026      	b.n	8001402 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80013b4:	f7ff f9a4 	bl	8000700 <HAL_GetTick>
 80013b8:	4602      	mov	r2, r0
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	1ad3      	subs	r3, r2, r3
 80013be:	68ba      	ldr	r2, [r7, #8]
 80013c0:	429a      	cmp	r2, r3
 80013c2:	d302      	bcc.n	80013ca <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 80013c4:	68bb      	ldr	r3, [r7, #8]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d113      	bne.n	80013f2 <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ce:	f043 0220 	orr.w	r2, r3, #32
 80013d2:	68fb      	ldr	r3, [r7, #12]
 80013d4:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 80013d6:	68fb      	ldr	r3, [r7, #12]
 80013d8:	2220      	movs	r2, #32
 80013da:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80013e6:	68fb      	ldr	r3, [r7, #12]
 80013e8:	2200      	movs	r2, #0
 80013ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80013ee:	2301      	movs	r3, #1
 80013f0:	e007      	b.n	8001402 <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80013f2:	68fb      	ldr	r3, [r7, #12]
 80013f4:	681b      	ldr	r3, [r3, #0]
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	f003 0320 	and.w	r3, r3, #32
 80013fc:	2b20      	cmp	r3, #32
 80013fe:	d1cf      	bne.n	80013a0 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001400:	2300      	movs	r3, #0
}
 8001402:	4618      	mov	r0, r3
 8001404:	3710      	adds	r7, #16
 8001406:	46bd      	mov	sp, r7
 8001408:	bd80      	pop	{r7, pc}
	...

0800140c <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800140c:	b580      	push	{r7, lr}
 800140e:	b084      	sub	sp, #16
 8001410:	af00      	add	r7, sp, #0
 8001412:	60f8      	str	r0, [r7, #12]
 8001414:	60b9      	str	r1, [r7, #8]
 8001416:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	699b      	ldr	r3, [r3, #24]
 800141e:	f003 0310 	and.w	r3, r3, #16
 8001422:	2b10      	cmp	r3, #16
 8001424:	d151      	bne.n	80014ca <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001426:	e022      	b.n	800146e <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001428:	68bb      	ldr	r3, [r7, #8]
 800142a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800142e:	d01e      	beq.n	800146e <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001430:	f7ff f966 	bl	8000700 <HAL_GetTick>
 8001434:	4602      	mov	r2, r0
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	1ad3      	subs	r3, r2, r3
 800143a:	68ba      	ldr	r2, [r7, #8]
 800143c:	429a      	cmp	r2, r3
 800143e:	d302      	bcc.n	8001446 <I2C_IsAcknowledgeFailed+0x3a>
 8001440:	68bb      	ldr	r3, [r7, #8]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d113      	bne.n	800146e <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001446:	68fb      	ldr	r3, [r7, #12]
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	f043 0220 	orr.w	r2, r3, #32
 800144e:	68fb      	ldr	r3, [r7, #12]
 8001450:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	2220      	movs	r2, #32
 8001456:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800145a:	68fb      	ldr	r3, [r7, #12]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001462:	68fb      	ldr	r3, [r7, #12]
 8001464:	2200      	movs	r2, #0
 8001466:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e02e      	b.n	80014cc <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	699b      	ldr	r3, [r3, #24]
 8001474:	f003 0320 	and.w	r3, r3, #32
 8001478:	2b20      	cmp	r3, #32
 800147a:	d1d5      	bne.n	8001428 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800147c:	68fb      	ldr	r3, [r7, #12]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	2210      	movs	r2, #16
 8001482:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001484:	68fb      	ldr	r3, [r7, #12]
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	2220      	movs	r2, #32
 800148a:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800148c:	68f8      	ldr	r0, [r7, #12]
 800148e:	f7ff fedc 	bl	800124a <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	6859      	ldr	r1, [r3, #4]
 8001498:	68fb      	ldr	r3, [r7, #12]
 800149a:	681a      	ldr	r2, [r3, #0]
 800149c:	4b0d      	ldr	r3, [pc, #52]	; (80014d4 <I2C_IsAcknowledgeFailed+0xc8>)
 800149e:	400b      	ands	r3, r1
 80014a0:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80014a2:	68fb      	ldr	r3, [r7, #12]
 80014a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014a6:	f043 0204 	orr.w	r2, r3, #4
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 80014ae:	68fb      	ldr	r3, [r7, #12]
 80014b0:	2220      	movs	r2, #32
 80014b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80014b6:	68fb      	ldr	r3, [r7, #12]
 80014b8:	2200      	movs	r2, #0
 80014ba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80014be:	68fb      	ldr	r3, [r7, #12]
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 80014c6:	2301      	movs	r3, #1
 80014c8:	e000      	b.n	80014cc <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 80014ca:	2300      	movs	r3, #0
}
 80014cc:	4618      	mov	r0, r3
 80014ce:	3710      	adds	r7, #16
 80014d0:	46bd      	mov	sp, r7
 80014d2:	bd80      	pop	{r7, pc}
 80014d4:	fe00e800 	.word	0xfe00e800

080014d8 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 80014d8:	b480      	push	{r7}
 80014da:	b085      	sub	sp, #20
 80014dc:	af00      	add	r7, sp, #0
 80014de:	60f8      	str	r0, [r7, #12]
 80014e0:	607b      	str	r3, [r7, #4]
 80014e2:	460b      	mov	r3, r1
 80014e4:	817b      	strh	r3, [r7, #10]
 80014e6:	4613      	mov	r3, r2
 80014e8:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	685a      	ldr	r2, [r3, #4]
 80014f0:	69bb      	ldr	r3, [r7, #24]
 80014f2:	0d5b      	lsrs	r3, r3, #21
 80014f4:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 80014f8:	4b0d      	ldr	r3, [pc, #52]	; (8001530 <I2C_TransferConfig+0x58>)
 80014fa:	430b      	orrs	r3, r1
 80014fc:	43db      	mvns	r3, r3
 80014fe:	ea02 0103 	and.w	r1, r2, r3
 8001502:	897b      	ldrh	r3, [r7, #10]
 8001504:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001508:	7a7b      	ldrb	r3, [r7, #9]
 800150a:	041b      	lsls	r3, r3, #16
 800150c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001510:	431a      	orrs	r2, r3
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	431a      	orrs	r2, r3
 8001516:	69bb      	ldr	r3, [r7, #24]
 8001518:	431a      	orrs	r2, r3
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	681b      	ldr	r3, [r3, #0]
 800151e:	430a      	orrs	r2, r1
 8001520:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001522:	bf00      	nop
 8001524:	3714      	adds	r7, #20
 8001526:	46bd      	mov	sp, r7
 8001528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800152c:	4770      	bx	lr
 800152e:	bf00      	nop
 8001530:	03ff63ff 	.word	0x03ff63ff

08001534 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001534:	b480      	push	{r7}
 8001536:	b083      	sub	sp, #12
 8001538:	af00      	add	r7, sp, #0
 800153a:	6078      	str	r0, [r7, #4]
 800153c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b20      	cmp	r3, #32
 8001548:	d138      	bne.n	80015bc <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001550:	2b01      	cmp	r3, #1
 8001552:	d101      	bne.n	8001558 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001554:	2302      	movs	r3, #2
 8001556:	e032      	b.n	80015be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	2201      	movs	r2, #1
 800155c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	2224      	movs	r2, #36	; 0x24
 8001564:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	681a      	ldr	r2, [r3, #0]
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f022 0201 	bic.w	r2, r2, #1
 8001576:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	681a      	ldr	r2, [r3, #0]
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001586:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	6819      	ldr	r1, [r3, #0]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	683a      	ldr	r2, [r7, #0]
 8001594:	430a      	orrs	r2, r1
 8001596:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	681a      	ldr	r2, [r3, #0]
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	681b      	ldr	r3, [r3, #0]
 80015a2:	f042 0201 	orr.w	r2, r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	2220      	movs	r2, #32
 80015ac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	2200      	movs	r2, #0
 80015b4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80015b8:	2300      	movs	r3, #0
 80015ba:	e000      	b.n	80015be <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80015bc:	2302      	movs	r3, #2
  }
}
 80015be:	4618      	mov	r0, r3
 80015c0:	370c      	adds	r7, #12
 80015c2:	46bd      	mov	sp, r7
 80015c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c8:	4770      	bx	lr

080015ca <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80015ca:	b480      	push	{r7}
 80015cc:	b085      	sub	sp, #20
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	6078      	str	r0, [r7, #4]
 80015d2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80015da:	b2db      	uxtb	r3, r3
 80015dc:	2b20      	cmp	r3, #32
 80015de:	d139      	bne.n	8001654 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d101      	bne.n	80015ee <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80015ea:	2302      	movs	r3, #2
 80015ec:	e033      	b.n	8001656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	2201      	movs	r2, #1
 80015f2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2224      	movs	r2, #36	; 0x24
 80015fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	681a      	ldr	r2, [r3, #0]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	f022 0201 	bic.w	r2, r2, #1
 800160c:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800161c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800161e:	683b      	ldr	r3, [r7, #0]
 8001620:	021b      	lsls	r3, r3, #8
 8001622:	68fa      	ldr	r2, [r7, #12]
 8001624:	4313      	orrs	r3, r2
 8001626:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001628:	687b      	ldr	r3, [r7, #4]
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	68fa      	ldr	r2, [r7, #12]
 800162e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	681a      	ldr	r2, [r3, #0]
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	f042 0201 	orr.w	r2, r2, #1
 800163e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	2220      	movs	r2, #32
 8001644:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	2200      	movs	r2, #0
 800164c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001650:	2300      	movs	r3, #0
 8001652:	e000      	b.n	8001656 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001654:	2302      	movs	r3, #2
  }
}
 8001656:	4618      	mov	r0, r3
 8001658:	3714      	adds	r7, #20
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
	...

08001664 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8001668:	4b04      	ldr	r3, [pc, #16]	; (800167c <HAL_PWREx_GetVoltageRange+0x18>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8001670:	4618      	mov	r0, r3
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	40007000 	.word	0x40007000

08001680 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001680:	b480      	push	{r7}
 8001682:	b085      	sub	sp, #20
 8001684:	af00      	add	r7, sp, #0
 8001686:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800168e:	d130      	bne.n	80016f2 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8001690:	4b23      	ldr	r3, [pc, #140]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8001698:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800169c:	d038      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800169e:	4b20      	ldr	r3, [pc, #128]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80016a6:	4a1e      	ldr	r2, [pc, #120]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016a8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80016ac:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80016ae:	4b1d      	ldr	r3, [pc, #116]	; (8001724 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	2232      	movs	r2, #50	; 0x32
 80016b4:	fb02 f303 	mul.w	r3, r2, r3
 80016b8:	4a1b      	ldr	r2, [pc, #108]	; (8001728 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80016ba:	fba2 2303 	umull	r2, r3, r2, r3
 80016be:	0c9b      	lsrs	r3, r3, #18
 80016c0:	3301      	adds	r3, #1
 80016c2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016c4:	e002      	b.n	80016cc <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80016c6:	68fb      	ldr	r3, [r7, #12]
 80016c8:	3b01      	subs	r3, #1
 80016ca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80016cc:	4b14      	ldr	r3, [pc, #80]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016ce:	695b      	ldr	r3, [r3, #20]
 80016d0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016d8:	d102      	bne.n	80016e0 <HAL_PWREx_ControlVoltageScaling+0x60>
 80016da:	68fb      	ldr	r3, [r7, #12]
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d1f2      	bne.n	80016c6 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80016e0:	4b0f      	ldr	r3, [pc, #60]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016e2:	695b      	ldr	r3, [r3, #20]
 80016e4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80016e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016ec:	d110      	bne.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e00f      	b.n	8001712 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80016f2:	4b0b      	ldr	r3, [pc, #44]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80016fa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80016fe:	d007      	beq.n	8001710 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8001700:	4b07      	ldr	r3, [pc, #28]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8001708:	4a05      	ldr	r2, [pc, #20]	; (8001720 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800170a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800170e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8001710:	2300      	movs	r3, #0
}
 8001712:	4618      	mov	r0, r3
 8001714:	3714      	adds	r7, #20
 8001716:	46bd      	mov	sp, r7
 8001718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171c:	4770      	bx	lr
 800171e:	bf00      	nop
 8001720:	40007000 	.word	0x40007000
 8001724:	2000000c 	.word	0x2000000c
 8001728:	431bde83 	.word	0x431bde83

0800172c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b088      	sub	sp, #32
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	2b00      	cmp	r3, #0
 8001738:	d101      	bne.n	800173e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e39d      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800173e:	4ba4      	ldr	r3, [pc, #656]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001740:	689b      	ldr	r3, [r3, #8]
 8001742:	f003 030c 	and.w	r3, r3, #12
 8001746:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001748:	4ba1      	ldr	r3, [pc, #644]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800174a:	68db      	ldr	r3, [r3, #12]
 800174c:	f003 0303 	and.w	r3, r3, #3
 8001750:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	f003 0310 	and.w	r3, r3, #16
 800175a:	2b00      	cmp	r3, #0
 800175c:	f000 80e1 	beq.w	8001922 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001760:	69bb      	ldr	r3, [r7, #24]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d007      	beq.n	8001776 <HAL_RCC_OscConfig+0x4a>
 8001766:	69bb      	ldr	r3, [r7, #24]
 8001768:	2b0c      	cmp	r3, #12
 800176a:	f040 8088 	bne.w	800187e <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 800176e:	697b      	ldr	r3, [r7, #20]
 8001770:	2b01      	cmp	r3, #1
 8001772:	f040 8084 	bne.w	800187e <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001776:	4b96      	ldr	r3, [pc, #600]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	f003 0302 	and.w	r3, r3, #2
 800177e:	2b00      	cmp	r3, #0
 8001780:	d005      	beq.n	800178e <HAL_RCC_OscConfig+0x62>
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	699b      	ldr	r3, [r3, #24]
 8001786:	2b00      	cmp	r3, #0
 8001788:	d101      	bne.n	800178e <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 800178a:	2301      	movs	r3, #1
 800178c:	e375      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6a1a      	ldr	r2, [r3, #32]
 8001792:	4b8f      	ldr	r3, [pc, #572]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	f003 0308 	and.w	r3, r3, #8
 800179a:	2b00      	cmp	r3, #0
 800179c:	d004      	beq.n	80017a8 <HAL_RCC_OscConfig+0x7c>
 800179e:	4b8c      	ldr	r3, [pc, #560]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017a6:	e005      	b.n	80017b4 <HAL_RCC_OscConfig+0x88>
 80017a8:	4b89      	ldr	r3, [pc, #548]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017aa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80017ae:	091b      	lsrs	r3, r3, #4
 80017b0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d223      	bcs.n	8001800 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	4618      	mov	r0, r3
 80017be:	f000 fd09 	bl	80021d4 <RCC_SetFlashLatencyFromMSIRange>
 80017c2:	4603      	mov	r3, r0
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d001      	beq.n	80017cc <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80017c8:	2301      	movs	r3, #1
 80017ca:	e356      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80017cc:	4b80      	ldr	r3, [pc, #512]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	4a7f      	ldr	r2, [pc, #508]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017d2:	f043 0308 	orr.w	r3, r3, #8
 80017d6:	6013      	str	r3, [r2, #0]
 80017d8:	4b7d      	ldr	r3, [pc, #500]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	6a1b      	ldr	r3, [r3, #32]
 80017e4:	497a      	ldr	r1, [pc, #488]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017e6:	4313      	orrs	r3, r2
 80017e8:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80017ea:	4b79      	ldr	r3, [pc, #484]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	69db      	ldr	r3, [r3, #28]
 80017f6:	021b      	lsls	r3, r3, #8
 80017f8:	4975      	ldr	r1, [pc, #468]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
 80017fe:	e022      	b.n	8001846 <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8001800:	4b73      	ldr	r3, [pc, #460]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	4a72      	ldr	r2, [pc, #456]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001806:	f043 0308 	orr.w	r3, r3, #8
 800180a:	6013      	str	r3, [r2, #0]
 800180c:	4b70      	ldr	r3, [pc, #448]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6a1b      	ldr	r3, [r3, #32]
 8001818:	496d      	ldr	r1, [pc, #436]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800181a:	4313      	orrs	r3, r2
 800181c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800181e:	4b6c      	ldr	r3, [pc, #432]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001820:	685b      	ldr	r3, [r3, #4]
 8001822:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	69db      	ldr	r3, [r3, #28]
 800182a:	021b      	lsls	r3, r3, #8
 800182c:	4968      	ldr	r1, [pc, #416]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800182e:	4313      	orrs	r3, r2
 8001830:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001832:	687b      	ldr	r3, [r7, #4]
 8001834:	6a1b      	ldr	r3, [r3, #32]
 8001836:	4618      	mov	r0, r3
 8001838:	f000 fccc 	bl	80021d4 <RCC_SetFlashLatencyFromMSIRange>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d001      	beq.n	8001846 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e319      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8001846:	f000 fc03 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 800184a:	4601      	mov	r1, r0
 800184c:	4b60      	ldr	r3, [pc, #384]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800184e:	689b      	ldr	r3, [r3, #8]
 8001850:	091b      	lsrs	r3, r3, #4
 8001852:	f003 030f 	and.w	r3, r3, #15
 8001856:	4a5f      	ldr	r2, [pc, #380]	; (80019d4 <HAL_RCC_OscConfig+0x2a8>)
 8001858:	5cd3      	ldrb	r3, [r2, r3]
 800185a:	f003 031f 	and.w	r3, r3, #31
 800185e:	fa21 f303 	lsr.w	r3, r1, r3
 8001862:	4a5d      	ldr	r2, [pc, #372]	; (80019d8 <HAL_RCC_OscConfig+0x2ac>)
 8001864:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8001866:	4b5d      	ldr	r3, [pc, #372]	; (80019dc <HAL_RCC_OscConfig+0x2b0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	4618      	mov	r0, r3
 800186c:	f7fe fefc 	bl	8000668 <HAL_InitTick>
 8001870:	4603      	mov	r3, r0
 8001872:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001874:	7bfb      	ldrb	r3, [r7, #15]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d052      	beq.n	8001920 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 800187a:	7bfb      	ldrb	r3, [r7, #15]
 800187c:	e2fd      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	699b      	ldr	r3, [r3, #24]
 8001882:	2b00      	cmp	r3, #0
 8001884:	d032      	beq.n	80018ec <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8001886:	4b52      	ldr	r3, [pc, #328]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a51      	ldr	r2, [pc, #324]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800188c:	f043 0301 	orr.w	r3, r3, #1
 8001890:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8001892:	f7fe ff35 	bl	8000700 <HAL_GetTick>
 8001896:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001898:	e008      	b.n	80018ac <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800189a:	f7fe ff31 	bl	8000700 <HAL_GetTick>
 800189e:	4602      	mov	r2, r0
 80018a0:	693b      	ldr	r3, [r7, #16]
 80018a2:	1ad3      	subs	r3, r2, r3
 80018a4:	2b02      	cmp	r3, #2
 80018a6:	d901      	bls.n	80018ac <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 80018a8:	2303      	movs	r3, #3
 80018aa:	e2e6      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80018ac:	4b48      	ldr	r3, [pc, #288]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	f003 0302 	and.w	r3, r3, #2
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d0f0      	beq.n	800189a <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80018b8:	4b45      	ldr	r3, [pc, #276]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018ba:	681b      	ldr	r3, [r3, #0]
 80018bc:	4a44      	ldr	r2, [pc, #272]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018be:	f043 0308 	orr.w	r3, r3, #8
 80018c2:	6013      	str	r3, [r2, #0]
 80018c4:	4b42      	ldr	r3, [pc, #264]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	6a1b      	ldr	r3, [r3, #32]
 80018d0:	493f      	ldr	r1, [pc, #252]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018d2:	4313      	orrs	r3, r2
 80018d4:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80018d6:	4b3e      	ldr	r3, [pc, #248]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018d8:	685b      	ldr	r3, [r3, #4]
 80018da:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	69db      	ldr	r3, [r3, #28]
 80018e2:	021b      	lsls	r3, r3, #8
 80018e4:	493a      	ldr	r1, [pc, #232]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018e6:	4313      	orrs	r3, r2
 80018e8:	604b      	str	r3, [r1, #4]
 80018ea:	e01a      	b.n	8001922 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80018ec:	4b38      	ldr	r3, [pc, #224]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	4a37      	ldr	r2, [pc, #220]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80018f2:	f023 0301 	bic.w	r3, r3, #1
 80018f6:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80018f8:	f7fe ff02 	bl	8000700 <HAL_GetTick>
 80018fc:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80018fe:	e008      	b.n	8001912 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8001900:	f7fe fefe 	bl	8000700 <HAL_GetTick>
 8001904:	4602      	mov	r2, r0
 8001906:	693b      	ldr	r3, [r7, #16]
 8001908:	1ad3      	subs	r3, r2, r3
 800190a:	2b02      	cmp	r3, #2
 800190c:	d901      	bls.n	8001912 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 800190e:	2303      	movs	r3, #3
 8001910:	e2b3      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8001912:	4b2f      	ldr	r3, [pc, #188]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d1f0      	bne.n	8001900 <HAL_RCC_OscConfig+0x1d4>
 800191e:	e000      	b.n	8001922 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8001920:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001922:	687b      	ldr	r3, [r7, #4]
 8001924:	681b      	ldr	r3, [r3, #0]
 8001926:	f003 0301 	and.w	r3, r3, #1
 800192a:	2b00      	cmp	r3, #0
 800192c:	d074      	beq.n	8001a18 <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800192e:	69bb      	ldr	r3, [r7, #24]
 8001930:	2b08      	cmp	r3, #8
 8001932:	d005      	beq.n	8001940 <HAL_RCC_OscConfig+0x214>
 8001934:	69bb      	ldr	r3, [r7, #24]
 8001936:	2b0c      	cmp	r3, #12
 8001938:	d10e      	bne.n	8001958 <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800193a:	697b      	ldr	r3, [r7, #20]
 800193c:	2b03      	cmp	r3, #3
 800193e:	d10b      	bne.n	8001958 <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001940:	4b23      	ldr	r3, [pc, #140]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001948:	2b00      	cmp	r3, #0
 800194a:	d064      	beq.n	8001a16 <HAL_RCC_OscConfig+0x2ea>
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	685b      	ldr	r3, [r3, #4]
 8001950:	2b00      	cmp	r3, #0
 8001952:	d160      	bne.n	8001a16 <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e290      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	685b      	ldr	r3, [r3, #4]
 800195c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001960:	d106      	bne.n	8001970 <HAL_RCC_OscConfig+0x244>
 8001962:	4b1b      	ldr	r3, [pc, #108]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4a1a      	ldr	r2, [pc, #104]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001968:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800196c:	6013      	str	r3, [r2, #0]
 800196e:	e01d      	b.n	80019ac <HAL_RCC_OscConfig+0x280>
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001978:	d10c      	bne.n	8001994 <HAL_RCC_OscConfig+0x268>
 800197a:	4b15      	ldr	r3, [pc, #84]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	4a14      	ldr	r2, [pc, #80]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001980:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001984:	6013      	str	r3, [r2, #0]
 8001986:	4b12      	ldr	r3, [pc, #72]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a11      	ldr	r2, [pc, #68]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800198c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001990:	6013      	str	r3, [r2, #0]
 8001992:	e00b      	b.n	80019ac <HAL_RCC_OscConfig+0x280>
 8001994:	4b0e      	ldr	r3, [pc, #56]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	4a0d      	ldr	r2, [pc, #52]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 800199a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800199e:	6013      	str	r3, [r2, #0]
 80019a0:	4b0b      	ldr	r3, [pc, #44]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	4a0a      	ldr	r2, [pc, #40]	; (80019d0 <HAL_RCC_OscConfig+0x2a4>)
 80019a6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80019aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	685b      	ldr	r3, [r3, #4]
 80019b0:	2b00      	cmp	r3, #0
 80019b2:	d01c      	beq.n	80019ee <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019b4:	f7fe fea4 	bl	8000700 <HAL_GetTick>
 80019b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019ba:	e011      	b.n	80019e0 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019bc:	f7fe fea0 	bl	8000700 <HAL_GetTick>
 80019c0:	4602      	mov	r2, r0
 80019c2:	693b      	ldr	r3, [r7, #16]
 80019c4:	1ad3      	subs	r3, r2, r3
 80019c6:	2b64      	cmp	r3, #100	; 0x64
 80019c8:	d90a      	bls.n	80019e0 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 80019ca:	2303      	movs	r3, #3
 80019cc:	e255      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
 80019ce:	bf00      	nop
 80019d0:	40021000 	.word	0x40021000
 80019d4:	080046f8 	.word	0x080046f8
 80019d8:	2000000c 	.word	0x2000000c
 80019dc:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80019e0:	4bae      	ldr	r3, [pc, #696]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d0e7      	beq.n	80019bc <HAL_RCC_OscConfig+0x290>
 80019ec:	e014      	b.n	8001a18 <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80019ee:	f7fe fe87 	bl	8000700 <HAL_GetTick>
 80019f2:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80019f4:	e008      	b.n	8001a08 <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80019f6:	f7fe fe83 	bl	8000700 <HAL_GetTick>
 80019fa:	4602      	mov	r2, r0
 80019fc:	693b      	ldr	r3, [r7, #16]
 80019fe:	1ad3      	subs	r3, r2, r3
 8001a00:	2b64      	cmp	r3, #100	; 0x64
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e238      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001a08:	4ba4      	ldr	r3, [pc, #656]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d1f0      	bne.n	80019f6 <HAL_RCC_OscConfig+0x2ca>
 8001a14:	e000      	b.n	8001a18 <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001a16:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681b      	ldr	r3, [r3, #0]
 8001a1c:	f003 0302 	and.w	r3, r3, #2
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d060      	beq.n	8001ae6 <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	2b04      	cmp	r3, #4
 8001a28:	d005      	beq.n	8001a36 <HAL_RCC_OscConfig+0x30a>
 8001a2a:	69bb      	ldr	r3, [r7, #24]
 8001a2c:	2b0c      	cmp	r3, #12
 8001a2e:	d119      	bne.n	8001a64 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	2b02      	cmp	r3, #2
 8001a34:	d116      	bne.n	8001a64 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a36:	4b99      	ldr	r3, [pc, #612]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d005      	beq.n	8001a4e <HAL_RCC_OscConfig+0x322>
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	68db      	ldr	r3, [r3, #12]
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d101      	bne.n	8001a4e <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	e215      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a4e:	4b93      	ldr	r3, [pc, #588]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001a50:	685b      	ldr	r3, [r3, #4]
 8001a52:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	691b      	ldr	r3, [r3, #16]
 8001a5a:	061b      	lsls	r3, r3, #24
 8001a5c:	498f      	ldr	r1, [pc, #572]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001a5e:	4313      	orrs	r3, r2
 8001a60:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001a62:	e040      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	68db      	ldr	r3, [r3, #12]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d023      	beq.n	8001ab4 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001a6c:	4b8b      	ldr	r3, [pc, #556]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001a6e:	681b      	ldr	r3, [r3, #0]
 8001a70:	4a8a      	ldr	r2, [pc, #552]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001a72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001a76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a78:	f7fe fe42 	bl	8000700 <HAL_GetTick>
 8001a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a7e:	e008      	b.n	8001a92 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001a80:	f7fe fe3e 	bl	8000700 <HAL_GetTick>
 8001a84:	4602      	mov	r2, r0
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1ad3      	subs	r3, r2, r3
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d901      	bls.n	8001a92 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001a8e:	2303      	movs	r3, #3
 8001a90:	e1f3      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001a92:	4b82      	ldr	r3, [pc, #520]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001a9a:	2b00      	cmp	r3, #0
 8001a9c:	d0f0      	beq.n	8001a80 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001a9e:	4b7f      	ldr	r3, [pc, #508]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001aa0:	685b      	ldr	r3, [r3, #4]
 8001aa2:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	691b      	ldr	r3, [r3, #16]
 8001aaa:	061b      	lsls	r3, r3, #24
 8001aac:	497b      	ldr	r1, [pc, #492]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001aae:	4313      	orrs	r3, r2
 8001ab0:	604b      	str	r3, [r1, #4]
 8001ab2:	e018      	b.n	8001ae6 <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ab4:	4b79      	ldr	r3, [pc, #484]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	4a78      	ldr	r2, [pc, #480]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001abe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ac0:	f7fe fe1e 	bl	8000700 <HAL_GetTick>
 8001ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ac6:	e008      	b.n	8001ada <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ac8:	f7fe fe1a 	bl	8000700 <HAL_GetTick>
 8001acc:	4602      	mov	r2, r0
 8001ace:	693b      	ldr	r3, [r7, #16]
 8001ad0:	1ad3      	subs	r3, r2, r3
 8001ad2:	2b02      	cmp	r3, #2
 8001ad4:	d901      	bls.n	8001ada <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 8001ad6:	2303      	movs	r3, #3
 8001ad8:	e1cf      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001ada:	4b70      	ldr	r3, [pc, #448]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ae2:	2b00      	cmp	r3, #0
 8001ae4:	d1f0      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f003 0308 	and.w	r3, r3, #8
 8001aee:	2b00      	cmp	r3, #0
 8001af0:	d03c      	beq.n	8001b6c <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	695b      	ldr	r3, [r3, #20]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01c      	beq.n	8001b34 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001afa:	4b68      	ldr	r3, [pc, #416]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001afc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b00:	4a66      	ldr	r2, [pc, #408]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b02:	f043 0301 	orr.w	r3, r3, #1
 8001b06:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b0a:	f7fe fdf9 	bl	8000700 <HAL_GetTick>
 8001b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b10:	e008      	b.n	8001b24 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b12:	f7fe fdf5 	bl	8000700 <HAL_GetTick>
 8001b16:	4602      	mov	r2, r0
 8001b18:	693b      	ldr	r3, [r7, #16]
 8001b1a:	1ad3      	subs	r3, r2, r3
 8001b1c:	2b02      	cmp	r3, #2
 8001b1e:	d901      	bls.n	8001b24 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 8001b20:	2303      	movs	r3, #3
 8001b22:	e1aa      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001b24:	4b5d      	ldr	r3, [pc, #372]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b26:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b2a:	f003 0302 	and.w	r3, r3, #2
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d0ef      	beq.n	8001b12 <HAL_RCC_OscConfig+0x3e6>
 8001b32:	e01b      	b.n	8001b6c <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001b34:	4b59      	ldr	r3, [pc, #356]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b36:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b3a:	4a58      	ldr	r2, [pc, #352]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b3c:	f023 0301 	bic.w	r3, r3, #1
 8001b40:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b44:	f7fe fddc 	bl	8000700 <HAL_GetTick>
 8001b48:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b4a:	e008      	b.n	8001b5e <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001b4c:	f7fe fdd8 	bl	8000700 <HAL_GetTick>
 8001b50:	4602      	mov	r2, r0
 8001b52:	693b      	ldr	r3, [r7, #16]
 8001b54:	1ad3      	subs	r3, r2, r3
 8001b56:	2b02      	cmp	r3, #2
 8001b58:	d901      	bls.n	8001b5e <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 8001b5a:	2303      	movs	r3, #3
 8001b5c:	e18d      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001b5e:	4b4f      	ldr	r3, [pc, #316]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b60:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001b64:	f003 0302 	and.w	r3, r3, #2
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d1ef      	bne.n	8001b4c <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f003 0304 	and.w	r3, r3, #4
 8001b74:	2b00      	cmp	r3, #0
 8001b76:	f000 80a5 	beq.w	8001cc4 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001b7a:	2300      	movs	r3, #0
 8001b7c:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001b7e:	4b47      	ldr	r3, [pc, #284]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b82:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d10d      	bne.n	8001ba6 <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001b8a:	4b44      	ldr	r3, [pc, #272]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b8e:	4a43      	ldr	r2, [pc, #268]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001b94:	6593      	str	r3, [r2, #88]	; 0x58
 8001b96:	4b41      	ldr	r3, [pc, #260]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001b98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001b9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001b9e:	60bb      	str	r3, [r7, #8]
 8001ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001ba6:	4b3e      	ldr	r3, [pc, #248]	; (8001ca0 <HAL_RCC_OscConfig+0x574>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d118      	bne.n	8001be4 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001bb2:	4b3b      	ldr	r3, [pc, #236]	; (8001ca0 <HAL_RCC_OscConfig+0x574>)
 8001bb4:	681b      	ldr	r3, [r3, #0]
 8001bb6:	4a3a      	ldr	r2, [pc, #232]	; (8001ca0 <HAL_RCC_OscConfig+0x574>)
 8001bb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001bbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001bbe:	f7fe fd9f 	bl	8000700 <HAL_GetTick>
 8001bc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bc4:	e008      	b.n	8001bd8 <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001bc6:	f7fe fd9b 	bl	8000700 <HAL_GetTick>
 8001bca:	4602      	mov	r2, r0
 8001bcc:	693b      	ldr	r3, [r7, #16]
 8001bce:	1ad3      	subs	r3, r2, r3
 8001bd0:	2b02      	cmp	r3, #2
 8001bd2:	d901      	bls.n	8001bd8 <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 8001bd4:	2303      	movs	r3, #3
 8001bd6:	e150      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001bd8:	4b31      	ldr	r3, [pc, #196]	; (8001ca0 <HAL_RCC_OscConfig+0x574>)
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d0f0      	beq.n	8001bc6 <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	689b      	ldr	r3, [r3, #8]
 8001be8:	2b01      	cmp	r3, #1
 8001bea:	d108      	bne.n	8001bfe <HAL_RCC_OscConfig+0x4d2>
 8001bec:	4b2b      	ldr	r3, [pc, #172]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001bee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001bf2:	4a2a      	ldr	r2, [pc, #168]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001bf4:	f043 0301 	orr.w	r3, r3, #1
 8001bf8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001bfc:	e024      	b.n	8001c48 <HAL_RCC_OscConfig+0x51c>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	689b      	ldr	r3, [r3, #8]
 8001c02:	2b05      	cmp	r3, #5
 8001c04:	d110      	bne.n	8001c28 <HAL_RCC_OscConfig+0x4fc>
 8001c06:	4b25      	ldr	r3, [pc, #148]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c08:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c0c:	4a23      	ldr	r2, [pc, #140]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c0e:	f043 0304 	orr.w	r3, r3, #4
 8001c12:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c16:	4b21      	ldr	r3, [pc, #132]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c1c:	4a1f      	ldr	r2, [pc, #124]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c1e:	f043 0301 	orr.w	r3, r3, #1
 8001c22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c26:	e00f      	b.n	8001c48 <HAL_RCC_OscConfig+0x51c>
 8001c28:	4b1c      	ldr	r3, [pc, #112]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c2a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c2e:	4a1b      	ldr	r2, [pc, #108]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c30:	f023 0301 	bic.w	r3, r3, #1
 8001c34:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8001c38:	4b18      	ldr	r3, [pc, #96]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c3e:	4a17      	ldr	r2, [pc, #92]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c40:	f023 0304 	bic.w	r3, r3, #4
 8001c44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001c48:	687b      	ldr	r3, [r7, #4]
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d016      	beq.n	8001c7e <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c50:	f7fe fd56 	bl	8000700 <HAL_GetTick>
 8001c54:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c56:	e00a      	b.n	8001c6e <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c58:	f7fe fd52 	bl	8000700 <HAL_GetTick>
 8001c5c:	4602      	mov	r2, r0
 8001c5e:	693b      	ldr	r3, [r7, #16]
 8001c60:	1ad3      	subs	r3, r2, r3
 8001c62:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d901      	bls.n	8001c6e <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 8001c6a:	2303      	movs	r3, #3
 8001c6c:	e105      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001c6e:	4b0b      	ldr	r3, [pc, #44]	; (8001c9c <HAL_RCC_OscConfig+0x570>)
 8001c70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001c74:	f003 0302 	and.w	r3, r3, #2
 8001c78:	2b00      	cmp	r3, #0
 8001c7a:	d0ed      	beq.n	8001c58 <HAL_RCC_OscConfig+0x52c>
 8001c7c:	e019      	b.n	8001cb2 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c7e:	f7fe fd3f 	bl	8000700 <HAL_GetTick>
 8001c82:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001c84:	e00e      	b.n	8001ca4 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c86:	f7fe fd3b 	bl	8000700 <HAL_GetTick>
 8001c8a:	4602      	mov	r2, r0
 8001c8c:	693b      	ldr	r3, [r7, #16]
 8001c8e:	1ad3      	subs	r3, r2, r3
 8001c90:	f241 3288 	movw	r2, #5000	; 0x1388
 8001c94:	4293      	cmp	r3, r2
 8001c96:	d905      	bls.n	8001ca4 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 8001c98:	2303      	movs	r3, #3
 8001c9a:	e0ee      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001ca4:	4b77      	ldr	r3, [pc, #476]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001ca6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001caa:	f003 0302 	and.w	r3, r3, #2
 8001cae:	2b00      	cmp	r3, #0
 8001cb0:	d1e9      	bne.n	8001c86 <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001cb2:	7ffb      	ldrb	r3, [r7, #31]
 8001cb4:	2b01      	cmp	r3, #1
 8001cb6:	d105      	bne.n	8001cc4 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001cb8:	4b72      	ldr	r3, [pc, #456]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001cba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cbc:	4a71      	ldr	r2, [pc, #452]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001cbe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001cc2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f000 80d5 	beq.w	8001e78 <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	2b0c      	cmp	r3, #12
 8001cd2:	f000 808e 	beq.w	8001df2 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8001cd6:	687b      	ldr	r3, [r7, #4]
 8001cd8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cda:	2b02      	cmp	r3, #2
 8001cdc:	d15b      	bne.n	8001d96 <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001cde:	4b69      	ldr	r3, [pc, #420]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	4a68      	ldr	r2, [pc, #416]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001ce4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001ce8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001cea:	f7fe fd09 	bl	8000700 <HAL_GetTick>
 8001cee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001cf0:	e008      	b.n	8001d04 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001cf2:	f7fe fd05 	bl	8000700 <HAL_GetTick>
 8001cf6:	4602      	mov	r2, r0
 8001cf8:	693b      	ldr	r3, [r7, #16]
 8001cfa:	1ad3      	subs	r3, r2, r3
 8001cfc:	2b02      	cmp	r3, #2
 8001cfe:	d901      	bls.n	8001d04 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 8001d00:	2303      	movs	r3, #3
 8001d02:	e0ba      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001d04:	4b5f      	ldr	r3, [pc, #380]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d1f0      	bne.n	8001cf2 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001d10:	4b5c      	ldr	r3, [pc, #368]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d12:	68da      	ldr	r2, [r3, #12]
 8001d14:	4b5c      	ldr	r3, [pc, #368]	; (8001e88 <HAL_RCC_OscConfig+0x75c>)
 8001d16:	4013      	ands	r3, r2
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8001d1c:	687a      	ldr	r2, [r7, #4]
 8001d1e:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8001d20:	3a01      	subs	r2, #1
 8001d22:	0112      	lsls	r2, r2, #4
 8001d24:	4311      	orrs	r1, r2
 8001d26:	687a      	ldr	r2, [r7, #4]
 8001d28:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8001d2a:	0212      	lsls	r2, r2, #8
 8001d2c:	4311      	orrs	r1, r2
 8001d2e:	687a      	ldr	r2, [r7, #4]
 8001d30:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001d32:	0852      	lsrs	r2, r2, #1
 8001d34:	3a01      	subs	r2, #1
 8001d36:	0552      	lsls	r2, r2, #21
 8001d38:	4311      	orrs	r1, r2
 8001d3a:	687a      	ldr	r2, [r7, #4]
 8001d3c:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001d3e:	0852      	lsrs	r2, r2, #1
 8001d40:	3a01      	subs	r2, #1
 8001d42:	0652      	lsls	r2, r2, #25
 8001d44:	4311      	orrs	r1, r2
 8001d46:	687a      	ldr	r2, [r7, #4]
 8001d48:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001d4a:	0912      	lsrs	r2, r2, #4
 8001d4c:	0452      	lsls	r2, r2, #17
 8001d4e:	430a      	orrs	r2, r1
 8001d50:	494c      	ldr	r1, [pc, #304]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d52:	4313      	orrs	r3, r2
 8001d54:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d56:	4b4b      	ldr	r3, [pc, #300]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4a4a      	ldr	r2, [pc, #296]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d5c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d60:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001d62:	4b48      	ldr	r3, [pc, #288]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	4a47      	ldr	r2, [pc, #284]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d68:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001d6c:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7fe fcc7 	bl	8000700 <HAL_GetTick>
 8001d72:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d74:	e008      	b.n	8001d88 <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d76:	f7fe fcc3 	bl	8000700 <HAL_GetTick>
 8001d7a:	4602      	mov	r2, r0
 8001d7c:	693b      	ldr	r3, [r7, #16]
 8001d7e:	1ad3      	subs	r3, r2, r3
 8001d80:	2b02      	cmp	r3, #2
 8001d82:	d901      	bls.n	8001d88 <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001d84:	2303      	movs	r3, #3
 8001d86:	e078      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001d88:	4b3e      	ldr	r3, [pc, #248]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d8a:	681b      	ldr	r3, [r3, #0]
 8001d8c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d0f0      	beq.n	8001d76 <HAL_RCC_OscConfig+0x64a>
 8001d94:	e070      	b.n	8001e78 <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001d96:	4b3b      	ldr	r3, [pc, #236]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	4a3a      	ldr	r2, [pc, #232]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001d9c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001da0:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001da2:	4b38      	ldr	r3, [pc, #224]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d105      	bne.n	8001dba <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001dae:	4b35      	ldr	r3, [pc, #212]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001db0:	68db      	ldr	r3, [r3, #12]
 8001db2:	4a34      	ldr	r2, [pc, #208]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001db4:	f023 0303 	bic.w	r3, r3, #3
 8001db8:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001dbc:	68db      	ldr	r3, [r3, #12]
 8001dbe:	4a31      	ldr	r2, [pc, #196]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001dc0:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001dc4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001dc8:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dca:	f7fe fc99 	bl	8000700 <HAL_GetTick>
 8001dce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001dd0:	e008      	b.n	8001de4 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dd2:	f7fe fc95 	bl	8000700 <HAL_GetTick>
 8001dd6:	4602      	mov	r2, r0
 8001dd8:	693b      	ldr	r3, [r7, #16]
 8001dda:	1ad3      	subs	r3, r2, r3
 8001ddc:	2b02      	cmp	r3, #2
 8001dde:	d901      	bls.n	8001de4 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 8001de0:	2303      	movs	r3, #3
 8001de2:	e04a      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8001de4:	4b27      	ldr	r3, [pc, #156]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d1f0      	bne.n	8001dd2 <HAL_RCC_OscConfig+0x6a6>
 8001df0:	e042      	b.n	8001e78 <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d101      	bne.n	8001dfe <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e03d      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 8001dfe:	4b21      	ldr	r3, [pc, #132]	; (8001e84 <HAL_RCC_OscConfig+0x758>)
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e04:	697b      	ldr	r3, [r7, #20]
 8001e06:	f003 0203 	and.w	r2, r3, #3
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d130      	bne.n	8001e74 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e12:	697b      	ldr	r3, [r7, #20]
 8001e14:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d127      	bne.n	8001e74 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001e2e:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d11f      	bne.n	8001e74 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e34:	697b      	ldr	r3, [r7, #20]
 8001e36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e3a:	687a      	ldr	r2, [r7, #4]
 8001e3c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001e3e:	2a07      	cmp	r2, #7
 8001e40:	bf14      	ite	ne
 8001e42:	2201      	movne	r2, #1
 8001e44:	2200      	moveq	r2, #0
 8001e46:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001e48:	4293      	cmp	r3, r2
 8001e4a:	d113      	bne.n	8001e74 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e4c:	697b      	ldr	r3, [r7, #20]
 8001e4e:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001e56:	085b      	lsrs	r3, r3, #1
 8001e58:	3b01      	subs	r3, #1
 8001e5a:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001e5c:	429a      	cmp	r2, r3
 8001e5e:	d109      	bne.n	8001e74 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6a:	085b      	lsrs	r3, r3, #1
 8001e6c:	3b01      	subs	r3, #1
 8001e6e:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001e70:	429a      	cmp	r2, r3
 8001e72:	d001      	beq.n	8001e78 <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	3720      	adds	r7, #32
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}
 8001e82:	bf00      	nop
 8001e84:	40021000 	.word	0x40021000
 8001e88:	f99d808c 	.word	0xf99d808c

08001e8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b084      	sub	sp, #16
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
 8001e94:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d101      	bne.n	8001ea0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e0c8      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001ea0:	4b66      	ldr	r3, [pc, #408]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0307 	and.w	r3, r3, #7
 8001ea8:	683a      	ldr	r2, [r7, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d910      	bls.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001eae:	4b63      	ldr	r3, [pc, #396]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f023 0207 	bic.w	r2, r3, #7
 8001eb6:	4961      	ldr	r1, [pc, #388]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001eb8:	683b      	ldr	r3, [r7, #0]
 8001eba:	4313      	orrs	r3, r2
 8001ebc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ebe:	4b5f      	ldr	r3, [pc, #380]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	683a      	ldr	r2, [r7, #0]
 8001ec8:	429a      	cmp	r2, r3
 8001eca:	d001      	beq.n	8001ed0 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001ecc:	2301      	movs	r3, #1
 8001ece:	e0b0      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	f003 0301 	and.w	r3, r3, #1
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d04c      	beq.n	8001f76 <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	2b03      	cmp	r3, #3
 8001ee2:	d107      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001ee4:	4b56      	ldr	r3, [pc, #344]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d121      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	e09e      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	685b      	ldr	r3, [r3, #4]
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d107      	bne.n	8001f0c <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001efc:	4b50      	ldr	r3, [pc, #320]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f04:	2b00      	cmp	r3, #0
 8001f06:	d115      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f08:	2301      	movs	r3, #1
 8001f0a:	e092      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	685b      	ldr	r3, [r3, #4]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d107      	bne.n	8001f24 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8001f14:	4b4a      	ldr	r3, [pc, #296]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	f003 0302 	and.w	r3, r3, #2
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d109      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f20:	2301      	movs	r3, #1
 8001f22:	e086      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001f24:	4b46      	ldr	r3, [pc, #280]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d101      	bne.n	8001f34 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001f30:	2301      	movs	r3, #1
 8001f32:	e07e      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001f34:	4b42      	ldr	r3, [pc, #264]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001f36:	689b      	ldr	r3, [r3, #8]
 8001f38:	f023 0203 	bic.w	r2, r3, #3
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	493f      	ldr	r1, [pc, #252]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001f46:	f7fe fbdb 	bl	8000700 <HAL_GetTick>
 8001f4a:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f4c:	e00a      	b.n	8001f64 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f4e:	f7fe fbd7 	bl	8000700 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	f241 3288 	movw	r2, #5000	; 0x1388
 8001f5c:	4293      	cmp	r3, r2
 8001f5e:	d901      	bls.n	8001f64 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001f60:	2303      	movs	r3, #3
 8001f62:	e066      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f64:	4b36      	ldr	r3, [pc, #216]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f003 020c 	and.w	r2, r3, #12
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	685b      	ldr	r3, [r3, #4]
 8001f70:	009b      	lsls	r3, r3, #2
 8001f72:	429a      	cmp	r2, r3
 8001f74:	d1eb      	bne.n	8001f4e <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0302 	and.w	r3, r3, #2
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d008      	beq.n	8001f94 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001f82:	4b2f      	ldr	r3, [pc, #188]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	689b      	ldr	r3, [r3, #8]
 8001f8e:	492c      	ldr	r1, [pc, #176]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001f90:	4313      	orrs	r3, r2
 8001f92:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001f94:	4b29      	ldr	r3, [pc, #164]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 0307 	and.w	r3, r3, #7
 8001f9c:	683a      	ldr	r2, [r7, #0]
 8001f9e:	429a      	cmp	r2, r3
 8001fa0:	d210      	bcs.n	8001fc4 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001fa2:	4b26      	ldr	r3, [pc, #152]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f023 0207 	bic.w	r2, r3, #7
 8001faa:	4924      	ldr	r1, [pc, #144]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	4313      	orrs	r3, r2
 8001fb0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001fb2:	4b22      	ldr	r3, [pc, #136]	; (800203c <HAL_RCC_ClockConfig+0x1b0>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0307 	and.w	r3, r3, #7
 8001fba:	683a      	ldr	r2, [r7, #0]
 8001fbc:	429a      	cmp	r2, r3
 8001fbe:	d001      	beq.n	8001fc4 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	e036      	b.n	8002032 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	f003 0304 	and.w	r3, r3, #4
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d008      	beq.n	8001fe2 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001fd0:	4b1b      	ldr	r3, [pc, #108]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	68db      	ldr	r3, [r3, #12]
 8001fdc:	4918      	ldr	r1, [pc, #96]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0308 	and.w	r3, r3, #8
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d009      	beq.n	8002002 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001fee:	4b14      	ldr	r3, [pc, #80]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001ff0:	689b      	ldr	r3, [r3, #8]
 8001ff2:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	691b      	ldr	r3, [r3, #16]
 8001ffa:	00db      	lsls	r3, r3, #3
 8001ffc:	4910      	ldr	r1, [pc, #64]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 8001ffe:	4313      	orrs	r3, r2
 8002000:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002002:	f000 f825 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002006:	4601      	mov	r1, r0
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <HAL_RCC_ClockConfig+0x1b4>)
 800200a:	689b      	ldr	r3, [r3, #8]
 800200c:	091b      	lsrs	r3, r3, #4
 800200e:	f003 030f 	and.w	r3, r3, #15
 8002012:	4a0c      	ldr	r2, [pc, #48]	; (8002044 <HAL_RCC_ClockConfig+0x1b8>)
 8002014:	5cd3      	ldrb	r3, [r2, r3]
 8002016:	f003 031f 	and.w	r3, r3, #31
 800201a:	fa21 f303 	lsr.w	r3, r1, r3
 800201e:	4a0a      	ldr	r2, [pc, #40]	; (8002048 <HAL_RCC_ClockConfig+0x1bc>)
 8002020:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002022:	4b0a      	ldr	r3, [pc, #40]	; (800204c <HAL_RCC_ClockConfig+0x1c0>)
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	4618      	mov	r0, r3
 8002028:	f7fe fb1e 	bl	8000668 <HAL_InitTick>
 800202c:	4603      	mov	r3, r0
 800202e:	72fb      	strb	r3, [r7, #11]

  return status;
 8002030:	7afb      	ldrb	r3, [r7, #11]
}
 8002032:	4618      	mov	r0, r3
 8002034:	3710      	adds	r7, #16
 8002036:	46bd      	mov	sp, r7
 8002038:	bd80      	pop	{r7, pc}
 800203a:	bf00      	nop
 800203c:	40022000 	.word	0x40022000
 8002040:	40021000 	.word	0x40021000
 8002044:	080046f8 	.word	0x080046f8
 8002048:	2000000c 	.word	0x2000000c
 800204c:	20000000 	.word	0x20000000

08002050 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002050:	b480      	push	{r7}
 8002052:	b089      	sub	sp, #36	; 0x24
 8002054:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002056:	2300      	movs	r3, #0
 8002058:	61fb      	str	r3, [r7, #28]
 800205a:	2300      	movs	r3, #0
 800205c:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800205e:	4b3d      	ldr	r3, [pc, #244]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002068:	4b3a      	ldr	r3, [pc, #232]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 800206a:	68db      	ldr	r3, [r3, #12]
 800206c:	f003 0303 	and.w	r3, r3, #3
 8002070:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002072:	693b      	ldr	r3, [r7, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d005      	beq.n	8002084 <HAL_RCC_GetSysClockFreq+0x34>
 8002078:	693b      	ldr	r3, [r7, #16]
 800207a:	2b0c      	cmp	r3, #12
 800207c:	d121      	bne.n	80020c2 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 800207e:	68fb      	ldr	r3, [r7, #12]
 8002080:	2b01      	cmp	r3, #1
 8002082:	d11e      	bne.n	80020c2 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8002084:	4b33      	ldr	r3, [pc, #204]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f003 0308 	and.w	r3, r3, #8
 800208c:	2b00      	cmp	r3, #0
 800208e:	d107      	bne.n	80020a0 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8002090:	4b30      	ldr	r3, [pc, #192]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 8002092:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002096:	0a1b      	lsrs	r3, r3, #8
 8002098:	f003 030f 	and.w	r3, r3, #15
 800209c:	61fb      	str	r3, [r7, #28]
 800209e:	e005      	b.n	80020ac <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80020a0:	4b2c      	ldr	r3, [pc, #176]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	091b      	lsrs	r3, r3, #4
 80020a6:	f003 030f 	and.w	r3, r3, #15
 80020aa:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80020ac:	4a2a      	ldr	r2, [pc, #168]	; (8002158 <HAL_RCC_GetSysClockFreq+0x108>)
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020b4:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d10d      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80020c0:	e00a      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80020c2:	693b      	ldr	r3, [r7, #16]
 80020c4:	2b04      	cmp	r3, #4
 80020c6:	d102      	bne.n	80020ce <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80020c8:	4b24      	ldr	r3, [pc, #144]	; (800215c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	e004      	b.n	80020d8 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80020ce:	693b      	ldr	r3, [r7, #16]
 80020d0:	2b08      	cmp	r3, #8
 80020d2:	d101      	bne.n	80020d8 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80020d4:	4b22      	ldr	r3, [pc, #136]	; (8002160 <HAL_RCC_GetSysClockFreq+0x110>)
 80020d6:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80020d8:	693b      	ldr	r3, [r7, #16]
 80020da:	2b0c      	cmp	r3, #12
 80020dc:	d133      	bne.n	8002146 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80020de:	4b1d      	ldr	r3, [pc, #116]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 80020e0:	68db      	ldr	r3, [r3, #12]
 80020e2:	f003 0303 	and.w	r3, r3, #3
 80020e6:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80020e8:	68bb      	ldr	r3, [r7, #8]
 80020ea:	2b02      	cmp	r3, #2
 80020ec:	d002      	beq.n	80020f4 <HAL_RCC_GetSysClockFreq+0xa4>
 80020ee:	2b03      	cmp	r3, #3
 80020f0:	d003      	beq.n	80020fa <HAL_RCC_GetSysClockFreq+0xaa>
 80020f2:	e005      	b.n	8002100 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80020f4:	4b19      	ldr	r3, [pc, #100]	; (800215c <HAL_RCC_GetSysClockFreq+0x10c>)
 80020f6:	617b      	str	r3, [r7, #20]
      break;
 80020f8:	e005      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80020fa:	4b19      	ldr	r3, [pc, #100]	; (8002160 <HAL_RCC_GetSysClockFreq+0x110>)
 80020fc:	617b      	str	r3, [r7, #20]
      break;
 80020fe:	e002      	b.n	8002106 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	617b      	str	r3, [r7, #20]
      break;
 8002104:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002106:	4b13      	ldr	r3, [pc, #76]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 8002108:	68db      	ldr	r3, [r3, #12]
 800210a:	091b      	lsrs	r3, r3, #4
 800210c:	f003 0307 	and.w	r3, r3, #7
 8002110:	3301      	adds	r3, #1
 8002112:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8002114:	4b0f      	ldr	r3, [pc, #60]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 8002116:	68db      	ldr	r3, [r3, #12]
 8002118:	0a1b      	lsrs	r3, r3, #8
 800211a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800211e:	697a      	ldr	r2, [r7, #20]
 8002120:	fb02 f203 	mul.w	r2, r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	fbb2 f3f3 	udiv	r3, r2, r3
 800212a:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800212c:	4b09      	ldr	r3, [pc, #36]	; (8002154 <HAL_RCC_GetSysClockFreq+0x104>)
 800212e:	68db      	ldr	r3, [r3, #12]
 8002130:	0e5b      	lsrs	r3, r3, #25
 8002132:	f003 0303 	and.w	r3, r3, #3
 8002136:	3301      	adds	r3, #1
 8002138:	005b      	lsls	r3, r3, #1
 800213a:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 800213c:	697a      	ldr	r2, [r7, #20]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	fbb2 f3f3 	udiv	r3, r2, r3
 8002144:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8002146:	69bb      	ldr	r3, [r7, #24]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3724      	adds	r7, #36	; 0x24
 800214c:	46bd      	mov	sp, r7
 800214e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002152:	4770      	bx	lr
 8002154:	40021000 	.word	0x40021000
 8002158:	08004710 	.word	0x08004710
 800215c:	00f42400 	.word	0x00f42400
 8002160:	007a1200 	.word	0x007a1200

08002164 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002168:	4b03      	ldr	r3, [pc, #12]	; (8002178 <HAL_RCC_GetHCLKFreq+0x14>)
 800216a:	681b      	ldr	r3, [r3, #0]
}
 800216c:	4618      	mov	r0, r3
 800216e:	46bd      	mov	sp, r7
 8002170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002174:	4770      	bx	lr
 8002176:	bf00      	nop
 8002178:	2000000c 	.word	0x2000000c

0800217c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8002180:	f7ff fff0 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 8002184:	4601      	mov	r1, r0
 8002186:	4b06      	ldr	r3, [pc, #24]	; (80021a0 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002188:	689b      	ldr	r3, [r3, #8]
 800218a:	0a1b      	lsrs	r3, r3, #8
 800218c:	f003 0307 	and.w	r3, r3, #7
 8002190:	4a04      	ldr	r2, [pc, #16]	; (80021a4 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002192:	5cd3      	ldrb	r3, [r2, r3]
 8002194:	f003 031f 	and.w	r3, r3, #31
 8002198:	fa21 f303 	lsr.w	r3, r1, r3
}
 800219c:	4618      	mov	r0, r3
 800219e:	bd80      	pop	{r7, pc}
 80021a0:	40021000 	.word	0x40021000
 80021a4:	08004708 	.word	0x08004708

080021a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80021a8:	b580      	push	{r7, lr}
 80021aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80021ac:	f7ff ffda 	bl	8002164 <HAL_RCC_GetHCLKFreq>
 80021b0:	4601      	mov	r1, r0
 80021b2:	4b06      	ldr	r3, [pc, #24]	; (80021cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80021b4:	689b      	ldr	r3, [r3, #8]
 80021b6:	0adb      	lsrs	r3, r3, #11
 80021b8:	f003 0307 	and.w	r3, r3, #7
 80021bc:	4a04      	ldr	r2, [pc, #16]	; (80021d0 <HAL_RCC_GetPCLK2Freq+0x28>)
 80021be:	5cd3      	ldrb	r3, [r2, r3]
 80021c0:	f003 031f 	and.w	r3, r3, #31
 80021c4:	fa21 f303 	lsr.w	r3, r1, r3
}
 80021c8:	4618      	mov	r0, r3
 80021ca:	bd80      	pop	{r7, pc}
 80021cc:	40021000 	.word	0x40021000
 80021d0:	08004708 	.word	0x08004708

080021d4 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b086      	sub	sp, #24
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80021dc:	2300      	movs	r3, #0
 80021de:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80021e0:	4b2a      	ldr	r3, [pc, #168]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021e4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d003      	beq.n	80021f4 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80021ec:	f7ff fa3a 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 80021f0:	6178      	str	r0, [r7, #20]
 80021f2:	e014      	b.n	800221e <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80021f4:	4b25      	ldr	r3, [pc, #148]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021f8:	4a24      	ldr	r2, [pc, #144]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80021fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021fe:	6593      	str	r3, [r2, #88]	; 0x58
 8002200:	4b22      	ldr	r3, [pc, #136]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002202:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002204:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002208:	60fb      	str	r3, [r7, #12]
 800220a:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 800220c:	f7ff fa2a 	bl	8001664 <HAL_PWREx_GetVoltageRange>
 8002210:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8002212:	4b1e      	ldr	r3, [pc, #120]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002216:	4a1d      	ldr	r2, [pc, #116]	; (800228c <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8002218:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800221c:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002224:	d10b      	bne.n	800223e <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	2b80      	cmp	r3, #128	; 0x80
 800222a:	d919      	bls.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	2ba0      	cmp	r3, #160	; 0xa0
 8002230:	d902      	bls.n	8002238 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002232:	2302      	movs	r3, #2
 8002234:	613b      	str	r3, [r7, #16]
 8002236:	e013      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8002238:	2301      	movs	r3, #1
 800223a:	613b      	str	r3, [r7, #16]
 800223c:	e010      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	2b80      	cmp	r3, #128	; 0x80
 8002242:	d902      	bls.n	800224a <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8002244:	2303      	movs	r3, #3
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	e00a      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2b80      	cmp	r3, #128	; 0x80
 800224e:	d102      	bne.n	8002256 <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8002250:	2302      	movs	r3, #2
 8002252:	613b      	str	r3, [r7, #16]
 8002254:	e004      	b.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	2b70      	cmp	r3, #112	; 0x70
 800225a:	d101      	bne.n	8002260 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800225c:	2301      	movs	r3, #1
 800225e:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8002260:	4b0b      	ldr	r3, [pc, #44]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f023 0207 	bic.w	r2, r3, #7
 8002268:	4909      	ldr	r1, [pc, #36]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	4313      	orrs	r3, r2
 800226e:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8002270:	4b07      	ldr	r3, [pc, #28]	; (8002290 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f003 0307 	and.w	r3, r3, #7
 8002278:	693a      	ldr	r2, [r7, #16]
 800227a:	429a      	cmp	r2, r3
 800227c:	d001      	beq.n	8002282 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 800227e:	2301      	movs	r3, #1
 8002280:	e000      	b.n	8002284 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8002282:	2300      	movs	r3, #0
}
 8002284:	4618      	mov	r0, r3
 8002286:	3718      	adds	r7, #24
 8002288:	46bd      	mov	sp, r7
 800228a:	bd80      	pop	{r7, pc}
 800228c:	40021000 	.word	0x40021000
 8002290:	40022000 	.word	0x40022000

08002294 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	b086      	sub	sp, #24
 8002298:	af00      	add	r7, sp, #0
 800229a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800229c:	2300      	movs	r3, #0
 800229e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80022a0:	2300      	movs	r3, #0
 80022a2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d03f      	beq.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80022b4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022b8:	d01c      	beq.n	80022f4 <HAL_RCCEx_PeriphCLKConfig+0x60>
 80022ba:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80022be:	d802      	bhi.n	80022c6 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d00e      	beq.n	80022e2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 80022c4:	e01f      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x72>
 80022c6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80022ca:	d003      	beq.n	80022d4 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80022cc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80022d0:	d01c      	beq.n	800230c <HAL_RCCEx_PeriphCLKConfig+0x78>
 80022d2:	e018      	b.n	8002306 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80022d4:	4b85      	ldr	r3, [pc, #532]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022d6:	68db      	ldr	r3, [r3, #12]
 80022d8:	4a84      	ldr	r2, [pc, #528]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80022da:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022de:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022e0:	e015      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	3304      	adds	r3, #4
 80022e6:	2100      	movs	r1, #0
 80022e8:	4618      	mov	r0, r3
 80022ea:	f000 fab9 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80022ee:	4603      	mov	r3, r0
 80022f0:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80022f2:	e00c      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	3320      	adds	r3, #32
 80022f8:	2100      	movs	r1, #0
 80022fa:	4618      	mov	r0, r3
 80022fc:	f000 fba0 	bl	8002a40 <RCCEx_PLLSAI2_Config>
 8002300:	4603      	mov	r3, r0
 8002302:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8002304:	e003      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002306:	2301      	movs	r3, #1
 8002308:	74fb      	strb	r3, [r7, #19]
      break;
 800230a:	e000      	b.n	800230e <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 800230c:	bf00      	nop
    }

    if(ret == HAL_OK)
 800230e:	7cfb      	ldrb	r3, [r7, #19]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d10b      	bne.n	800232c <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002314:	4b75      	ldr	r3, [pc, #468]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002316:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800231a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002322:	4972      	ldr	r1, [pc, #456]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002324:	4313      	orrs	r3, r2
 8002326:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800232a:	e001      	b.n	8002330 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800232c:	7cfb      	ldrb	r3, [r7, #19]
 800232e:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d03f      	beq.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002340:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002344:	d01c      	beq.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8002346:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800234a:	d802      	bhi.n	8002352 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 800234c:	2b00      	cmp	r3, #0
 800234e:	d00e      	beq.n	800236e <HAL_RCCEx_PeriphCLKConfig+0xda>
 8002350:	e01f      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8002352:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002356:	d003      	beq.n	8002360 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8002358:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800235c:	d01c      	beq.n	8002398 <HAL_RCCEx_PeriphCLKConfig+0x104>
 800235e:	e018      	b.n	8002392 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8002360:	4b62      	ldr	r3, [pc, #392]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002362:	68db      	ldr	r3, [r3, #12]
 8002364:	4a61      	ldr	r2, [pc, #388]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002366:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800236a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800236c:	e015      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	3304      	adds	r3, #4
 8002372:	2100      	movs	r1, #0
 8002374:	4618      	mov	r0, r3
 8002376:	f000 fa73 	bl	8002860 <RCCEx_PLLSAI1_Config>
 800237a:	4603      	mov	r3, r0
 800237c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800237e:	e00c      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	3320      	adds	r3, #32
 8002384:	2100      	movs	r1, #0
 8002386:	4618      	mov	r0, r3
 8002388:	f000 fb5a 	bl	8002a40 <RCCEx_PLLSAI2_Config>
 800238c:	4603      	mov	r3, r0
 800238e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8002390:	e003      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8002392:	2301      	movs	r3, #1
 8002394:	74fb      	strb	r3, [r7, #19]
      break;
 8002396:	e000      	b.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8002398:	bf00      	nop
    }

    if(ret == HAL_OK)
 800239a:	7cfb      	ldrb	r3, [r7, #19]
 800239c:	2b00      	cmp	r3, #0
 800239e:	d10b      	bne.n	80023b8 <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80023a0:	4b52      	ldr	r3, [pc, #328]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023a6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80023ae:	494f      	ldr	r1, [pc, #316]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023b0:	4313      	orrs	r3, r2
 80023b2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80023b6:	e001      	b.n	80023bc <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80023b8:	7cfb      	ldrb	r3, [r7, #19]
 80023ba:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	f000 80a0 	beq.w	800250a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 80023ca:	2300      	movs	r3, #0
 80023cc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80023ce:	4b47      	ldr	r3, [pc, #284]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d101      	bne.n	80023de <HAL_RCCEx_PeriphCLKConfig+0x14a>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 80023de:	2300      	movs	r3, #0
 80023e0:	2b00      	cmp	r3, #0
 80023e2:	d00d      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80023e4:	4b41      	ldr	r3, [pc, #260]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023e6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023e8:	4a40      	ldr	r2, [pc, #256]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023ea:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80023ee:	6593      	str	r3, [r2, #88]	; 0x58
 80023f0:	4b3e      	ldr	r3, [pc, #248]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80023f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80023f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80023f8:	60bb      	str	r3, [r7, #8]
 80023fa:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80023fc:	2301      	movs	r3, #1
 80023fe:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002400:	4b3b      	ldr	r3, [pc, #236]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	4a3a      	ldr	r2, [pc, #232]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8002406:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800240a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800240c:	f7fe f978 	bl	8000700 <HAL_GetTick>
 8002410:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002412:	e009      	b.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002414:	f7fe f974 	bl	8000700 <HAL_GetTick>
 8002418:	4602      	mov	r2, r0
 800241a:	68fb      	ldr	r3, [r7, #12]
 800241c:	1ad3      	subs	r3, r2, r3
 800241e:	2b02      	cmp	r3, #2
 8002420:	d902      	bls.n	8002428 <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8002422:	2303      	movs	r3, #3
 8002424:	74fb      	strb	r3, [r7, #19]
        break;
 8002426:	e005      	b.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8002428:	4b31      	ldr	r3, [pc, #196]	; (80024f0 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002430:	2b00      	cmp	r3, #0
 8002432:	d0ef      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8002434:	7cfb      	ldrb	r3, [r7, #19]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d15c      	bne.n	80024f4 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800243a:	4b2c      	ldr	r3, [pc, #176]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800243c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002440:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002444:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d01f      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002452:	697a      	ldr	r2, [r7, #20]
 8002454:	429a      	cmp	r2, r3
 8002456:	d019      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002458:	4b24      	ldr	r3, [pc, #144]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800245a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800245e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002462:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002464:	4b21      	ldr	r3, [pc, #132]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002466:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800246a:	4a20      	ldr	r2, [pc, #128]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800246c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002470:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002474:	4b1d      	ldr	r3, [pc, #116]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002476:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800247a:	4a1c      	ldr	r2, [pc, #112]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800247c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002480:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002484:	4a19      	ldr	r2, [pc, #100]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8002486:	697b      	ldr	r3, [r7, #20]
 8002488:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800248c:	697b      	ldr	r3, [r7, #20]
 800248e:	f003 0301 	and.w	r3, r3, #1
 8002492:	2b00      	cmp	r3, #0
 8002494:	d016      	beq.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002496:	f7fe f933 	bl	8000700 <HAL_GetTick>
 800249a:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800249c:	e00b      	b.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800249e:	f7fe f92f 	bl	8000700 <HAL_GetTick>
 80024a2:	4602      	mov	r2, r0
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	1ad3      	subs	r3, r2, r3
 80024a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80024ac:	4293      	cmp	r3, r2
 80024ae:	d902      	bls.n	80024b6 <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	74fb      	strb	r3, [r7, #19]
            break;
 80024b4:	e006      	b.n	80024c4 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80024b6:	4b0d      	ldr	r3, [pc, #52]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024bc:	f003 0302 	and.w	r3, r3, #2
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d0ec      	beq.n	800249e <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 80024c4:	7cfb      	ldrb	r3, [r7, #19]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d10c      	bne.n	80024e4 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80024ca:	4b08      	ldr	r3, [pc, #32]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024cc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80024d0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024da:	4904      	ldr	r1, [pc, #16]	; (80024ec <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80024dc:	4313      	orrs	r3, r2
 80024de:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80024e2:	e009      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80024e4:	7cfb      	ldrb	r3, [r7, #19]
 80024e6:	74bb      	strb	r3, [r7, #18]
 80024e8:	e006      	b.n	80024f8 <HAL_RCCEx_PeriphCLKConfig+0x264>
 80024ea:	bf00      	nop
 80024ec:	40021000 	.word	0x40021000
 80024f0:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80024f4:	7cfb      	ldrb	r3, [r7, #19]
 80024f6:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80024f8:	7c7b      	ldrb	r3, [r7, #17]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d105      	bne.n	800250a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80024fe:	4b9e      	ldr	r3, [pc, #632]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002500:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002502:	4a9d      	ldr	r2, [pc, #628]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002504:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002508:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002516:	4b98      	ldr	r3, [pc, #608]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002518:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800251c:	f023 0203 	bic.w	r2, r3, #3
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002524:	4994      	ldr	r1, [pc, #592]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002526:	4313      	orrs	r3, r2
 8002528:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	f003 0302 	and.w	r3, r3, #2
 8002534:	2b00      	cmp	r3, #0
 8002536:	d00a      	beq.n	800254e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002538:	4b8f      	ldr	r3, [pc, #572]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800253a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800253e:	f023 020c 	bic.w	r2, r3, #12
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	498c      	ldr	r1, [pc, #560]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002548:	4313      	orrs	r3, r2
 800254a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0304 	and.w	r3, r3, #4
 8002556:	2b00      	cmp	r3, #0
 8002558:	d00a      	beq.n	8002570 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800255a:	4b87      	ldr	r3, [pc, #540]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800255c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002560:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002568:	4983      	ldr	r1, [pc, #524]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800256a:	4313      	orrs	r3, r2
 800256c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0308 	and.w	r3, r3, #8
 8002578:	2b00      	cmp	r3, #0
 800257a:	d00a      	beq.n	8002592 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800257c:	4b7e      	ldr	r3, [pc, #504]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800257e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002582:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800258a:	497b      	ldr	r1, [pc, #492]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800258c:	4313      	orrs	r3, r2
 800258e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	f003 0310 	and.w	r3, r3, #16
 800259a:	2b00      	cmp	r3, #0
 800259c:	d00a      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800259e:	4b76      	ldr	r3, [pc, #472]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80025ac:	4972      	ldr	r1, [pc, #456]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f003 0320 	and.w	r3, r3, #32
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d00a      	beq.n	80025d6 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80025c0:	4b6d      	ldr	r3, [pc, #436]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025c6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80025ce:	496a      	ldr	r1, [pc, #424]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025d0:	4313      	orrs	r3, r2
 80025d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d00a      	beq.n	80025f8 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80025e2:	4b65      	ldr	r3, [pc, #404]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025e4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025e8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80025f0:	4961      	ldr	r1, [pc, #388]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80025f2:	4313      	orrs	r3, r2
 80025f4:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002600:	2b00      	cmp	r3, #0
 8002602:	d00a      	beq.n	800261a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8002604:	4b5c      	ldr	r3, [pc, #368]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002606:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800260a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002612:	4959      	ldr	r1, [pc, #356]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002614:	4313      	orrs	r3, r2
 8002616:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002622:	2b00      	cmp	r3, #0
 8002624:	d00a      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002626:	4b54      	ldr	r3, [pc, #336]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800262c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002634:	4950      	ldr	r1, [pc, #320]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002636:	4313      	orrs	r3, r2
 8002638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002644:	2b00      	cmp	r3, #0
 8002646:	d00a      	beq.n	800265e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002648:	4b4b      	ldr	r3, [pc, #300]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800264a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800264e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002656:	4948      	ldr	r1, [pc, #288]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002658:	4313      	orrs	r3, r2
 800265a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002666:	2b00      	cmp	r3, #0
 8002668:	d00a      	beq.n	8002680 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800266a:	4b43      	ldr	r3, [pc, #268]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800266c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002670:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002678:	493f      	ldr	r1, [pc, #252]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800267a:	4313      	orrs	r3, r2
 800267c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002688:	2b00      	cmp	r3, #0
 800268a:	d028      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800268c:	4b3a      	ldr	r3, [pc, #232]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800268e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002692:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800269a:	4937      	ldr	r1, [pc, #220]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800269c:	4313      	orrs	r3, r2
 800269e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026a6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026aa:	d106      	bne.n	80026ba <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80026ac:	4b32      	ldr	r3, [pc, #200]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4a31      	ldr	r2, [pc, #196]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80026b6:	60d3      	str	r3, [r2, #12]
 80026b8:	e011      	b.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80026be:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80026c2:	d10c      	bne.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	3304      	adds	r3, #4
 80026c8:	2101      	movs	r1, #1
 80026ca:	4618      	mov	r0, r3
 80026cc:	f000 f8c8 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80026d0:	4603      	mov	r3, r0
 80026d2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80026d4:	7cfb      	ldrb	r3, [r7, #19]
 80026d6:	2b00      	cmp	r3, #0
 80026d8:	d001      	beq.n	80026de <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 80026da:	7cfb      	ldrb	r3, [r7, #19]
 80026dc:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d028      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80026ea:	4b23      	ldr	r3, [pc, #140]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026f0:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80026f8:	491f      	ldr	r1, [pc, #124]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80026fa:	4313      	orrs	r3, r2
 80026fc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002704:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002708:	d106      	bne.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800270a:	4b1b      	ldr	r3, [pc, #108]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800270c:	68db      	ldr	r3, [r3, #12]
 800270e:	4a1a      	ldr	r2, [pc, #104]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002710:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002714:	60d3      	str	r3, [r2, #12]
 8002716:	e011      	b.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800271c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002720:	d10c      	bne.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	3304      	adds	r3, #4
 8002726:	2101      	movs	r1, #1
 8002728:	4618      	mov	r0, r3
 800272a:	f000 f899 	bl	8002860 <RCCEx_PLLSAI1_Config>
 800272e:	4603      	mov	r3, r0
 8002730:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002732:	7cfb      	ldrb	r3, [r7, #19]
 8002734:	2b00      	cmp	r3, #0
 8002736:	d001      	beq.n	800273c <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8002738:	7cfb      	ldrb	r3, [r7, #19]
 800273a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002744:	2b00      	cmp	r3, #0
 8002746:	d02b      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8002748:	4b0b      	ldr	r3, [pc, #44]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800274a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800274e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002756:	4908      	ldr	r1, [pc, #32]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8002758:	4313      	orrs	r3, r2
 800275a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002762:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002766:	d109      	bne.n	800277c <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8002768:	4b03      	ldr	r3, [pc, #12]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800276a:	68db      	ldr	r3, [r3, #12]
 800276c:	4a02      	ldr	r2, [pc, #8]	; (8002778 <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800276e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002772:	60d3      	str	r3, [r2, #12]
 8002774:	e014      	b.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8002776:	bf00      	nop
 8002778:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002780:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002784:	d10c      	bne.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	3304      	adds	r3, #4
 800278a:	2101      	movs	r1, #1
 800278c:	4618      	mov	r0, r3
 800278e:	f000 f867 	bl	8002860 <RCCEx_PLLSAI1_Config>
 8002792:	4603      	mov	r3, r0
 8002794:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002796:	7cfb      	ldrb	r3, [r7, #19]
 8002798:	2b00      	cmp	r3, #0
 800279a:	d001      	beq.n	80027a0 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 800279c:	7cfb      	ldrb	r3, [r7, #19]
 800279e:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d02f      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80027ac:	4b2b      	ldr	r3, [pc, #172]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80027b2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ba:	4928      	ldr	r1, [pc, #160]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80027bc:	4313      	orrs	r3, r2
 80027be:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027c6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80027ca:	d10d      	bne.n	80027e8 <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	3304      	adds	r3, #4
 80027d0:	2102      	movs	r1, #2
 80027d2:	4618      	mov	r0, r3
 80027d4:	f000 f844 	bl	8002860 <RCCEx_PLLSAI1_Config>
 80027d8:	4603      	mov	r3, r0
 80027da:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80027dc:	7cfb      	ldrb	r3, [r7, #19]
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d014      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 80027e2:	7cfb      	ldrb	r3, [r7, #19]
 80027e4:	74bb      	strb	r3, [r7, #18]
 80027e6:	e011      	b.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80027f0:	d10c      	bne.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3320      	adds	r3, #32
 80027f6:	2102      	movs	r1, #2
 80027f8:	4618      	mov	r0, r3
 80027fa:	f000 f921 	bl	8002a40 <RCCEx_PLLSAI2_Config>
 80027fe:	4603      	mov	r3, r0
 8002800:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8002802:	7cfb      	ldrb	r3, [r7, #19]
 8002804:	2b00      	cmp	r3, #0
 8002806:	d001      	beq.n	800280c <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8002808:	7cfb      	ldrb	r3, [r7, #19]
 800280a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d00a      	beq.n	800282e <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8002818:	4b10      	ldr	r3, [pc, #64]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800281a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800281e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002826:	490d      	ldr	r1, [pc, #52]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002828:	4313      	orrs	r3, r2
 800282a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002836:	2b00      	cmp	r3, #0
 8002838:	d00b      	beq.n	8002852 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800283a:	4b08      	ldr	r3, [pc, #32]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800283c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002840:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800284a:	4904      	ldr	r1, [pc, #16]	; (800285c <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800284c:	4313      	orrs	r3, r2
 800284e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8002852:	7cbb      	ldrb	r3, [r7, #18]
}
 8002854:	4618      	mov	r0, r3
 8002856:	3718      	adds	r7, #24
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40021000 	.word	0x40021000

08002860 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
 8002868:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800286a:	2300      	movs	r3, #0
 800286c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800286e:	4b73      	ldr	r3, [pc, #460]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002870:	68db      	ldr	r3, [r3, #12]
 8002872:	f003 0303 	and.w	r3, r3, #3
 8002876:	2b00      	cmp	r3, #0
 8002878:	d018      	beq.n	80028ac <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800287a:	4b70      	ldr	r3, [pc, #448]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 800287c:	68db      	ldr	r3, [r3, #12]
 800287e:	f003 0203 	and.w	r2, r3, #3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	429a      	cmp	r2, r3
 8002888:	d10d      	bne.n	80028a6 <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
       ||
 800288e:	2b00      	cmp	r3, #0
 8002890:	d009      	beq.n	80028a6 <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8002892:	4b6a      	ldr	r3, [pc, #424]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002894:	68db      	ldr	r3, [r3, #12]
 8002896:	091b      	lsrs	r3, r3, #4
 8002898:	f003 0307 	and.w	r3, r3, #7
 800289c:	1c5a      	adds	r2, r3, #1
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	685b      	ldr	r3, [r3, #4]
       ||
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d044      	beq.n	8002930 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	73fb      	strb	r3, [r7, #15]
 80028aa:	e041      	b.n	8002930 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2b02      	cmp	r3, #2
 80028b2:	d00c      	beq.n	80028ce <RCCEx_PLLSAI1_Config+0x6e>
 80028b4:	2b03      	cmp	r3, #3
 80028b6:	d013      	beq.n	80028e0 <RCCEx_PLLSAI1_Config+0x80>
 80028b8:	2b01      	cmp	r3, #1
 80028ba:	d120      	bne.n	80028fe <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80028bc:	4b5f      	ldr	r3, [pc, #380]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 0302 	and.w	r3, r3, #2
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d11d      	bne.n	8002904 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 80028c8:	2301      	movs	r3, #1
 80028ca:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028cc:	e01a      	b.n	8002904 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80028ce:	4b5b      	ldr	r3, [pc, #364]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d116      	bne.n	8002908 <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80028de:	e013      	b.n	8002908 <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80028e0:	4b56      	ldr	r3, [pc, #344]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e8:	2b00      	cmp	r3, #0
 80028ea:	d10f      	bne.n	800290c <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80028ec:	4b53      	ldr	r3, [pc, #332]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d109      	bne.n	800290c <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80028fc:	e006      	b.n	800290c <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	73fb      	strb	r3, [r7, #15]
      break;
 8002902:	e004      	b.n	800290e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002904:	bf00      	nop
 8002906:	e002      	b.n	800290e <RCCEx_PLLSAI1_Config+0xae>
      break;
 8002908:	bf00      	nop
 800290a:	e000      	b.n	800290e <RCCEx_PLLSAI1_Config+0xae>
      break;
 800290c:	bf00      	nop
    }

    if(status == HAL_OK)
 800290e:	7bfb      	ldrb	r3, [r7, #15]
 8002910:	2b00      	cmp	r3, #0
 8002912:	d10d      	bne.n	8002930 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002914:	4b49      	ldr	r3, [pc, #292]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002916:	68db      	ldr	r3, [r3, #12]
 8002918:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6819      	ldr	r1, [r3, #0]
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	3b01      	subs	r3, #1
 8002926:	011b      	lsls	r3, r3, #4
 8002928:	430b      	orrs	r3, r1
 800292a:	4944      	ldr	r1, [pc, #272]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 800292c:	4313      	orrs	r3, r2
 800292e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002930:	7bfb      	ldrb	r3, [r7, #15]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d17d      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8002936:	4b41      	ldr	r3, [pc, #260]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a40      	ldr	r2, [pc, #256]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 800293c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002940:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002942:	f7fd fedd 	bl	8000700 <HAL_GetTick>
 8002946:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002948:	e009      	b.n	800295e <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800294a:	f7fd fed9 	bl	8000700 <HAL_GetTick>
 800294e:	4602      	mov	r2, r0
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b02      	cmp	r3, #2
 8002956:	d902      	bls.n	800295e <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002958:	2303      	movs	r3, #3
 800295a:	73fb      	strb	r3, [r7, #15]
        break;
 800295c:	e005      	b.n	800296a <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800295e:	4b37      	ldr	r3, [pc, #220]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002960:	681b      	ldr	r3, [r3, #0]
 8002962:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002966:	2b00      	cmp	r3, #0
 8002968:	d1ef      	bne.n	800294a <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800296a:	7bfb      	ldrb	r3, [r7, #15]
 800296c:	2b00      	cmp	r3, #0
 800296e:	d160      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	2b00      	cmp	r3, #0
 8002974:	d111      	bne.n	800299a <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002978:	691b      	ldr	r3, [r3, #16]
 800297a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 800297e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002982:	687a      	ldr	r2, [r7, #4]
 8002984:	6892      	ldr	r2, [r2, #8]
 8002986:	0211      	lsls	r1, r2, #8
 8002988:	687a      	ldr	r2, [r7, #4]
 800298a:	68d2      	ldr	r2, [r2, #12]
 800298c:	0912      	lsrs	r2, r2, #4
 800298e:	0452      	lsls	r2, r2, #17
 8002990:	430a      	orrs	r2, r1
 8002992:	492a      	ldr	r1, [pc, #168]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002994:	4313      	orrs	r3, r2
 8002996:	610b      	str	r3, [r1, #16]
 8002998:	e027      	b.n	80029ea <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800299a:	683b      	ldr	r3, [r7, #0]
 800299c:	2b01      	cmp	r3, #1
 800299e:	d112      	bne.n	80029c6 <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029a0:	4b26      	ldr	r3, [pc, #152]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029a2:	691b      	ldr	r3, [r3, #16]
 80029a4:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80029a8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029ac:	687a      	ldr	r2, [r7, #4]
 80029ae:	6892      	ldr	r2, [r2, #8]
 80029b0:	0211      	lsls	r1, r2, #8
 80029b2:	687a      	ldr	r2, [r7, #4]
 80029b4:	6912      	ldr	r2, [r2, #16]
 80029b6:	0852      	lsrs	r2, r2, #1
 80029b8:	3a01      	subs	r2, #1
 80029ba:	0552      	lsls	r2, r2, #21
 80029bc:	430a      	orrs	r2, r1
 80029be:	491f      	ldr	r1, [pc, #124]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c0:	4313      	orrs	r3, r2
 80029c2:	610b      	str	r3, [r1, #16]
 80029c4:	e011      	b.n	80029ea <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80029c6:	4b1d      	ldr	r3, [pc, #116]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80029ce:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	6892      	ldr	r2, [r2, #8]
 80029d6:	0211      	lsls	r1, r2, #8
 80029d8:	687a      	ldr	r2, [r7, #4]
 80029da:	6952      	ldr	r2, [r2, #20]
 80029dc:	0852      	lsrs	r2, r2, #1
 80029de:	3a01      	subs	r2, #1
 80029e0:	0652      	lsls	r2, r2, #25
 80029e2:	430a      	orrs	r2, r1
 80029e4:	4915      	ldr	r1, [pc, #84]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029e6:	4313      	orrs	r3, r2
 80029e8:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80029ea:	4b14      	ldr	r3, [pc, #80]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a13      	ldr	r2, [pc, #76]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 80029f0:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80029f4:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029f6:	f7fd fe83 	bl	8000700 <HAL_GetTick>
 80029fa:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80029fc:	e009      	b.n	8002a12 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80029fe:	f7fd fe7f 	bl	8000700 <HAL_GetTick>
 8002a02:	4602      	mov	r2, r0
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	2b02      	cmp	r3, #2
 8002a0a:	d902      	bls.n	8002a12 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8002a0c:	2303      	movs	r3, #3
 8002a0e:	73fb      	strb	r3, [r7, #15]
          break;
 8002a10:	e005      	b.n	8002a1e <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8002a12:	4b0a      	ldr	r3, [pc, #40]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d0ef      	beq.n	80029fe <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8002a1e:	7bfb      	ldrb	r3, [r7, #15]
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d106      	bne.n	8002a32 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8002a24:	4b05      	ldr	r3, [pc, #20]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a26:	691a      	ldr	r2, [r3, #16]
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4903      	ldr	r1, [pc, #12]	; (8002a3c <RCCEx_PLLSAI1_Config+0x1dc>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002a32:	7bfb      	ldrb	r3, [r7, #15]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	3710      	adds	r7, #16
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	bd80      	pop	{r7, pc}
 8002a3c:	40021000 	.word	0x40021000

08002a40 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b084      	sub	sp, #16
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
 8002a48:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002a4e:	4b68      	ldr	r3, [pc, #416]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a50:	68db      	ldr	r3, [r3, #12]
 8002a52:	f003 0303 	and.w	r3, r3, #3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d018      	beq.n	8002a8c <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8002a5a:	4b65      	ldr	r3, [pc, #404]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	f003 0203 	and.w	r2, r3, #3
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	429a      	cmp	r2, r3
 8002a68:	d10d      	bne.n	8002a86 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
       ||
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d009      	beq.n	8002a86 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002a72:	4b5f      	ldr	r3, [pc, #380]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a74:	68db      	ldr	r3, [r3, #12]
 8002a76:	091b      	lsrs	r3, r3, #4
 8002a78:	f003 0307 	and.w	r3, r3, #7
 8002a7c:	1c5a      	adds	r2, r3, #1
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	685b      	ldr	r3, [r3, #4]
       ||
 8002a82:	429a      	cmp	r2, r3
 8002a84:	d044      	beq.n	8002b10 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8002a86:	2301      	movs	r3, #1
 8002a88:	73fb      	strb	r3, [r7, #15]
 8002a8a:	e041      	b.n	8002b10 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	2b02      	cmp	r3, #2
 8002a92:	d00c      	beq.n	8002aae <RCCEx_PLLSAI2_Config+0x6e>
 8002a94:	2b03      	cmp	r3, #3
 8002a96:	d013      	beq.n	8002ac0 <RCCEx_PLLSAI2_Config+0x80>
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d120      	bne.n	8002ade <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002a9c:	4b54      	ldr	r3, [pc, #336]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	f003 0302 	and.w	r3, r3, #2
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d11d      	bne.n	8002ae4 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 8002aa8:	2301      	movs	r3, #1
 8002aaa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002aac:	e01a      	b.n	8002ae4 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002aae:	4b50      	ldr	r3, [pc, #320]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	d116      	bne.n	8002ae8 <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 8002aba:	2301      	movs	r3, #1
 8002abc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002abe:	e013      	b.n	8002ae8 <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002ac0:	4b4b      	ldr	r3, [pc, #300]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d10f      	bne.n	8002aec <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8002acc:	4b48      	ldr	r3, [pc, #288]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d109      	bne.n	8002aec <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8002adc:	e006      	b.n	8002aec <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8002ade:	2301      	movs	r3, #1
 8002ae0:	73fb      	strb	r3, [r7, #15]
      break;
 8002ae2:	e004      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ae4:	bf00      	nop
 8002ae6:	e002      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002ae8:	bf00      	nop
 8002aea:	e000      	b.n	8002aee <RCCEx_PLLSAI2_Config+0xae>
      break;
 8002aec:	bf00      	nop
    }

    if(status == HAL_OK)
 8002aee:	7bfb      	ldrb	r3, [r7, #15]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d10d      	bne.n	8002b10 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8002af4:	4b3e      	ldr	r3, [pc, #248]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002af6:	68db      	ldr	r3, [r3, #12]
 8002af8:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	6819      	ldr	r1, [r3, #0]
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	685b      	ldr	r3, [r3, #4]
 8002b04:	3b01      	subs	r3, #1
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	430b      	orrs	r3, r1
 8002b0a:	4939      	ldr	r1, [pc, #228]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b0c:	4313      	orrs	r3, r2
 8002b0e:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002b10:	7bfb      	ldrb	r3, [r7, #15]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d167      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8002b16:	4b36      	ldr	r3, [pc, #216]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	4a35      	ldr	r2, [pc, #212]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b1c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b20:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002b22:	f7fd fded 	bl	8000700 <HAL_GetTick>
 8002b26:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b28:	e009      	b.n	8002b3e <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002b2a:	f7fd fde9 	bl	8000700 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d902      	bls.n	8002b3e <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	73fb      	strb	r3, [r7, #15]
        break;
 8002b3c:	e005      	b.n	8002b4a <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002b3e:	4b2c      	ldr	r3, [pc, #176]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ef      	bne.n	8002b2a <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 8002b4a:	7bfb      	ldrb	r3, [r7, #15]
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d14a      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002b50:	683b      	ldr	r3, [r7, #0]
 8002b52:	2b00      	cmp	r3, #0
 8002b54:	d111      	bne.n	8002b7a <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b56:	4b26      	ldr	r3, [pc, #152]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b58:	695b      	ldr	r3, [r3, #20]
 8002b5a:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002b5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002b62:	687a      	ldr	r2, [r7, #4]
 8002b64:	6892      	ldr	r2, [r2, #8]
 8002b66:	0211      	lsls	r1, r2, #8
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	68d2      	ldr	r2, [r2, #12]
 8002b6c:	0912      	lsrs	r2, r2, #4
 8002b6e:	0452      	lsls	r2, r2, #17
 8002b70:	430a      	orrs	r2, r1
 8002b72:	491f      	ldr	r1, [pc, #124]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b74:	4313      	orrs	r3, r2
 8002b76:	614b      	str	r3, [r1, #20]
 8002b78:	e011      	b.n	8002b9e <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8002b7a:	4b1d      	ldr	r3, [pc, #116]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b7c:	695b      	ldr	r3, [r3, #20]
 8002b7e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002b82:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002b86:	687a      	ldr	r2, [r7, #4]
 8002b88:	6892      	ldr	r2, [r2, #8]
 8002b8a:	0211      	lsls	r1, r2, #8
 8002b8c:	687a      	ldr	r2, [r7, #4]
 8002b8e:	6912      	ldr	r2, [r2, #16]
 8002b90:	0852      	lsrs	r2, r2, #1
 8002b92:	3a01      	subs	r2, #1
 8002b94:	0652      	lsls	r2, r2, #25
 8002b96:	430a      	orrs	r2, r1
 8002b98:	4915      	ldr	r1, [pc, #84]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002b9a:	4313      	orrs	r3, r2
 8002b9c:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002b9e:	4b14      	ldr	r3, [pc, #80]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a13      	ldr	r2, [pc, #76]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002ba4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002ba8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002baa:	f7fd fda9 	bl	8000700 <HAL_GetTick>
 8002bae:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bb0:	e009      	b.n	8002bc6 <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002bb2:	f7fd fda5 	bl	8000700 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d902      	bls.n	8002bc6 <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	73fb      	strb	r3, [r7, #15]
          break;
 8002bc4:	e005      	b.n	8002bd2 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002bc6:	4b0a      	ldr	r3, [pc, #40]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d0ef      	beq.n	8002bb2 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8002bd2:	7bfb      	ldrb	r3, [r7, #15]
 8002bd4:	2b00      	cmp	r3, #0
 8002bd6:	d106      	bne.n	8002be6 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8002bd8:	4b05      	ldr	r3, [pc, #20]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002bda:	695a      	ldr	r2, [r3, #20]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	4903      	ldr	r1, [pc, #12]	; (8002bf0 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002be2:	4313      	orrs	r3, r2
 8002be4:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8002be6:	7bfb      	ldrb	r3, [r7, #15]
}
 8002be8:	4618      	mov	r0, r3
 8002bea:	3710      	adds	r7, #16
 8002bec:	46bd      	mov	sp, r7
 8002bee:	bd80      	pop	{r7, pc}
 8002bf0:	40021000 	.word	0x40021000

08002bf4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002bf4:	b580      	push	{r7, lr}
 8002bf6:	b082      	sub	sp, #8
 8002bf8:	af00      	add	r7, sp, #0
 8002bfa:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d101      	bne.n	8002c06 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c02:	2301      	movs	r3, #1
 8002c04:	e040      	b.n	8002c88 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002c0a:	2b00      	cmp	r3, #0
 8002c0c:	d106      	bne.n	8002c1c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	2200      	movs	r2, #0
 8002c12:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c16:	6878      	ldr	r0, [r7, #4]
 8002c18:	f001 f9e4 	bl	8003fe4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2224      	movs	r2, #36	; 0x24
 8002c20:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	681a      	ldr	r2, [r3, #0]
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	f022 0201 	bic.w	r2, r2, #1
 8002c30:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002c32:	6878      	ldr	r0, [r7, #4]
 8002c34:	f000 f82c 	bl	8002c90 <UART_SetConfig>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	2b01      	cmp	r3, #1
 8002c3c:	d101      	bne.n	8002c42 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002c3e:	2301      	movs	r3, #1
 8002c40:	e022      	b.n	8002c88 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d002      	beq.n	8002c50 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8002c4a:	6878      	ldr	r0, [r7, #4]
 8002c4c:	f000 fb68 	bl	8003320 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	685a      	ldr	r2, [r3, #4]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002c5e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	689a      	ldr	r2, [r3, #8]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002c6e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	681a      	ldr	r2, [r3, #0]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f042 0201 	orr.w	r2, r2, #1
 8002c7e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002c80:	6878      	ldr	r0, [r7, #4]
 8002c82:	f000 fbef 	bl	8003464 <UART_CheckIdleState>
 8002c86:	4603      	mov	r3, r0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3708      	adds	r7, #8
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002c90:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002c94:	b088      	sub	sp, #32
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	689a      	ldr	r2, [r3, #8]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	691b      	ldr	r3, [r3, #16]
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	695b      	ldr	r3, [r3, #20]
 8002cb4:	431a      	orrs	r2, r3
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	69db      	ldr	r3, [r3, #28]
 8002cba:	4313      	orrs	r3, r2
 8002cbc:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	4bac      	ldr	r3, [pc, #688]	; (8002f78 <UART_SetConfig+0x2e8>)
 8002cc6:	4013      	ands	r3, r2
 8002cc8:	687a      	ldr	r2, [r7, #4]
 8002cca:	6812      	ldr	r2, [r2, #0]
 8002ccc:	69f9      	ldr	r1, [r7, #28]
 8002cce:	430b      	orrs	r3, r1
 8002cd0:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	68da      	ldr	r2, [r3, #12]
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	430a      	orrs	r2, r1
 8002ce6:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	699b      	ldr	r3, [r3, #24]
 8002cec:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4aa2      	ldr	r2, [pc, #648]	; (8002f7c <UART_SetConfig+0x2ec>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d004      	beq.n	8002d02 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6a1b      	ldr	r3, [r3, #32]
 8002cfc:	69fa      	ldr	r2, [r7, #28]
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	689b      	ldr	r3, [r3, #8]
 8002d08:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	69fa      	ldr	r2, [r7, #28]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	4a99      	ldr	r2, [pc, #612]	; (8002f80 <UART_SetConfig+0x2f0>)
 8002d1c:	4293      	cmp	r3, r2
 8002d1e:	d121      	bne.n	8002d64 <UART_SetConfig+0xd4>
 8002d20:	4b98      	ldr	r3, [pc, #608]	; (8002f84 <UART_SetConfig+0x2f4>)
 8002d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d26:	f003 0303 	and.w	r3, r3, #3
 8002d2a:	2b03      	cmp	r3, #3
 8002d2c:	d816      	bhi.n	8002d5c <UART_SetConfig+0xcc>
 8002d2e:	a201      	add	r2, pc, #4	; (adr r2, 8002d34 <UART_SetConfig+0xa4>)
 8002d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d34:	08002d45 	.word	0x08002d45
 8002d38:	08002d51 	.word	0x08002d51
 8002d3c:	08002d4b 	.word	0x08002d4b
 8002d40:	08002d57 	.word	0x08002d57
 8002d44:	2301      	movs	r3, #1
 8002d46:	76fb      	strb	r3, [r7, #27]
 8002d48:	e0e8      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	76fb      	strb	r3, [r7, #27]
 8002d4e:	e0e5      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002d50:	2304      	movs	r3, #4
 8002d52:	76fb      	strb	r3, [r7, #27]
 8002d54:	e0e2      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002d56:	2308      	movs	r3, #8
 8002d58:	76fb      	strb	r3, [r7, #27]
 8002d5a:	e0df      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002d5c:	2310      	movs	r3, #16
 8002d5e:	76fb      	strb	r3, [r7, #27]
 8002d60:	bf00      	nop
 8002d62:	e0db      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	4a87      	ldr	r2, [pc, #540]	; (8002f88 <UART_SetConfig+0x2f8>)
 8002d6a:	4293      	cmp	r3, r2
 8002d6c:	d134      	bne.n	8002dd8 <UART_SetConfig+0x148>
 8002d6e:	4b85      	ldr	r3, [pc, #532]	; (8002f84 <UART_SetConfig+0x2f4>)
 8002d70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d74:	f003 030c 	and.w	r3, r3, #12
 8002d78:	2b0c      	cmp	r3, #12
 8002d7a:	d829      	bhi.n	8002dd0 <UART_SetConfig+0x140>
 8002d7c:	a201      	add	r2, pc, #4	; (adr r2, 8002d84 <UART_SetConfig+0xf4>)
 8002d7e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d82:	bf00      	nop
 8002d84:	08002db9 	.word	0x08002db9
 8002d88:	08002dd1 	.word	0x08002dd1
 8002d8c:	08002dd1 	.word	0x08002dd1
 8002d90:	08002dd1 	.word	0x08002dd1
 8002d94:	08002dc5 	.word	0x08002dc5
 8002d98:	08002dd1 	.word	0x08002dd1
 8002d9c:	08002dd1 	.word	0x08002dd1
 8002da0:	08002dd1 	.word	0x08002dd1
 8002da4:	08002dbf 	.word	0x08002dbf
 8002da8:	08002dd1 	.word	0x08002dd1
 8002dac:	08002dd1 	.word	0x08002dd1
 8002db0:	08002dd1 	.word	0x08002dd1
 8002db4:	08002dcb 	.word	0x08002dcb
 8002db8:	2300      	movs	r3, #0
 8002dba:	76fb      	strb	r3, [r7, #27]
 8002dbc:	e0ae      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002dbe:	2302      	movs	r3, #2
 8002dc0:	76fb      	strb	r3, [r7, #27]
 8002dc2:	e0ab      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002dc4:	2304      	movs	r3, #4
 8002dc6:	76fb      	strb	r3, [r7, #27]
 8002dc8:	e0a8      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002dca:	2308      	movs	r3, #8
 8002dcc:	76fb      	strb	r3, [r7, #27]
 8002dce:	e0a5      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002dd0:	2310      	movs	r3, #16
 8002dd2:	76fb      	strb	r3, [r7, #27]
 8002dd4:	bf00      	nop
 8002dd6:	e0a1      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a6b      	ldr	r2, [pc, #428]	; (8002f8c <UART_SetConfig+0x2fc>)
 8002dde:	4293      	cmp	r3, r2
 8002de0:	d120      	bne.n	8002e24 <UART_SetConfig+0x194>
 8002de2:	4b68      	ldr	r3, [pc, #416]	; (8002f84 <UART_SetConfig+0x2f4>)
 8002de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002de8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002dec:	2b10      	cmp	r3, #16
 8002dee:	d00f      	beq.n	8002e10 <UART_SetConfig+0x180>
 8002df0:	2b10      	cmp	r3, #16
 8002df2:	d802      	bhi.n	8002dfa <UART_SetConfig+0x16a>
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d005      	beq.n	8002e04 <UART_SetConfig+0x174>
 8002df8:	e010      	b.n	8002e1c <UART_SetConfig+0x18c>
 8002dfa:	2b20      	cmp	r3, #32
 8002dfc:	d005      	beq.n	8002e0a <UART_SetConfig+0x17a>
 8002dfe:	2b30      	cmp	r3, #48	; 0x30
 8002e00:	d009      	beq.n	8002e16 <UART_SetConfig+0x186>
 8002e02:	e00b      	b.n	8002e1c <UART_SetConfig+0x18c>
 8002e04:	2300      	movs	r3, #0
 8002e06:	76fb      	strb	r3, [r7, #27]
 8002e08:	e088      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e0a:	2302      	movs	r3, #2
 8002e0c:	76fb      	strb	r3, [r7, #27]
 8002e0e:	e085      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e10:	2304      	movs	r3, #4
 8002e12:	76fb      	strb	r3, [r7, #27]
 8002e14:	e082      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e16:	2308      	movs	r3, #8
 8002e18:	76fb      	strb	r3, [r7, #27]
 8002e1a:	e07f      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e1c:	2310      	movs	r3, #16
 8002e1e:	76fb      	strb	r3, [r7, #27]
 8002e20:	bf00      	nop
 8002e22:	e07b      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	4a59      	ldr	r2, [pc, #356]	; (8002f90 <UART_SetConfig+0x300>)
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d120      	bne.n	8002e70 <UART_SetConfig+0x1e0>
 8002e2e:	4b55      	ldr	r3, [pc, #340]	; (8002f84 <UART_SetConfig+0x2f4>)
 8002e30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e34:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e38:	2b40      	cmp	r3, #64	; 0x40
 8002e3a:	d00f      	beq.n	8002e5c <UART_SetConfig+0x1cc>
 8002e3c:	2b40      	cmp	r3, #64	; 0x40
 8002e3e:	d802      	bhi.n	8002e46 <UART_SetConfig+0x1b6>
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d005      	beq.n	8002e50 <UART_SetConfig+0x1c0>
 8002e44:	e010      	b.n	8002e68 <UART_SetConfig+0x1d8>
 8002e46:	2b80      	cmp	r3, #128	; 0x80
 8002e48:	d005      	beq.n	8002e56 <UART_SetConfig+0x1c6>
 8002e4a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e4c:	d009      	beq.n	8002e62 <UART_SetConfig+0x1d2>
 8002e4e:	e00b      	b.n	8002e68 <UART_SetConfig+0x1d8>
 8002e50:	2300      	movs	r3, #0
 8002e52:	76fb      	strb	r3, [r7, #27]
 8002e54:	e062      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e56:	2302      	movs	r3, #2
 8002e58:	76fb      	strb	r3, [r7, #27]
 8002e5a:	e05f      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e5c:	2304      	movs	r3, #4
 8002e5e:	76fb      	strb	r3, [r7, #27]
 8002e60:	e05c      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e62:	2308      	movs	r3, #8
 8002e64:	76fb      	strb	r3, [r7, #27]
 8002e66:	e059      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e68:	2310      	movs	r3, #16
 8002e6a:	76fb      	strb	r3, [r7, #27]
 8002e6c:	bf00      	nop
 8002e6e:	e055      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	4a47      	ldr	r2, [pc, #284]	; (8002f94 <UART_SetConfig+0x304>)
 8002e76:	4293      	cmp	r3, r2
 8002e78:	d124      	bne.n	8002ec4 <UART_SetConfig+0x234>
 8002e7a:	4b42      	ldr	r3, [pc, #264]	; (8002f84 <UART_SetConfig+0x2f4>)
 8002e7c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002e80:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002e84:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e88:	d012      	beq.n	8002eb0 <UART_SetConfig+0x220>
 8002e8a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002e8e:	d802      	bhi.n	8002e96 <UART_SetConfig+0x206>
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d007      	beq.n	8002ea4 <UART_SetConfig+0x214>
 8002e94:	e012      	b.n	8002ebc <UART_SetConfig+0x22c>
 8002e96:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002e9a:	d006      	beq.n	8002eaa <UART_SetConfig+0x21a>
 8002e9c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea0:	d009      	beq.n	8002eb6 <UART_SetConfig+0x226>
 8002ea2:	e00b      	b.n	8002ebc <UART_SetConfig+0x22c>
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	76fb      	strb	r3, [r7, #27]
 8002ea8:	e038      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002eaa:	2302      	movs	r3, #2
 8002eac:	76fb      	strb	r3, [r7, #27]
 8002eae:	e035      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002eb0:	2304      	movs	r3, #4
 8002eb2:	76fb      	strb	r3, [r7, #27]
 8002eb4:	e032      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	76fb      	strb	r3, [r7, #27]
 8002eba:	e02f      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002ebc:	2310      	movs	r3, #16
 8002ebe:	76fb      	strb	r3, [r7, #27]
 8002ec0:	bf00      	nop
 8002ec2:	e02b      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a2c      	ldr	r2, [pc, #176]	; (8002f7c <UART_SetConfig+0x2ec>)
 8002eca:	4293      	cmp	r3, r2
 8002ecc:	d124      	bne.n	8002f18 <UART_SetConfig+0x288>
 8002ece:	4b2d      	ldr	r3, [pc, #180]	; (8002f84 <UART_SetConfig+0x2f4>)
 8002ed0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002ed4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002edc:	d012      	beq.n	8002f04 <UART_SetConfig+0x274>
 8002ede:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ee2:	d802      	bhi.n	8002eea <UART_SetConfig+0x25a>
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d007      	beq.n	8002ef8 <UART_SetConfig+0x268>
 8002ee8:	e012      	b.n	8002f10 <UART_SetConfig+0x280>
 8002eea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002eee:	d006      	beq.n	8002efe <UART_SetConfig+0x26e>
 8002ef0:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002ef4:	d009      	beq.n	8002f0a <UART_SetConfig+0x27a>
 8002ef6:	e00b      	b.n	8002f10 <UART_SetConfig+0x280>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	76fb      	strb	r3, [r7, #27]
 8002efc:	e00e      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002efe:	2302      	movs	r3, #2
 8002f00:	76fb      	strb	r3, [r7, #27]
 8002f02:	e00b      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002f04:	2304      	movs	r3, #4
 8002f06:	76fb      	strb	r3, [r7, #27]
 8002f08:	e008      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002f0a:	2308      	movs	r3, #8
 8002f0c:	76fb      	strb	r3, [r7, #27]
 8002f0e:	e005      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002f10:	2310      	movs	r3, #16
 8002f12:	76fb      	strb	r3, [r7, #27]
 8002f14:	bf00      	nop
 8002f16:	e001      	b.n	8002f1c <UART_SetConfig+0x28c>
 8002f18:	2310      	movs	r3, #16
 8002f1a:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4a16      	ldr	r2, [pc, #88]	; (8002f7c <UART_SetConfig+0x2ec>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	f040 80fa 	bne.w	800311c <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8002f28:	7efb      	ldrb	r3, [r7, #27]
 8002f2a:	2b08      	cmp	r3, #8
 8002f2c:	d836      	bhi.n	8002f9c <UART_SetConfig+0x30c>
 8002f2e:	a201      	add	r2, pc, #4	; (adr r2, 8002f34 <UART_SetConfig+0x2a4>)
 8002f30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f34:	08002f59 	.word	0x08002f59
 8002f38:	08002f9d 	.word	0x08002f9d
 8002f3c:	08002f61 	.word	0x08002f61
 8002f40:	08002f9d 	.word	0x08002f9d
 8002f44:	08002f67 	.word	0x08002f67
 8002f48:	08002f9d 	.word	0x08002f9d
 8002f4c:	08002f9d 	.word	0x08002f9d
 8002f50:	08002f9d 	.word	0x08002f9d
 8002f54:	08002f6f 	.word	0x08002f6f
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 8002f58:	f7ff f910 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8002f5c:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f5e:	e020      	b.n	8002fa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002f60:	4b0d      	ldr	r3, [pc, #52]	; (8002f98 <UART_SetConfig+0x308>)
 8002f62:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f64:	e01d      	b.n	8002fa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8002f66:	f7ff f873 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8002f6a:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f6c:	e019      	b.n	8002fa2 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002f6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002f72:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002f74:	e015      	b.n	8002fa2 <UART_SetConfig+0x312>
 8002f76:	bf00      	nop
 8002f78:	efff69f3 	.word	0xefff69f3
 8002f7c:	40008000 	.word	0x40008000
 8002f80:	40013800 	.word	0x40013800
 8002f84:	40021000 	.word	0x40021000
 8002f88:	40004400 	.word	0x40004400
 8002f8c:	40004800 	.word	0x40004800
 8002f90:	40004c00 	.word	0x40004c00
 8002f94:	40005000 	.word	0x40005000
 8002f98:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002f9c:	2301      	movs	r3, #1
 8002f9e:	74fb      	strb	r3, [r7, #19]
        break;
 8002fa0:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	f000 81ac 	beq.w	8003302 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	685a      	ldr	r2, [r3, #4]
 8002fae:	4613      	mov	r3, r2
 8002fb0:	005b      	lsls	r3, r3, #1
 8002fb2:	4413      	add	r3, r2
 8002fb4:	68fa      	ldr	r2, [r7, #12]
 8002fb6:	429a      	cmp	r2, r3
 8002fb8:	d305      	bcc.n	8002fc6 <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002fc0:	68fa      	ldr	r2, [r7, #12]
 8002fc2:	429a      	cmp	r2, r3
 8002fc4:	d902      	bls.n	8002fcc <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 8002fc6:	2301      	movs	r3, #1
 8002fc8:	74fb      	strb	r3, [r7, #19]
 8002fca:	e19a      	b.n	8003302 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 8002fcc:	7efb      	ldrb	r3, [r7, #27]
 8002fce:	2b08      	cmp	r3, #8
 8002fd0:	f200 8091 	bhi.w	80030f6 <UART_SetConfig+0x466>
 8002fd4:	a201      	add	r2, pc, #4	; (adr r2, 8002fdc <UART_SetConfig+0x34c>)
 8002fd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fda:	bf00      	nop
 8002fdc:	08003001 	.word	0x08003001
 8002fe0:	080030f7 	.word	0x080030f7
 8002fe4:	0800304d 	.word	0x0800304d
 8002fe8:	080030f7 	.word	0x080030f7
 8002fec:	08003081 	.word	0x08003081
 8002ff0:	080030f7 	.word	0x080030f7
 8002ff4:	080030f7 	.word	0x080030f7
 8002ff8:	080030f7 	.word	0x080030f7
 8002ffc:	080030cd 	.word	0x080030cd
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003000:	f7ff f8bc 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 8003004:	4603      	mov	r3, r0
 8003006:	4619      	mov	r1, r3
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	f04f 0300 	mov.w	r3, #0
 8003010:	f04f 0400 	mov.w	r4, #0
 8003014:	0214      	lsls	r4, r2, #8
 8003016:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800301a:	020b      	lsls	r3, r1, #8
 800301c:	687a      	ldr	r2, [r7, #4]
 800301e:	6852      	ldr	r2, [r2, #4]
 8003020:	0852      	lsrs	r2, r2, #1
 8003022:	4611      	mov	r1, r2
 8003024:	f04f 0200 	mov.w	r2, #0
 8003028:	eb13 0b01 	adds.w	fp, r3, r1
 800302c:	eb44 0c02 	adc.w	ip, r4, r2
 8003030:	4658      	mov	r0, fp
 8003032:	4661      	mov	r1, ip
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f04f 0400 	mov.w	r4, #0
 800303c:	461a      	mov	r2, r3
 800303e:	4623      	mov	r3, r4
 8003040:	f7fd f8c2 	bl	80001c8 <__aeabi_uldivmod>
 8003044:	4603      	mov	r3, r0
 8003046:	460c      	mov	r4, r1
 8003048:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800304a:	e057      	b.n	80030fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	685b      	ldr	r3, [r3, #4]
 8003050:	085b      	lsrs	r3, r3, #1
 8003052:	f04f 0400 	mov.w	r4, #0
 8003056:	49b1      	ldr	r1, [pc, #708]	; (800331c <UART_SetConfig+0x68c>)
 8003058:	f04f 0200 	mov.w	r2, #0
 800305c:	eb13 0b01 	adds.w	fp, r3, r1
 8003060:	eb44 0c02 	adc.w	ip, r4, r2
 8003064:	4658      	mov	r0, fp
 8003066:	4661      	mov	r1, ip
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	685b      	ldr	r3, [r3, #4]
 800306c:	f04f 0400 	mov.w	r4, #0
 8003070:	461a      	mov	r2, r3
 8003072:	4623      	mov	r3, r4
 8003074:	f7fd f8a8 	bl	80001c8 <__aeabi_uldivmod>
 8003078:	4603      	mov	r3, r0
 800307a:	460c      	mov	r4, r1
 800307c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800307e:	e03d      	b.n	80030fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8003080:	f7fe ffe6 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 8003084:	4603      	mov	r3, r0
 8003086:	4619      	mov	r1, r3
 8003088:	f04f 0200 	mov.w	r2, #0
 800308c:	f04f 0300 	mov.w	r3, #0
 8003090:	f04f 0400 	mov.w	r4, #0
 8003094:	0214      	lsls	r4, r2, #8
 8003096:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800309a:	020b      	lsls	r3, r1, #8
 800309c:	687a      	ldr	r2, [r7, #4]
 800309e:	6852      	ldr	r2, [r2, #4]
 80030a0:	0852      	lsrs	r2, r2, #1
 80030a2:	4611      	mov	r1, r2
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	eb13 0b01 	adds.w	fp, r3, r1
 80030ac:	eb44 0c02 	adc.w	ip, r4, r2
 80030b0:	4658      	mov	r0, fp
 80030b2:	4661      	mov	r1, ip
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f04f 0400 	mov.w	r4, #0
 80030bc:	461a      	mov	r2, r3
 80030be:	4623      	mov	r3, r4
 80030c0:	f7fd f882 	bl	80001c8 <__aeabi_uldivmod>
 80030c4:	4603      	mov	r3, r0
 80030c6:	460c      	mov	r4, r1
 80030c8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80030ca:	e017      	b.n	80030fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	085b      	lsrs	r3, r3, #1
 80030d2:	f04f 0400 	mov.w	r4, #0
 80030d6:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80030da:	f144 0100 	adc.w	r1, r4, #0
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f04f 0400 	mov.w	r4, #0
 80030e6:	461a      	mov	r2, r3
 80030e8:	4623      	mov	r3, r4
 80030ea:	f7fd f86d 	bl	80001c8 <__aeabi_uldivmod>
 80030ee:	4603      	mov	r3, r0
 80030f0:	460c      	mov	r4, r1
 80030f2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80030f4:	e002      	b.n	80030fc <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80030f6:	2301      	movs	r3, #1
 80030f8:	74fb      	strb	r3, [r7, #19]
            break;
 80030fa:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003102:	d308      	bcc.n	8003116 <UART_SetConfig+0x486>
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800310a:	d204      	bcs.n	8003116 <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	697a      	ldr	r2, [r7, #20]
 8003112:	60da      	str	r2, [r3, #12]
 8003114:	e0f5      	b.n	8003302 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	74fb      	strb	r3, [r7, #19]
 800311a:	e0f2      	b.n	8003302 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	69db      	ldr	r3, [r3, #28]
 8003120:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003124:	d17f      	bne.n	8003226 <UART_SetConfig+0x596>
  {
    switch (clocksource)
 8003126:	7efb      	ldrb	r3, [r7, #27]
 8003128:	2b08      	cmp	r3, #8
 800312a:	d85c      	bhi.n	80031e6 <UART_SetConfig+0x556>
 800312c:	a201      	add	r2, pc, #4	; (adr r2, 8003134 <UART_SetConfig+0x4a4>)
 800312e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003132:	bf00      	nop
 8003134:	08003159 	.word	0x08003159
 8003138:	08003177 	.word	0x08003177
 800313c:	08003195 	.word	0x08003195
 8003140:	080031e7 	.word	0x080031e7
 8003144:	080031b1 	.word	0x080031b1
 8003148:	080031e7 	.word	0x080031e7
 800314c:	080031e7 	.word	0x080031e7
 8003150:	080031e7 	.word	0x080031e7
 8003154:	080031cf 	.word	0x080031cf
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003158:	f7ff f810 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 800315c:	4603      	mov	r3, r0
 800315e:	005a      	lsls	r2, r3, #1
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	685b      	ldr	r3, [r3, #4]
 8003164:	085b      	lsrs	r3, r3, #1
 8003166:	441a      	add	r2, r3
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	685b      	ldr	r3, [r3, #4]
 800316c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003170:	b29b      	uxth	r3, r3
 8003172:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003174:	e03a      	b.n	80031ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003176:	f7ff f817 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 800317a:	4603      	mov	r3, r0
 800317c:	005a      	lsls	r2, r3, #1
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	085b      	lsrs	r3, r3, #1
 8003184:	441a      	add	r2, r3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	fbb2 f3f3 	udiv	r3, r2, r3
 800318e:	b29b      	uxth	r3, r3
 8003190:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003192:	e02b      	b.n	80031ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	085b      	lsrs	r3, r3, #1
 800319a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800319e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 80031a2:	687a      	ldr	r2, [r7, #4]
 80031a4:	6852      	ldr	r2, [r2, #4]
 80031a6:	fbb3 f3f2 	udiv	r3, r3, r2
 80031aa:	b29b      	uxth	r3, r3
 80031ac:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031ae:	e01d      	b.n	80031ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80031b0:	f7fe ff4e 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 80031b4:	4603      	mov	r3, r0
 80031b6:	005a      	lsls	r2, r3, #1
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	685b      	ldr	r3, [r3, #4]
 80031bc:	085b      	lsrs	r3, r3, #1
 80031be:	441a      	add	r2, r3
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031c8:	b29b      	uxth	r3, r3
 80031ca:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031cc:	e00e      	b.n	80031ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	685b      	ldr	r3, [r3, #4]
 80031d2:	085b      	lsrs	r3, r3, #1
 80031d4:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	685b      	ldr	r3, [r3, #4]
 80031dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e0:	b29b      	uxth	r3, r3
 80031e2:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80031e4:	e002      	b.n	80031ec <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80031e6:	2301      	movs	r3, #1
 80031e8:	74fb      	strb	r3, [r7, #19]
        break;
 80031ea:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80031ec:	697b      	ldr	r3, [r7, #20]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	d916      	bls.n	8003220 <UART_SetConfig+0x590>
 80031f2:	697b      	ldr	r3, [r7, #20]
 80031f4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031f8:	d212      	bcs.n	8003220 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	b29b      	uxth	r3, r3
 80031fe:	f023 030f 	bic.w	r3, r3, #15
 8003202:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8003204:	697b      	ldr	r3, [r7, #20]
 8003206:	085b      	lsrs	r3, r3, #1
 8003208:	b29b      	uxth	r3, r3
 800320a:	f003 0307 	and.w	r3, r3, #7
 800320e:	b29a      	uxth	r2, r3
 8003210:	897b      	ldrh	r3, [r7, #10]
 8003212:	4313      	orrs	r3, r2
 8003214:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	897a      	ldrh	r2, [r7, #10]
 800321c:	60da      	str	r2, [r3, #12]
 800321e:	e070      	b.n	8003302 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 8003220:	2301      	movs	r3, #1
 8003222:	74fb      	strb	r3, [r7, #19]
 8003224:	e06d      	b.n	8003302 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 8003226:	7efb      	ldrb	r3, [r7, #27]
 8003228:	2b08      	cmp	r3, #8
 800322a:	d859      	bhi.n	80032e0 <UART_SetConfig+0x650>
 800322c:	a201      	add	r2, pc, #4	; (adr r2, 8003234 <UART_SetConfig+0x5a4>)
 800322e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003232:	bf00      	nop
 8003234:	08003259 	.word	0x08003259
 8003238:	08003275 	.word	0x08003275
 800323c:	08003291 	.word	0x08003291
 8003240:	080032e1 	.word	0x080032e1
 8003244:	080032ad 	.word	0x080032ad
 8003248:	080032e1 	.word	0x080032e1
 800324c:	080032e1 	.word	0x080032e1
 8003250:	080032e1 	.word	0x080032e1
 8003254:	080032c9 	.word	0x080032c9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 8003258:	f7fe ff90 	bl	800217c <HAL_RCC_GetPCLK1Freq>
 800325c:	4602      	mov	r2, r0
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	085b      	lsrs	r3, r3, #1
 8003264:	441a      	add	r2, r3
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	fbb2 f3f3 	udiv	r3, r2, r3
 800326e:	b29b      	uxth	r3, r3
 8003270:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8003272:	e038      	b.n	80032e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8003274:	f7fe ff98 	bl	80021a8 <HAL_RCC_GetPCLK2Freq>
 8003278:	4602      	mov	r2, r0
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	685b      	ldr	r3, [r3, #4]
 800327e:	085b      	lsrs	r3, r3, #1
 8003280:	441a      	add	r2, r3
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	fbb2 f3f3 	udiv	r3, r2, r3
 800328a:	b29b      	uxth	r3, r3
 800328c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800328e:	e02a      	b.n	80032e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	685b      	ldr	r3, [r3, #4]
 8003294:	085b      	lsrs	r3, r3, #1
 8003296:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800329a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	6852      	ldr	r2, [r2, #4]
 80032a2:	fbb3 f3f2 	udiv	r3, r3, r2
 80032a6:	b29b      	uxth	r3, r3
 80032a8:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032aa:	e01c      	b.n	80032e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 80032ac:	f7fe fed0 	bl	8002050 <HAL_RCC_GetSysClockFreq>
 80032b0:	4602      	mov	r2, r0
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	685b      	ldr	r3, [r3, #4]
 80032b6:	085b      	lsrs	r3, r3, #1
 80032b8:	441a      	add	r2, r3
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	685b      	ldr	r3, [r3, #4]
 80032be:	fbb2 f3f3 	udiv	r3, r2, r3
 80032c2:	b29b      	uxth	r3, r3
 80032c4:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032c6:	e00e      	b.n	80032e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	085b      	lsrs	r3, r3, #1
 80032ce:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	685b      	ldr	r3, [r3, #4]
 80032d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80032da:	b29b      	uxth	r3, r3
 80032dc:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80032de:	e002      	b.n	80032e6 <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	74fb      	strb	r3, [r7, #19]
        break;
 80032e4:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80032e6:	697b      	ldr	r3, [r7, #20]
 80032e8:	2b0f      	cmp	r3, #15
 80032ea:	d908      	bls.n	80032fe <UART_SetConfig+0x66e>
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032f2:	d204      	bcs.n	80032fe <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	60da      	str	r2, [r3, #12]
 80032fc:	e001      	b.n	8003302 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80032fe:	2301      	movs	r3, #1
 8003300:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	2200      	movs	r2, #0
 8003306:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2200      	movs	r2, #0
 800330c:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800330e:	7cfb      	ldrb	r3, [r7, #19]
}
 8003310:	4618      	mov	r0, r3
 8003312:	3720      	adds	r7, #32
 8003314:	46bd      	mov	sp, r7
 8003316:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 800331a:	bf00      	nop
 800331c:	f4240000 	.word	0xf4240000

08003320 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8003320:	b480      	push	{r7}
 8003322:	b083      	sub	sp, #12
 8003324:	af00      	add	r7, sp, #0
 8003326:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800332c:	f003 0301 	and.w	r3, r3, #1
 8003330:	2b00      	cmp	r3, #0
 8003332:	d00a      	beq.n	800334a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	685b      	ldr	r3, [r3, #4]
 800333a:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800334e:	f003 0302 	and.w	r3, r3, #2
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00a      	beq.n	800336c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	685b      	ldr	r3, [r3, #4]
 800335c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	430a      	orrs	r2, r1
 800336a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003370:	f003 0304 	and.w	r3, r3, #4
 8003374:	2b00      	cmp	r3, #0
 8003376:	d00a      	beq.n	800338e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	685b      	ldr	r3, [r3, #4]
 800337e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	430a      	orrs	r2, r1
 800338c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003392:	f003 0308 	and.w	r3, r3, #8
 8003396:	2b00      	cmp	r3, #0
 8003398:	d00a      	beq.n	80033b0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	685b      	ldr	r3, [r3, #4]
 80033a0:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	430a      	orrs	r2, r1
 80033ae:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033b4:	f003 0310 	and.w	r3, r3, #16
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	689b      	ldr	r3, [r3, #8]
 80033c2:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	430a      	orrs	r2, r1
 80033d0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033d6:	f003 0320 	and.w	r3, r3, #32
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d00a      	beq.n	80033f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	689b      	ldr	r3, [r3, #8]
 80033e4:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	430a      	orrs	r2, r1
 80033f2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80033f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d01a      	beq.n	8003436 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	430a      	orrs	r2, r1
 8003414:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800341a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800341e:	d10a      	bne.n	8003436 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	430a      	orrs	r2, r1
 8003434:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800343e:	2b00      	cmp	r3, #0
 8003440:	d00a      	beq.n	8003458 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	430a      	orrs	r2, r1
 8003456:	605a      	str	r2, [r3, #4]
  }
}
 8003458:	bf00      	nop
 800345a:	370c      	adds	r7, #12
 800345c:	46bd      	mov	sp, r7
 800345e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003462:	4770      	bx	lr

08003464 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8003464:	b580      	push	{r7, lr}
 8003466:	b086      	sub	sp, #24
 8003468:	af02      	add	r7, sp, #8
 800346a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8003472:	f7fd f945 	bl	8000700 <HAL_GetTick>
 8003476:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f003 0308 	and.w	r3, r3, #8
 8003482:	2b08      	cmp	r3, #8
 8003484:	d10e      	bne.n	80034a4 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8003486:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800348a:	9300      	str	r3, [sp, #0]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	2200      	movs	r2, #0
 8003490:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003494:	6878      	ldr	r0, [r7, #4]
 8003496:	f000 f82a 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 800349a:	4603      	mov	r3, r0
 800349c:	2b00      	cmp	r3, #0
 800349e:	d001      	beq.n	80034a4 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034a0:	2303      	movs	r3, #3
 80034a2:	e020      	b.n	80034e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f003 0304 	and.w	r3, r3, #4
 80034ae:	2b04      	cmp	r3, #4
 80034b0:	d10e      	bne.n	80034d0 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80034b2:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80034b6:	9300      	str	r3, [sp, #0]
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2200      	movs	r2, #0
 80034bc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f814 	bl	80034ee <UART_WaitOnFlagUntilTimeout>
 80034c6:	4603      	mov	r3, r0
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d001      	beq.n	80034d0 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80034cc:	2303      	movs	r3, #3
 80034ce:	e00a      	b.n	80034e6 <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2220      	movs	r2, #32
 80034d4:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	2220      	movs	r2, #32
 80034da:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	2200      	movs	r2, #0
 80034e0:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 80034e4:	2300      	movs	r3, #0
}
 80034e6:	4618      	mov	r0, r3
 80034e8:	3710      	adds	r7, #16
 80034ea:	46bd      	mov	sp, r7
 80034ec:	bd80      	pop	{r7, pc}

080034ee <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80034ee:	b580      	push	{r7, lr}
 80034f0:	b084      	sub	sp, #16
 80034f2:	af00      	add	r7, sp, #0
 80034f4:	60f8      	str	r0, [r7, #12]
 80034f6:	60b9      	str	r1, [r7, #8]
 80034f8:	603b      	str	r3, [r7, #0]
 80034fa:	4613      	mov	r3, r2
 80034fc:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80034fe:	e02a      	b.n	8003556 <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003500:	69bb      	ldr	r3, [r7, #24]
 8003502:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003506:	d026      	beq.n	8003556 <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003508:	f7fd f8fa 	bl	8000700 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	69ba      	ldr	r2, [r7, #24]
 8003514:	429a      	cmp	r2, r3
 8003516:	d302      	bcc.n	800351e <UART_WaitOnFlagUntilTimeout+0x30>
 8003518:	69bb      	ldr	r3, [r7, #24]
 800351a:	2b00      	cmp	r3, #0
 800351c:	d11b      	bne.n	8003556 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800352c:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	689a      	ldr	r2, [r3, #8]
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f022 0201 	bic.w	r2, r2, #1
 800353c:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2220      	movs	r2, #32
 8003542:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8003544:	68fb      	ldr	r3, [r7, #12]
 8003546:	2220      	movs	r2, #32
 8003548:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800354a:	68fb      	ldr	r3, [r7, #12]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8003552:	2303      	movs	r3, #3
 8003554:	e00f      	b.n	8003576 <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	69da      	ldr	r2, [r3, #28]
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	4013      	ands	r3, r2
 8003560:	68ba      	ldr	r2, [r7, #8]
 8003562:	429a      	cmp	r2, r3
 8003564:	bf0c      	ite	eq
 8003566:	2301      	moveq	r3, #1
 8003568:	2300      	movne	r3, #0
 800356a:	b2db      	uxtb	r3, r3
 800356c:	461a      	mov	r2, r3
 800356e:	79fb      	ldrb	r3, [r7, #7]
 8003570:	429a      	cmp	r2, r3
 8003572:	d0c5      	beq.n	8003500 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003574:	2300      	movs	r3, #0
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}

0800357e <SSD1306_DrawBitmap>:

}


void SSD1306_DrawBitmap(int16_t x, int16_t y, const unsigned char* bitmap, int16_t w, int16_t h, uint16_t color)
{
 800357e:	b580      	push	{r7, lr}
 8003580:	b086      	sub	sp, #24
 8003582:	af00      	add	r7, sp, #0
 8003584:	60ba      	str	r2, [r7, #8]
 8003586:	461a      	mov	r2, r3
 8003588:	4603      	mov	r3, r0
 800358a:	81fb      	strh	r3, [r7, #14]
 800358c:	460b      	mov	r3, r1
 800358e:	81bb      	strh	r3, [r7, #12]
 8003590:	4613      	mov	r3, r2
 8003592:	80fb      	strh	r3, [r7, #6]

    int16_t byteWidth = (w + 7) / 8; // Bitmap scanline pad = whole byte
 8003594:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003598:	3307      	adds	r3, #7
 800359a:	2b00      	cmp	r3, #0
 800359c:	da00      	bge.n	80035a0 <SSD1306_DrawBitmap+0x22>
 800359e:	3307      	adds	r3, #7
 80035a0:	10db      	asrs	r3, r3, #3
 80035a2:	823b      	strh	r3, [r7, #16]
    uint8_t byte = 0;
 80035a4:	2300      	movs	r3, #0
 80035a6:	75fb      	strb	r3, [r7, #23]

    for(int16_t j=0; j<h; j++, y++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	82bb      	strh	r3, [r7, #20]
 80035ac:	e044      	b.n	8003638 <SSD1306_DrawBitmap+0xba>
    {
        for(int16_t i=0; i<w; i++)
 80035ae:	2300      	movs	r3, #0
 80035b0:	827b      	strh	r3, [r7, #18]
 80035b2:	e02f      	b.n	8003614 <SSD1306_DrawBitmap+0x96>
        {
            if(i & 7)
 80035b4:	8a7b      	ldrh	r3, [r7, #18]
 80035b6:	f003 0307 	and.w	r3, r3, #7
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d003      	beq.n	80035c6 <SSD1306_DrawBitmap+0x48>
            {
               byte <<= 1;
 80035be:	7dfb      	ldrb	r3, [r7, #23]
 80035c0:	005b      	lsls	r3, r3, #1
 80035c2:	75fb      	strb	r3, [r7, #23]
 80035c4:	e012      	b.n	80035ec <SSD1306_DrawBitmap+0x6e>
            }
            else
            {
               byte = (*(const unsigned char *)(&bitmap[j * byteWidth + i / 8]));
 80035c6:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80035ca:	f9b7 2010 	ldrsh.w	r2, [r7, #16]
 80035ce:	fb02 f203 	mul.w	r2, r2, r3
 80035d2:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	da00      	bge.n	80035dc <SSD1306_DrawBitmap+0x5e>
 80035da:	3307      	adds	r3, #7
 80035dc:	10db      	asrs	r3, r3, #3
 80035de:	b21b      	sxth	r3, r3
 80035e0:	4413      	add	r3, r2
 80035e2:	461a      	mov	r2, r3
 80035e4:	68bb      	ldr	r3, [r7, #8]
 80035e6:	4413      	add	r3, r2
 80035e8:	781b      	ldrb	r3, [r3, #0]
 80035ea:	75fb      	strb	r3, [r7, #23]
            }
            if(byte & 0x80) SSD1306_DrawPixel(x+i, y, color);
 80035ec:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	da09      	bge.n	8003608 <SSD1306_DrawBitmap+0x8a>
 80035f4:	89fa      	ldrh	r2, [r7, #14]
 80035f6:	8a7b      	ldrh	r3, [r7, #18]
 80035f8:	4413      	add	r3, r2
 80035fa:	b29b      	uxth	r3, r3
 80035fc:	89b9      	ldrh	r1, [r7, #12]
 80035fe:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003600:	b2d2      	uxtb	r2, r2
 8003602:	4618      	mov	r0, r3
 8003604:	f000 f92a 	bl	800385c <SSD1306_DrawPixel>
        for(int16_t i=0; i<w; i++)
 8003608:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800360c:	b29b      	uxth	r3, r3
 800360e:	3301      	adds	r3, #1
 8003610:	b29b      	uxth	r3, r3
 8003612:	827b      	strh	r3, [r7, #18]
 8003614:	f9b7 2012 	ldrsh.w	r2, [r7, #18]
 8003618:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800361c:	429a      	cmp	r2, r3
 800361e:	dbc9      	blt.n	80035b4 <SSD1306_DrawBitmap+0x36>
    for(int16_t j=0; j<h; j++, y++)
 8003620:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8003624:	b29b      	uxth	r3, r3
 8003626:	3301      	adds	r3, #1
 8003628:	b29b      	uxth	r3, r3
 800362a:	82bb      	strh	r3, [r7, #20]
 800362c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8003630:	b29b      	uxth	r3, r3
 8003632:	3301      	adds	r3, #1
 8003634:	b29b      	uxth	r3, r3
 8003636:	81bb      	strh	r3, [r7, #12]
 8003638:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 800363c:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8003640:	429a      	cmp	r2, r3
 8003642:	dbb4      	blt.n	80035ae <SSD1306_DrawBitmap+0x30>
        }
    }
}
 8003644:	bf00      	nop
 8003646:	3718      	adds	r7, #24
 8003648:	46bd      	mov	sp, r7
 800364a:	bd80      	pop	{r7, pc}

0800364c <SSD1306_Init>:





uint8_t SSD1306_Init(void) {
 800364c:	b580      	push	{r7, lr}
 800364e:	b082      	sub	sp, #8
 8003650:	af00      	add	r7, sp, #0

	/* Init I2C */
	ssd1306_I2C_Init();
 8003652:	f000 f96d 	bl	8003930 <ssd1306_I2C_Init>
	
	/* Check if LCD connected to I2C */
	if (HAL_I2C_IsDeviceReady(&hi2c1, SSD1306_I2C_ADDR, 1, 20000) != HAL_OK) {
 8003656:	f644 6320 	movw	r3, #20000	; 0x4e20
 800365a:	2201      	movs	r2, #1
 800365c:	2178      	movs	r1, #120	; 0x78
 800365e:	485a      	ldr	r0, [pc, #360]	; (80037c8 <SSD1306_Init+0x17c>)
 8003660:	f7fd fcec 	bl	800103c <HAL_I2C_IsDeviceReady>
 8003664:	4603      	mov	r3, r0
 8003666:	2b00      	cmp	r3, #0
 8003668:	d001      	beq.n	800366e <SSD1306_Init+0x22>
		/* Return false */
		return 0;
 800366a:	2300      	movs	r3, #0
 800366c:	e0a7      	b.n	80037be <SSD1306_Init+0x172>
	}
	
	/* A little delay */
	uint32_t p = 2500;
 800366e:	f640 13c4 	movw	r3, #2500	; 0x9c4
 8003672:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003674:	e002      	b.n	800367c <SSD1306_Init+0x30>
		p--;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	3b01      	subs	r3, #1
 800367a:	607b      	str	r3, [r7, #4]
	while(p>0)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d1f9      	bne.n	8003676 <SSD1306_Init+0x2a>
	
	/* Init LCD */
	SSD1306_WRITECOMMAND(0xAE); //display off
 8003682:	22ae      	movs	r2, #174	; 0xae
 8003684:	2100      	movs	r1, #0
 8003686:	2078      	movs	r0, #120	; 0x78
 8003688:	f000 f9ae 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //Set Memory Addressing Mode   
 800368c:	2220      	movs	r2, #32
 800368e:	2100      	movs	r1, #0
 8003690:	2078      	movs	r0, #120	; 0x78
 8003692:	f000 f9a9 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //00,Horizontal Addressing Mode;01,Vertical Addressing Mode;10,Page Addressing Mode (RESET);11,Invalid
 8003696:	2210      	movs	r2, #16
 8003698:	2100      	movs	r1, #0
 800369a:	2078      	movs	r0, #120	; 0x78
 800369c:	f000 f9a4 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xB0); //Set Page Start Address for Page Addressing Mode,0-7
 80036a0:	22b0      	movs	r2, #176	; 0xb0
 80036a2:	2100      	movs	r1, #0
 80036a4:	2078      	movs	r0, #120	; 0x78
 80036a6:	f000 f99f 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xC8); //Set COM Output Scan Direction
 80036aa:	22c8      	movs	r2, #200	; 0xc8
 80036ac:	2100      	movs	r1, #0
 80036ae:	2078      	movs	r0, #120	; 0x78
 80036b0:	f000 f99a 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //---set low column address
 80036b4:	2200      	movs	r2, #0
 80036b6:	2100      	movs	r1, #0
 80036b8:	2078      	movs	r0, #120	; 0x78
 80036ba:	f000 f995 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x10); //---set high column address
 80036be:	2210      	movs	r2, #16
 80036c0:	2100      	movs	r1, #0
 80036c2:	2078      	movs	r0, #120	; 0x78
 80036c4:	f000 f990 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x40); //--set start line address
 80036c8:	2240      	movs	r2, #64	; 0x40
 80036ca:	2100      	movs	r1, #0
 80036cc:	2078      	movs	r0, #120	; 0x78
 80036ce:	f000 f98b 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x81); //--set contrast control register
 80036d2:	2281      	movs	r2, #129	; 0x81
 80036d4:	2100      	movs	r1, #0
 80036d6:	2078      	movs	r0, #120	; 0x78
 80036d8:	f000 f986 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xFF);
 80036dc:	22ff      	movs	r2, #255	; 0xff
 80036de:	2100      	movs	r1, #0
 80036e0:	2078      	movs	r0, #120	; 0x78
 80036e2:	f000 f981 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA1); //--set segment re-map 0 to 127
 80036e6:	22a1      	movs	r2, #161	; 0xa1
 80036e8:	2100      	movs	r1, #0
 80036ea:	2078      	movs	r0, #120	; 0x78
 80036ec:	f000 f97c 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA6); //--set normal display
 80036f0:	22a6      	movs	r2, #166	; 0xa6
 80036f2:	2100      	movs	r1, #0
 80036f4:	2078      	movs	r0, #120	; 0x78
 80036f6:	f000 f977 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA8); //--set multiplex ratio(1 to 64)
 80036fa:	22a8      	movs	r2, #168	; 0xa8
 80036fc:	2100      	movs	r1, #0
 80036fe:	2078      	movs	r0, #120	; 0x78
 8003700:	f000 f972 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x3F); //
 8003704:	223f      	movs	r2, #63	; 0x3f
 8003706:	2100      	movs	r1, #0
 8003708:	2078      	movs	r0, #120	; 0x78
 800370a:	f000 f96d 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xA4); //0xa4,Output follows RAM content;0xa5,Output ignores RAM content
 800370e:	22a4      	movs	r2, #164	; 0xa4
 8003710:	2100      	movs	r1, #0
 8003712:	2078      	movs	r0, #120	; 0x78
 8003714:	f000 f968 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD3); //-set display offset
 8003718:	22d3      	movs	r2, #211	; 0xd3
 800371a:	2100      	movs	r1, #0
 800371c:	2078      	movs	r0, #120	; 0x78
 800371e:	f000 f963 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x00); //-not offset
 8003722:	2200      	movs	r2, #0
 8003724:	2100      	movs	r1, #0
 8003726:	2078      	movs	r0, #120	; 0x78
 8003728:	f000 f95e 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD5); //--set display clock divide ratio/oscillator frequency
 800372c:	22d5      	movs	r2, #213	; 0xd5
 800372e:	2100      	movs	r1, #0
 8003730:	2078      	movs	r0, #120	; 0x78
 8003732:	f000 f959 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xF0); //--set divide ratio
 8003736:	22f0      	movs	r2, #240	; 0xf0
 8003738:	2100      	movs	r1, #0
 800373a:	2078      	movs	r0, #120	; 0x78
 800373c:	f000 f954 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xD9); //--set pre-charge period
 8003740:	22d9      	movs	r2, #217	; 0xd9
 8003742:	2100      	movs	r1, #0
 8003744:	2078      	movs	r0, #120	; 0x78
 8003746:	f000 f94f 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x22); //
 800374a:	2222      	movs	r2, #34	; 0x22
 800374c:	2100      	movs	r1, #0
 800374e:	2078      	movs	r0, #120	; 0x78
 8003750:	f000 f94a 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDA); //--set com pins hardware configuration
 8003754:	22da      	movs	r2, #218	; 0xda
 8003756:	2100      	movs	r1, #0
 8003758:	2078      	movs	r0, #120	; 0x78
 800375a:	f000 f945 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x12);
 800375e:	2212      	movs	r2, #18
 8003760:	2100      	movs	r1, #0
 8003762:	2078      	movs	r0, #120	; 0x78
 8003764:	f000 f940 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xDB); //--set vcomh
 8003768:	22db      	movs	r2, #219	; 0xdb
 800376a:	2100      	movs	r1, #0
 800376c:	2078      	movs	r0, #120	; 0x78
 800376e:	f000 f93b 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x20); //0x20,0.77xVcc
 8003772:	2220      	movs	r2, #32
 8003774:	2100      	movs	r1, #0
 8003776:	2078      	movs	r0, #120	; 0x78
 8003778:	f000 f936 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x8D); //--set DC-DC enable
 800377c:	228d      	movs	r2, #141	; 0x8d
 800377e:	2100      	movs	r1, #0
 8003780:	2078      	movs	r0, #120	; 0x78
 8003782:	f000 f931 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0x14); //
 8003786:	2214      	movs	r2, #20
 8003788:	2100      	movs	r1, #0
 800378a:	2078      	movs	r0, #120	; 0x78
 800378c:	f000 f92c 	bl	80039e8 <ssd1306_I2C_Write>
	SSD1306_WRITECOMMAND(0xAF); //--turn on SSD1306 panel
 8003790:	22af      	movs	r2, #175	; 0xaf
 8003792:	2100      	movs	r1, #0
 8003794:	2078      	movs	r0, #120	; 0x78
 8003796:	f000 f927 	bl	80039e8 <ssd1306_I2C_Write>
	

	SSD1306_WRITECOMMAND(SSD1306_DEACTIVATE_SCROLL);
 800379a:	222e      	movs	r2, #46	; 0x2e
 800379c:	2100      	movs	r1, #0
 800379e:	2078      	movs	r0, #120	; 0x78
 80037a0:	f000 f922 	bl	80039e8 <ssd1306_I2C_Write>

	/* Clear screen */
	SSD1306_Fill(SSD1306_COLOR_BLACK);
 80037a4:	2000      	movs	r0, #0
 80037a6:	f000 f841 	bl	800382c <SSD1306_Fill>

	/* Set default values */
	SSD1306.CurrentX = 0;
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <SSD1306_Init+0x180>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	801a      	strh	r2, [r3, #0]
	SSD1306.CurrentY = 0;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <SSD1306_Init+0x180>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	805a      	strh	r2, [r3, #2]
	
	/* Initialized OK */
	SSD1306.Initialized = 1;
 80037b6:	4b05      	ldr	r3, [pc, #20]	; (80037cc <SSD1306_Init+0x180>)
 80037b8:	2201      	movs	r2, #1
 80037ba:	715a      	strb	r2, [r3, #5]
	
	/* Return OK */
	return 1;
 80037bc:	2301      	movs	r3, #1
}
 80037be:	4618      	mov	r0, r3
 80037c0:	3708      	adds	r7, #8
 80037c2:	46bd      	mov	sp, r7
 80037c4:	bd80      	pop	{r7, pc}
 80037c6:	bf00      	nop
 80037c8:	20000474 	.word	0x20000474
 80037cc:	20000464 	.word	0x20000464

080037d0 <SSD1306_UpdateScreen>:

void SSD1306_UpdateScreen(void) {
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b082      	sub	sp, #8
 80037d4:	af00      	add	r7, sp, #0
	uint8_t m;
	
	for (m = 0; m < 8; m++) {
 80037d6:	2300      	movs	r3, #0
 80037d8:	71fb      	strb	r3, [r7, #7]
 80037da:	e01d      	b.n	8003818 <SSD1306_UpdateScreen+0x48>
		SSD1306_WRITECOMMAND(0xB0 + m);
 80037dc:	79fb      	ldrb	r3, [r7, #7]
 80037de:	3b50      	subs	r3, #80	; 0x50
 80037e0:	b2db      	uxtb	r3, r3
 80037e2:	461a      	mov	r2, r3
 80037e4:	2100      	movs	r1, #0
 80037e6:	2078      	movs	r0, #120	; 0x78
 80037e8:	f000 f8fe 	bl	80039e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x00);
 80037ec:	2200      	movs	r2, #0
 80037ee:	2100      	movs	r1, #0
 80037f0:	2078      	movs	r0, #120	; 0x78
 80037f2:	f000 f8f9 	bl	80039e8 <ssd1306_I2C_Write>
		SSD1306_WRITECOMMAND(0x10);
 80037f6:	2210      	movs	r2, #16
 80037f8:	2100      	movs	r1, #0
 80037fa:	2078      	movs	r0, #120	; 0x78
 80037fc:	f000 f8f4 	bl	80039e8 <ssd1306_I2C_Write>
		
		/* Write multi data */
		ssd1306_I2C_WriteMulti(SSD1306_I2C_ADDR, 0x40, &SSD1306_Buffer[SSD1306_WIDTH * m], SSD1306_WIDTH);
 8003800:	79fb      	ldrb	r3, [r7, #7]
 8003802:	01db      	lsls	r3, r3, #7
 8003804:	4a08      	ldr	r2, [pc, #32]	; (8003828 <SSD1306_UpdateScreen+0x58>)
 8003806:	441a      	add	r2, r3
 8003808:	2380      	movs	r3, #128	; 0x80
 800380a:	2140      	movs	r1, #64	; 0x40
 800380c:	2078      	movs	r0, #120	; 0x78
 800380e:	f000 f8a3 	bl	8003958 <ssd1306_I2C_WriteMulti>
	for (m = 0; m < 8; m++) {
 8003812:	79fb      	ldrb	r3, [r7, #7]
 8003814:	3301      	adds	r3, #1
 8003816:	71fb      	strb	r3, [r7, #7]
 8003818:	79fb      	ldrb	r3, [r7, #7]
 800381a:	2b07      	cmp	r3, #7
 800381c:	d9de      	bls.n	80037dc <SSD1306_UpdateScreen+0xc>
	}
}
 800381e:	bf00      	nop
 8003820:	3708      	adds	r7, #8
 8003822:	46bd      	mov	sp, r7
 8003824:	bd80      	pop	{r7, pc}
 8003826:	bf00      	nop
 8003828:	20000064 	.word	0x20000064

0800382c <SSD1306_Fill>:
	for (i = 0; i < sizeof(SSD1306_Buffer); i++) {
		SSD1306_Buffer[i] = ~SSD1306_Buffer[i];
	}
}

void SSD1306_Fill(SSD1306_COLOR_t color) {
 800382c:	b580      	push	{r7, lr}
 800382e:	b082      	sub	sp, #8
 8003830:	af00      	add	r7, sp, #0
 8003832:	4603      	mov	r3, r0
 8003834:	71fb      	strb	r3, [r7, #7]
	/* Set memory */
	memset(SSD1306_Buffer, (color == SSD1306_COLOR_BLACK) ? 0x00 : 0xFF, sizeof(SSD1306_Buffer));
 8003836:	79fb      	ldrb	r3, [r7, #7]
 8003838:	2b00      	cmp	r3, #0
 800383a:	d101      	bne.n	8003840 <SSD1306_Fill+0x14>
 800383c:	2300      	movs	r3, #0
 800383e:	e000      	b.n	8003842 <SSD1306_Fill+0x16>
 8003840:	23ff      	movs	r3, #255	; 0xff
 8003842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003846:	4619      	mov	r1, r3
 8003848:	4803      	ldr	r0, [pc, #12]	; (8003858 <SSD1306_Fill+0x2c>)
 800384a:	f000 fd41 	bl	80042d0 <memset>
}
 800384e:	bf00      	nop
 8003850:	3708      	adds	r7, #8
 8003852:	46bd      	mov	sp, r7
 8003854:	bd80      	pop	{r7, pc}
 8003856:	bf00      	nop
 8003858:	20000064 	.word	0x20000064

0800385c <SSD1306_DrawPixel>:

void SSD1306_DrawPixel(uint16_t x, uint16_t y, SSD1306_COLOR_t color) {
 800385c:	b480      	push	{r7}
 800385e:	b083      	sub	sp, #12
 8003860:	af00      	add	r7, sp, #0
 8003862:	4603      	mov	r3, r0
 8003864:	80fb      	strh	r3, [r7, #6]
 8003866:	460b      	mov	r3, r1
 8003868:	80bb      	strh	r3, [r7, #4]
 800386a:	4613      	mov	r3, r2
 800386c:	70fb      	strb	r3, [r7, #3]
	if (
 800386e:	88fb      	ldrh	r3, [r7, #6]
 8003870:	2b7f      	cmp	r3, #127	; 0x7f
 8003872:	d848      	bhi.n	8003906 <SSD1306_DrawPixel+0xaa>
		x >= SSD1306_WIDTH ||
 8003874:	88bb      	ldrh	r3, [r7, #4]
 8003876:	2b3f      	cmp	r3, #63	; 0x3f
 8003878:	d845      	bhi.n	8003906 <SSD1306_DrawPixel+0xaa>
		/* Error */
		return;
	}
	
	/* Check if pixels are inverted */
	if (SSD1306.Inverted) {
 800387a:	4b26      	ldr	r3, [pc, #152]	; (8003914 <SSD1306_DrawPixel+0xb8>)
 800387c:	791b      	ldrb	r3, [r3, #4]
 800387e:	2b00      	cmp	r3, #0
 8003880:	d006      	beq.n	8003890 <SSD1306_DrawPixel+0x34>
		color = (SSD1306_COLOR_t)!color;
 8003882:	78fb      	ldrb	r3, [r7, #3]
 8003884:	2b00      	cmp	r3, #0
 8003886:	bf0c      	ite	eq
 8003888:	2301      	moveq	r3, #1
 800388a:	2300      	movne	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	70fb      	strb	r3, [r7, #3]
	}
	
	/* Set color */
	if (color == SSD1306_COLOR_WHITE) {
 8003890:	78fb      	ldrb	r3, [r7, #3]
 8003892:	2b01      	cmp	r3, #1
 8003894:	d11a      	bne.n	80038cc <SSD1306_DrawPixel+0x70>
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] |= 1 << (y % 8);
 8003896:	88fa      	ldrh	r2, [r7, #6]
 8003898:	88bb      	ldrh	r3, [r7, #4]
 800389a:	08db      	lsrs	r3, r3, #3
 800389c:	b298      	uxth	r0, r3
 800389e:	4603      	mov	r3, r0
 80038a0:	01db      	lsls	r3, r3, #7
 80038a2:	4413      	add	r3, r2
 80038a4:	4a1c      	ldr	r2, [pc, #112]	; (8003918 <SSD1306_DrawPixel+0xbc>)
 80038a6:	5cd3      	ldrb	r3, [r2, r3]
 80038a8:	b25a      	sxtb	r2, r3
 80038aa:	88bb      	ldrh	r3, [r7, #4]
 80038ac:	f003 0307 	and.w	r3, r3, #7
 80038b0:	2101      	movs	r1, #1
 80038b2:	fa01 f303 	lsl.w	r3, r1, r3
 80038b6:	b25b      	sxtb	r3, r3
 80038b8:	4313      	orrs	r3, r2
 80038ba:	b259      	sxtb	r1, r3
 80038bc:	88fa      	ldrh	r2, [r7, #6]
 80038be:	4603      	mov	r3, r0
 80038c0:	01db      	lsls	r3, r3, #7
 80038c2:	4413      	add	r3, r2
 80038c4:	b2c9      	uxtb	r1, r1
 80038c6:	4a14      	ldr	r2, [pc, #80]	; (8003918 <SSD1306_DrawPixel+0xbc>)
 80038c8:	54d1      	strb	r1, [r2, r3]
 80038ca:	e01d      	b.n	8003908 <SSD1306_DrawPixel+0xac>
	} else {
		SSD1306_Buffer[x + (y / 8) * SSD1306_WIDTH] &= ~(1 << (y % 8));
 80038cc:	88fa      	ldrh	r2, [r7, #6]
 80038ce:	88bb      	ldrh	r3, [r7, #4]
 80038d0:	08db      	lsrs	r3, r3, #3
 80038d2:	b298      	uxth	r0, r3
 80038d4:	4603      	mov	r3, r0
 80038d6:	01db      	lsls	r3, r3, #7
 80038d8:	4413      	add	r3, r2
 80038da:	4a0f      	ldr	r2, [pc, #60]	; (8003918 <SSD1306_DrawPixel+0xbc>)
 80038dc:	5cd3      	ldrb	r3, [r2, r3]
 80038de:	b25a      	sxtb	r2, r3
 80038e0:	88bb      	ldrh	r3, [r7, #4]
 80038e2:	f003 0307 	and.w	r3, r3, #7
 80038e6:	2101      	movs	r1, #1
 80038e8:	fa01 f303 	lsl.w	r3, r1, r3
 80038ec:	b25b      	sxtb	r3, r3
 80038ee:	43db      	mvns	r3, r3
 80038f0:	b25b      	sxtb	r3, r3
 80038f2:	4013      	ands	r3, r2
 80038f4:	b259      	sxtb	r1, r3
 80038f6:	88fa      	ldrh	r2, [r7, #6]
 80038f8:	4603      	mov	r3, r0
 80038fa:	01db      	lsls	r3, r3, #7
 80038fc:	4413      	add	r3, r2
 80038fe:	b2c9      	uxtb	r1, r1
 8003900:	4a05      	ldr	r2, [pc, #20]	; (8003918 <SSD1306_DrawPixel+0xbc>)
 8003902:	54d1      	strb	r1, [r2, r3]
 8003904:	e000      	b.n	8003908 <SSD1306_DrawPixel+0xac>
		return;
 8003906:	bf00      	nop
	}
}
 8003908:	370c      	adds	r7, #12
 800390a:	46bd      	mov	sp, r7
 800390c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003910:	4770      	bx	lr
 8003912:	bf00      	nop
 8003914:	20000464 	.word	0x20000464
 8003918:	20000064 	.word	0x20000064

0800391c <SSD1306_Clear>:
}
 


void SSD1306_Clear (void)
{
 800391c:	b580      	push	{r7, lr}
 800391e:	af00      	add	r7, sp, #0
	SSD1306_Fill (0);
 8003920:	2000      	movs	r0, #0
 8003922:	f7ff ff83 	bl	800382c <SSD1306_Fill>
    SSD1306_UpdateScreen();
 8003926:	f7ff ff53 	bl	80037d0 <SSD1306_UpdateScreen>
}
 800392a:	bf00      	nop
 800392c:	bd80      	pop	{r7, pc}
	...

08003930 <ssd1306_I2C_Init>:
//  _| |_ / /_| |____ 
// |_____|____|\_____|
//
/////////////////////////////////////////////////////////////////////////////////////////////////////////

void ssd1306_I2C_Init() {
 8003930:	b480      	push	{r7}
 8003932:	b083      	sub	sp, #12
 8003934:	af00      	add	r7, sp, #0
	//MX_I2C1_Init();
	uint32_t p = 250000;
 8003936:	4b07      	ldr	r3, [pc, #28]	; (8003954 <ssd1306_I2C_Init+0x24>)
 8003938:	607b      	str	r3, [r7, #4]
	while(p>0)
 800393a:	e002      	b.n	8003942 <ssd1306_I2C_Init+0x12>
		p--;
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	3b01      	subs	r3, #1
 8003940:	607b      	str	r3, [r7, #4]
	while(p>0)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2b00      	cmp	r3, #0
 8003946:	d1f9      	bne.n	800393c <ssd1306_I2C_Init+0xc>
	//HAL_I2C_DeInit(&hi2c1);
	//p = 250000;
	//while(p>0)
	//	p--;
	//MX_I2C1_Init();
}
 8003948:	bf00      	nop
 800394a:	370c      	adds	r7, #12
 800394c:	46bd      	mov	sp, r7
 800394e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003952:	4770      	bx	lr
 8003954:	0003d090 	.word	0x0003d090

08003958 <ssd1306_I2C_WriteMulti>:

void ssd1306_I2C_WriteMulti(uint8_t address, uint8_t reg, uint8_t* data, uint16_t count) {
 8003958:	b590      	push	{r4, r7, lr}
 800395a:	b0c7      	sub	sp, #284	; 0x11c
 800395c:	af02      	add	r7, sp, #8
 800395e:	4604      	mov	r4, r0
 8003960:	4608      	mov	r0, r1
 8003962:	4639      	mov	r1, r7
 8003964:	600a      	str	r2, [r1, #0]
 8003966:	4619      	mov	r1, r3
 8003968:	1dfb      	adds	r3, r7, #7
 800396a:	4622      	mov	r2, r4
 800396c:	701a      	strb	r2, [r3, #0]
 800396e:	1dbb      	adds	r3, r7, #6
 8003970:	4602      	mov	r2, r0
 8003972:	701a      	strb	r2, [r3, #0]
 8003974:	1d3b      	adds	r3, r7, #4
 8003976:	460a      	mov	r2, r1
 8003978:	801a      	strh	r2, [r3, #0]
uint8_t dt[256];
dt[0] = reg;
 800397a:	f107 030c 	add.w	r3, r7, #12
 800397e:	1dba      	adds	r2, r7, #6
 8003980:	7812      	ldrb	r2, [r2, #0]
 8003982:	701a      	strb	r2, [r3, #0]
uint8_t i;
for(i = 0; i < count; i++)
 8003984:	2300      	movs	r3, #0
 8003986:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 800398a:	e010      	b.n	80039ae <ssd1306_I2C_WriteMulti+0x56>
dt[i+1] = data[i];
 800398c:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 8003990:	463a      	mov	r2, r7
 8003992:	6812      	ldr	r2, [r2, #0]
 8003994:	441a      	add	r2, r3
 8003996:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 800399a:	3301      	adds	r3, #1
 800399c:	7811      	ldrb	r1, [r2, #0]
 800399e:	f107 020c 	add.w	r2, r7, #12
 80039a2:	54d1      	strb	r1, [r2, r3]
for(i = 0; i < count; i++)
 80039a4:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80039a8:	3301      	adds	r3, #1
 80039aa:	f887 310f 	strb.w	r3, [r7, #271]	; 0x10f
 80039ae:	f897 310f 	ldrb.w	r3, [r7, #271]	; 0x10f
 80039b2:	b29b      	uxth	r3, r3
 80039b4:	1d3a      	adds	r2, r7, #4
 80039b6:	8812      	ldrh	r2, [r2, #0]
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d8e7      	bhi.n	800398c <ssd1306_I2C_WriteMulti+0x34>
HAL_I2C_Master_Transmit(&hi2c1, address, dt, count+1, 10);
 80039bc:	1dfb      	adds	r3, r7, #7
 80039be:	781b      	ldrb	r3, [r3, #0]
 80039c0:	b299      	uxth	r1, r3
 80039c2:	1d3b      	adds	r3, r7, #4
 80039c4:	881b      	ldrh	r3, [r3, #0]
 80039c6:	3301      	adds	r3, #1
 80039c8:	b298      	uxth	r0, r3
 80039ca:	f107 020c 	add.w	r2, r7, #12
 80039ce:	230a      	movs	r3, #10
 80039d0:	9300      	str	r3, [sp, #0]
 80039d2:	4603      	mov	r3, r0
 80039d4:	4803      	ldr	r0, [pc, #12]	; (80039e4 <ssd1306_I2C_WriteMulti+0x8c>)
 80039d6:	f7fd fa3d 	bl	8000e54 <HAL_I2C_Master_Transmit>
}
 80039da:	bf00      	nop
 80039dc:	f507 778a 	add.w	r7, r7, #276	; 0x114
 80039e0:	46bd      	mov	sp, r7
 80039e2:	bd90      	pop	{r4, r7, pc}
 80039e4:	20000474 	.word	0x20000474

080039e8 <ssd1306_I2C_Write>:


void ssd1306_I2C_Write(uint8_t address, uint8_t reg, uint8_t data) {
 80039e8:	b580      	push	{r7, lr}
 80039ea:	b086      	sub	sp, #24
 80039ec:	af02      	add	r7, sp, #8
 80039ee:	4603      	mov	r3, r0
 80039f0:	71fb      	strb	r3, [r7, #7]
 80039f2:	460b      	mov	r3, r1
 80039f4:	71bb      	strb	r3, [r7, #6]
 80039f6:	4613      	mov	r3, r2
 80039f8:	717b      	strb	r3, [r7, #5]
	uint8_t dt[2];
	dt[0] = reg;
 80039fa:	79bb      	ldrb	r3, [r7, #6]
 80039fc:	733b      	strb	r3, [r7, #12]
	dt[1] = data;
 80039fe:	797b      	ldrb	r3, [r7, #5]
 8003a00:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, address, dt, 2, 10);
 8003a02:	79fb      	ldrb	r3, [r7, #7]
 8003a04:	b299      	uxth	r1, r3
 8003a06:	f107 020c 	add.w	r2, r7, #12
 8003a0a:	230a      	movs	r3, #10
 8003a0c:	9300      	str	r3, [sp, #0]
 8003a0e:	2302      	movs	r3, #2
 8003a10:	4803      	ldr	r0, [pc, #12]	; (8003a20 <ssd1306_I2C_Write+0x38>)
 8003a12:	f7fd fa1f 	bl	8000e54 <HAL_I2C_Master_Transmit>
}
 8003a16:	bf00      	nop
 8003a18:	3710      	adds	r7, #16
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	bd80      	pop	{r7, pc}
 8003a1e:	bf00      	nop
 8003a20:	20000474 	.word	0x20000474

08003a24 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003a24:	b580      	push	{r7, lr}
 8003a26:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003a28:	f7fc fdfe 	bl	8000628 <HAL_Init>

  /* USER CODE BEGIN Init */
  Sch_Init(&Sch_Cfg);
 8003a2c:	4807      	ldr	r0, [pc, #28]	; (8003a4c <main+0x28>)
 8003a2e:	f000 fbb7 	bl	80041a0 <Sch_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8003a32:	f000 f80d 	bl	8003a50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003a36:	f000 f8f3 	bl	8003c20 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8003a3a:	f000 f8c1 	bl	8003bc0 <MX_USART2_UART_Init>
  MX_I2C1_Init();
 8003a3e:	f000 f87f 	bl	8003b40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  SSD1306_Init();
 8003a42:	f7ff fe03 	bl	800364c <SSD1306_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Sch_Main();
 8003a46:	f000 fbbb 	bl	80041c0 <Sch_Main>
 8003a4a:	e7fc      	b.n	8003a46 <main+0x22>
 8003a4c:	20000040 	.word	0x20000040

08003a50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003a50:	b580      	push	{r7, lr}
 8003a52:	b0b8      	sub	sp, #224	; 0xe0
 8003a54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003a56:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003a5a:	2244      	movs	r2, #68	; 0x44
 8003a5c:	2100      	movs	r1, #0
 8003a5e:	4618      	mov	r0, r3
 8003a60:	f000 fc36 	bl	80042d0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003a64:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003a68:	2200      	movs	r2, #0
 8003a6a:	601a      	str	r2, [r3, #0]
 8003a6c:	605a      	str	r2, [r3, #4]
 8003a6e:	609a      	str	r2, [r3, #8]
 8003a70:	60da      	str	r2, [r3, #12]
 8003a72:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003a74:	463b      	mov	r3, r7
 8003a76:	2288      	movs	r2, #136	; 0x88
 8003a78:	2100      	movs	r1, #0
 8003a7a:	4618      	mov	r0, r3
 8003a7c:	f000 fc28 	bl	80042d0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003a80:	2302      	movs	r3, #2
 8003a82:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003a86:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a8a:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003a8e:	2310      	movs	r3, #16
 8003a90:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003a94:	2302      	movs	r3, #2
 8003a96:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003a9a:	2302      	movs	r3, #2
 8003a9c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003aa6:	230a      	movs	r3, #10
 8003aa8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003aac:	2307      	movs	r3, #7
 8003aae:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003ab8:	2302      	movs	r3, #2
 8003aba:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003abe:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8003ac2:	4618      	mov	r0, r3
 8003ac4:	f7fd fe32 	bl	800172c <HAL_RCC_OscConfig>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8003ace:	f000 fa19 	bl	8003f04 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003ad2:	230f      	movs	r3, #15
 8003ad4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003ad8:	2303      	movs	r3, #3
 8003ada:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003ade:	2300      	movs	r3, #0
 8003ae0:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8003aea:	2300      	movs	r3, #0
 8003aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003af0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8003af4:	2104      	movs	r1, #4
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fe f9c8 	bl	8001e8c <HAL_RCC_ClockConfig>
 8003afc:	4603      	mov	r3, r0
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d001      	beq.n	8003b06 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8003b02:	f000 f9ff 	bl	8003f04 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2|RCC_PERIPHCLK_I2C1;
 8003b06:	2342      	movs	r3, #66	; 0x42
 8003b08:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8003b0a:	2300      	movs	r3, #0
 8003b0c:	63fb      	str	r3, [r7, #60]	; 0x3c
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8003b0e:	2300      	movs	r3, #0
 8003b10:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003b12:	463b      	mov	r3, r7
 8003b14:	4618      	mov	r0, r3
 8003b16:	f7fe fbbd 	bl	8002294 <HAL_RCCEx_PeriphCLKConfig>
 8003b1a:	4603      	mov	r3, r0
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d001      	beq.n	8003b24 <SystemClock_Config+0xd4>
  {
    Error_Handler();
 8003b20:	f000 f9f0 	bl	8003f04 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8003b24:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003b28:	f7fd fdaa 	bl	8001680 <HAL_PWREx_ControlVoltageScaling>
 8003b2c:	4603      	mov	r3, r0
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d001      	beq.n	8003b36 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 8003b32:	f000 f9e7 	bl	8003f04 <Error_Handler>
  }
}
 8003b36:	bf00      	nop
 8003b38:	37e0      	adds	r7, #224	; 0xe0
 8003b3a:	46bd      	mov	sp, r7
 8003b3c:	bd80      	pop	{r7, pc}
	...

08003b40 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8003b44:	4b1b      	ldr	r3, [pc, #108]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b46:	4a1c      	ldr	r2, [pc, #112]	; (8003bb8 <MX_I2C1_Init+0x78>)
 8003b48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00702991;
 8003b4a:	4b1a      	ldr	r3, [pc, #104]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b4c:	4a1b      	ldr	r2, [pc, #108]	; (8003bbc <MX_I2C1_Init+0x7c>)
 8003b4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 240;
 8003b50:	4b18      	ldr	r3, [pc, #96]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b52:	22f0      	movs	r2, #240	; 0xf0
 8003b54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8003b56:	4b17      	ldr	r3, [pc, #92]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b58:	2201      	movs	r2, #1
 8003b5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8003b5c:	4b15      	ldr	r3, [pc, #84]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8003b62:	4b14      	ldr	r3, [pc, #80]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b64:	2200      	movs	r2, #0
 8003b66:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8003b68:	4b12      	ldr	r3, [pc, #72]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b6a:	2200      	movs	r2, #0
 8003b6c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8003b6e:	4b11      	ldr	r3, [pc, #68]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b70:	2200      	movs	r2, #0
 8003b72:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8003b74:	4b0f      	ldr	r3, [pc, #60]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b76:	2200      	movs	r2, #0
 8003b78:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8003b7a:	480e      	ldr	r0, [pc, #56]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b7c:	f7fd f8db 	bl	8000d36 <HAL_I2C_Init>
 8003b80:	4603      	mov	r3, r0
 8003b82:	2b00      	cmp	r3, #0
 8003b84:	d001      	beq.n	8003b8a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8003b86:	f000 f9bd 	bl	8003f04 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8003b8a:	2100      	movs	r1, #0
 8003b8c:	4809      	ldr	r0, [pc, #36]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003b8e:	f7fd fcd1 	bl	8001534 <HAL_I2CEx_ConfigAnalogFilter>
 8003b92:	4603      	mov	r3, r0
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d001      	beq.n	8003b9c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8003b98:	f000 f9b4 	bl	8003f04 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8003b9c:	2100      	movs	r1, #0
 8003b9e:	4805      	ldr	r0, [pc, #20]	; (8003bb4 <MX_I2C1_Init+0x74>)
 8003ba0:	f7fd fd13 	bl	80015ca <HAL_I2CEx_ConfigDigitalFilter>
 8003ba4:	4603      	mov	r3, r0
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d001      	beq.n	8003bae <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8003baa:	f000 f9ab 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8003bae:	bf00      	nop
 8003bb0:	bd80      	pop	{r7, pc}
 8003bb2:	bf00      	nop
 8003bb4:	20000474 	.word	0x20000474
 8003bb8:	40005400 	.word	0x40005400
 8003bbc:	00702991 	.word	0x00702991

08003bc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8003bc4:	4b14      	ldr	r3, [pc, #80]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <MX_USART2_UART_Init+0x5c>)
 8003bc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8003bca:	4b13      	ldr	r3, [pc, #76]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bcc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003bd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8003bd2:	4b11      	ldr	r3, [pc, #68]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8003bd8:	4b0f      	ldr	r3, [pc, #60]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bda:	2200      	movs	r2, #0
 8003bdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8003bde:	4b0e      	ldr	r3, [pc, #56]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003be0:	2200      	movs	r2, #0
 8003be2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8003be4:	4b0c      	ldr	r3, [pc, #48]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003be6:	220c      	movs	r2, #12
 8003be8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003bea:	4b0b      	ldr	r3, [pc, #44]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bec:	2200      	movs	r2, #0
 8003bee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8003bf0:	4b09      	ldr	r3, [pc, #36]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8003bf6:	4b08      	ldr	r3, [pc, #32]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8003bfc:	4b06      	ldr	r3, [pc, #24]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003bfe:	2200      	movs	r2, #0
 8003c00:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8003c02:	4805      	ldr	r0, [pc, #20]	; (8003c18 <MX_USART2_UART_Init+0x58>)
 8003c04:	f7fe fff6 	bl	8002bf4 <HAL_UART_Init>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d001      	beq.n	8003c12 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8003c0e:	f000 f979 	bl	8003f04 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8003c12:	bf00      	nop
 8003c14:	bd80      	pop	{r7, pc}
 8003c16:	bf00      	nop
 8003c18:	200004c0 	.word	0x200004c0
 8003c1c:	40004400 	.word	0x40004400

08003c20 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003c20:	b580      	push	{r7, lr}
 8003c22:	b08a      	sub	sp, #40	; 0x28
 8003c24:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c26:	f107 0314 	add.w	r3, r7, #20
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	601a      	str	r2, [r3, #0]
 8003c2e:	605a      	str	r2, [r3, #4]
 8003c30:	609a      	str	r2, [r3, #8]
 8003c32:	60da      	str	r2, [r3, #12]
 8003c34:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003c36:	4b45      	ldr	r3, [pc, #276]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c38:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c3a:	4a44      	ldr	r2, [pc, #272]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c3c:	f043 0304 	orr.w	r3, r3, #4
 8003c40:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c42:	4b42      	ldr	r3, [pc, #264]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c46:	f003 0304 	and.w	r3, r3, #4
 8003c4a:	613b      	str	r3, [r7, #16]
 8003c4c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003c4e:	4b3f      	ldr	r3, [pc, #252]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c50:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c52:	4a3e      	ldr	r2, [pc, #248]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003c58:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c5a:	4b3c      	ldr	r3, [pc, #240]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c5c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c62:	60fb      	str	r3, [r7, #12]
 8003c64:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c66:	4b39      	ldr	r3, [pc, #228]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c68:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c6a:	4a38      	ldr	r2, [pc, #224]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c6c:	f043 0301 	orr.w	r3, r3, #1
 8003c70:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c72:	4b36      	ldr	r3, [pc, #216]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c74:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c76:	f003 0301 	and.w	r3, r3, #1
 8003c7a:	60bb      	str	r3, [r7, #8]
 8003c7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c7e:	4b33      	ldr	r3, [pc, #204]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c82:	4a32      	ldr	r2, [pc, #200]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c84:	f043 0302 	orr.w	r3, r3, #2
 8003c88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003c8a:	4b30      	ldr	r3, [pc, #192]	; (8003d4c <MX_GPIO_Init+0x12c>)
 8003c8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c8e:	f003 0302 	and.w	r3, r3, #2
 8003c92:	607b      	str	r3, [r7, #4]
 8003c94:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREED_LED_Pin|PED_GREEN_LED_Pin|PED_RED_LED_Pin, GPIO_PIN_RESET);
 8003c96:	2200      	movs	r2, #0
 8003c98:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8003c9c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003ca0:	f7fc fff4 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin|YELLOW_LIGHT_LED_Pin|RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8003caa:	4829      	ldr	r0, [pc, #164]	; (8003d50 <MX_GPIO_Init+0x130>)
 8003cac:	f7fc ffee 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PED_REQUEST_LED_GPIO_Port, PED_REQUEST_LED_Pin, GPIO_PIN_RESET);
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003cb6:	4827      	ldr	r0, [pc, #156]	; (8003d54 <MX_GPIO_Init+0x134>)
 8003cb8:	f7fc ffe8 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8003cbc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cc0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8003cc2:	4b25      	ldr	r3, [pc, #148]	; (8003d58 <MX_GPIO_Init+0x138>)
 8003cc4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8003cca:	f107 0314 	add.w	r3, r7, #20
 8003cce:	4619      	mov	r1, r3
 8003cd0:	481f      	ldr	r0, [pc, #124]	; (8003d50 <MX_GPIO_Init+0x130>)
 8003cd2:	f7fc fe33 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREED_LED_Pin PED_GREEN_LED_Pin PED_RED_LED_Pin */
  GPIO_InitStruct.Pin = GREED_LED_Pin|PED_GREEN_LED_Pin|PED_RED_LED_Pin;
 8003cd6:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8003cda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cdc:	2301      	movs	r3, #1
 8003cde:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce0:	2300      	movs	r3, #0
 8003ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ce8:	f107 0314 	add.w	r3, r7, #20
 8003cec:	4619      	mov	r1, r3
 8003cee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003cf2:	f7fc fe23 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LIGHT_LED_Pin YELLOW_LIGHT_LED_Pin RED_LIGHT_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LIGHT_LED_Pin|YELLOW_LIGHT_LED_Pin|RED_LIGHT_LED_Pin;
 8003cf6:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8003cfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfc:	2301      	movs	r3, #1
 8003cfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d04:	2300      	movs	r3, #0
 8003d06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d08:	f107 0314 	add.w	r3, r7, #20
 8003d0c:	4619      	mov	r1, r3
 8003d0e:	4810      	ldr	r0, [pc, #64]	; (8003d50 <MX_GPIO_Init+0x130>)
 8003d10:	f7fc fe14 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : PED_REQUEST_LED_Pin */
  GPIO_InitStruct.Pin = PED_REQUEST_LED_Pin;
 8003d14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003d18:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d1a:	2301      	movs	r3, #1
 8003d1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d22:	2300      	movs	r3, #0
 8003d24:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PED_REQUEST_LED_GPIO_Port, &GPIO_InitStruct);
 8003d26:	f107 0314 	add.w	r3, r7, #20
 8003d2a:	4619      	mov	r1, r3
 8003d2c:	4809      	ldr	r0, [pc, #36]	; (8003d54 <MX_GPIO_Init+0x134>)
 8003d2e:	f7fc fe05 	bl	800093c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8003d32:	2200      	movs	r2, #0
 8003d34:	2101      	movs	r1, #1
 8003d36:	2028      	movs	r0, #40	; 0x28
 8003d38:	f7fc fdc9 	bl	80008ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8003d3c:	2028      	movs	r0, #40	; 0x28
 8003d3e:	f7fc fde2 	bl	8000906 <HAL_NVIC_EnableIRQ>

}
 8003d42:	bf00      	nop
 8003d44:	3728      	adds	r7, #40	; 0x28
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}
 8003d4a:	bf00      	nop
 8003d4c:	40021000 	.word	0x40021000
 8003d50:	48000800 	.word	0x48000800
 8003d54:	48000400 	.word	0x48000400
 8003d58:	10210000 	.word	0x10210000

08003d5c <Task_10ms>:

/* USER CODE BEGIN 4 */
void Task_10ms(void) {
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0

};
 8003d60:	bf00      	nop
 8003d62:	46bd      	mov	sp, r7
 8003d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d68:	4770      	bx	lr
	...

08003d6c <Task_15ms>:

void Task_15ms(void) {
 8003d6c:	b580      	push	{r7, lr}
 8003d6e:	b082      	sub	sp, #8
 8003d70:	af02      	add	r7, sp, #8
	SSD1306_Clear();
 8003d72:	f7ff fdd3 	bl	800391c <SSD1306_Clear>
	SSD1306_DrawBitmap(0, 0, pedestrian_crossing_2, 128, 64, 1);
 8003d76:	2301      	movs	r3, #1
 8003d78:	9301      	str	r3, [sp, #4]
 8003d7a:	2340      	movs	r3, #64	; 0x40
 8003d7c:	9300      	str	r3, [sp, #0]
 8003d7e:	2380      	movs	r3, #128	; 0x80
 8003d80:	4a04      	ldr	r2, [pc, #16]	; (8003d94 <Task_15ms+0x28>)
 8003d82:	2100      	movs	r1, #0
 8003d84:	2000      	movs	r0, #0
 8003d86:	f7ff fbfa 	bl	800357e <SSD1306_DrawBitmap>
//	SSD1306_GotoXY(0,0);
//	SSD1306_Puts("CROSS", &Font_11x18, 1);
	SSD1306_UpdateScreen();
 8003d8a:	f7ff fd21 	bl	80037d0 <SSD1306_UpdateScreen>
//	SSD1306_UpdateScreen();
//
//	SSD1306_Clear();
//	SSD1306_DrawBitmap(0, 0, pedestrian_crossing_frame_4, 128, 64, 1);
//	SSD1306_UpdateScreen();
};
 8003d8e:	bf00      	nop
 8003d90:	46bd      	mov	sp, r7
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	080042f8 	.word	0x080042f8

08003d98 <PedestrianLight_Task_500ms>:

void PedestrianLight_Task_500ms(void) {
 8003d98:	b580      	push	{r7, lr}
 8003d9a:	af00      	add	r7, sp, #0
	if(sig_pedestrian_request == STD_HIGH){
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <PedestrianLight_Task_500ms+0x28>)
 8003d9e:	781b      	ldrb	r3, [r3, #0]
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	d105      	bne.n	8003db0 <PedestrianLight_Task_500ms+0x18>
		HAL_GPIO_TogglePin(GPIOB, PED_REQUEST_LED_Pin);
 8003da4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003da8:	4806      	ldr	r0, [pc, #24]	; (8003dc4 <PedestrianLight_Task_500ms+0x2c>)
 8003daa:	f7fc ff87 	bl	8000cbc <HAL_GPIO_TogglePin>
	}
	else {
		HAL_GPIO_WritePin(GPIOB, PED_REQUEST_LED_Pin, GPIO_PIN_RESET);
	}
};
 8003dae:	e005      	b.n	8003dbc <PedestrianLight_Task_500ms+0x24>
		HAL_GPIO_WritePin(GPIOB, PED_REQUEST_LED_Pin, GPIO_PIN_RESET);
 8003db0:	2200      	movs	r2, #0
 8003db2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8003db6:	4803      	ldr	r0, [pc, #12]	; (8003dc4 <PedestrianLight_Task_500ms+0x2c>)
 8003db8:	f7fc ff68 	bl	8000c8c <HAL_GPIO_WritePin>
};
 8003dbc:	bf00      	nop
 8003dbe:	bd80      	pop	{r7, pc}
 8003dc0:	20000544 	.word	0x20000544
 8003dc4:	48000400 	.word	0x48000400

08003dc8 <CarTrafficLight_Task_1000ms>:

void CarTrafficLight_Task_1000ms(void) {
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	af00      	add	r7, sp, #0
	static uint8_t CL_state_count;//time in seconds spent in each state
	static uint8_t CL_cycle_count;//time in sescond for one traffic light cycle (red->yellow->green)
	CL_cycle_count++;
 8003dcc:	4b49      	ldr	r3, [pc, #292]	; (8003ef4 <CarTrafficLight_Task_1000ms+0x12c>)
 8003dce:	781b      	ldrb	r3, [r3, #0]
 8003dd0:	3301      	adds	r3, #1
 8003dd2:	b2da      	uxtb	r2, r3
 8003dd4:	4b47      	ldr	r3, [pc, #284]	; (8003ef4 <CarTrafficLight_Task_1000ms+0x12c>)
 8003dd6:	701a      	strb	r2, [r3, #0]
	if(sig_pedestrian_request == STD_HIGH && CL_cycle_count >=40){
 8003dd8:	4b47      	ldr	r3, [pc, #284]	; (8003ef8 <CarTrafficLight_Task_1000ms+0x130>)
 8003dda:	781b      	ldrb	r3, [r3, #0]
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d10f      	bne.n	8003e00 <CarTrafficLight_Task_1000ms+0x38>
 8003de0:	4b44      	ldr	r3, [pc, #272]	; (8003ef4 <CarTrafficLight_Task_1000ms+0x12c>)
 8003de2:	781b      	ldrb	r3, [r3, #0]
 8003de4:	2b27      	cmp	r3, #39	; 0x27
 8003de6:	d90b      	bls.n	8003e00 <CarTrafficLight_Task_1000ms+0x38>
		CL_state = CL_RED;
 8003de8:	4b44      	ldr	r3, [pc, #272]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003dea:	2200      	movs	r2, #0
 8003dec:	701a      	strb	r2, [r3, #0]
		CL_state_count= 0;
 8003dee:	4b44      	ldr	r3, [pc, #272]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003df0:	2200      	movs	r2, #0
 8003df2:	701a      	strb	r2, [r3, #0]
		CL_cycle_count = 0;
 8003df4:	4b3f      	ldr	r3, [pc, #252]	; (8003ef4 <CarTrafficLight_Task_1000ms+0x12c>)
 8003df6:	2200      	movs	r2, #0
 8003df8:	701a      	strb	r2, [r3, #0]
		sig_pedestrian_request = STD_LOW;
 8003dfa:	4b3f      	ldr	r3, [pc, #252]	; (8003ef8 <CarTrafficLight_Task_1000ms+0x130>)
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	701a      	strb	r2, [r3, #0]
	};
	switch(CL_state){
 8003e00:	4b3e      	ldr	r3, [pc, #248]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003e02:	781b      	ldrb	r3, [r3, #0]
 8003e04:	2b04      	cmp	r3, #4
 8003e06:	d86f      	bhi.n	8003ee8 <CarTrafficLight_Task_1000ms+0x120>
 8003e08:	a201      	add	r2, pc, #4	; (adr r2, 8003e10 <CarTrafficLight_Task_1000ms+0x48>)
 8003e0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e0e:	bf00      	nop
 8003e10:	08003e25 	.word	0x08003e25
 8003e14:	08003e81 	.word	0x08003e81
 8003e18:	08003eaf 	.word	0x08003eaf
 8003e1c:	08003e53 	.word	0x08003e53
 8003e20:	08003edd 	.word	0x08003edd
		case CL_RED :
			if (CL_state_count <=5) {
 8003e24:	4b36      	ldr	r3, [pc, #216]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e26:	781b      	ldrb	r3, [r3, #0]
 8003e28:	2b05      	cmp	r3, #5
 8003e2a:	d80b      	bhi.n	8003e44 <CarTrafficLight_Task_1000ms+0x7c>
				CL_SetLightColor(CL_state);
 8003e2c:	4b33      	ldr	r3, [pc, #204]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f7fc fb49 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 8003e36:	4b32      	ldr	r3, [pc, #200]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e38:	781b      	ldrb	r3, [r3, #0]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	b2da      	uxtb	r2, r3
 8003e3e:	4b30      	ldr	r3, [pc, #192]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e40:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_FLASH_RED;
				CL_state_count =0;
			}
			break;
 8003e42:	e055      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_FLASH_RED;
 8003e44:	4b2d      	ldr	r3, [pc, #180]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003e46:	2203      	movs	r2, #3
 8003e48:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 8003e4a:	4b2d      	ldr	r3, [pc, #180]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e4c:	2200      	movs	r2, #0
 8003e4e:	701a      	strb	r2, [r3, #0]
			break;
 8003e50:	e04e      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
		case CL_FLASH_RED :
			if(CL_state_count <=3) {
 8003e52:	4b2b      	ldr	r3, [pc, #172]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e54:	781b      	ldrb	r3, [r3, #0]
 8003e56:	2b03      	cmp	r3, #3
 8003e58:	d80b      	bhi.n	8003e72 <CarTrafficLight_Task_1000ms+0xaa>
				CL_SetLightColor(CL_state);
 8003e5a:	4b28      	ldr	r3, [pc, #160]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003e5c:	781b      	ldrb	r3, [r3, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f7fc fb32 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 8003e64:	4b26      	ldr	r3, [pc, #152]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e66:	781b      	ldrb	r3, [r3, #0]
 8003e68:	3301      	adds	r3, #1
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	4b24      	ldr	r3, [pc, #144]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e6e:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_YELLOW;
				CL_state_count =0;
			}
			break;
 8003e70:	e03e      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_YELLOW;
 8003e72:	4b22      	ldr	r3, [pc, #136]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 8003e78:	4b21      	ldr	r3, [pc, #132]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
			break;
 8003e7e:	e037      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
		case CL_YELLOW :
			if (CL_state_count <=2) {
 8003e80:	4b1f      	ldr	r3, [pc, #124]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e82:	781b      	ldrb	r3, [r3, #0]
 8003e84:	2b02      	cmp	r3, #2
 8003e86:	d80b      	bhi.n	8003ea0 <CarTrafficLight_Task_1000ms+0xd8>
				CL_SetLightColor(CL_state);
 8003e88:	4b1c      	ldr	r3, [pc, #112]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003e8a:	781b      	ldrb	r3, [r3, #0]
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	f7fc fb1b 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 8003e92:	4b1b      	ldr	r3, [pc, #108]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e94:	781b      	ldrb	r3, [r3, #0]
 8003e96:	3301      	adds	r3, #1
 8003e98:	b2da      	uxtb	r2, r3
 8003e9a:	4b19      	ldr	r3, [pc, #100]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003e9c:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_GREEN;
				CL_state_count =0;
			}
			break;
 8003e9e:	e027      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_GREEN;
 8003ea0:	4b16      	ldr	r3, [pc, #88]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003ea2:	2202      	movs	r2, #2
 8003ea4:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 8003ea6:	4b16      	ldr	r3, [pc, #88]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003ea8:	2200      	movs	r2, #0
 8003eaa:	701a      	strb	r2, [r3, #0]
			break;
 8003eac:	e020      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
		case CL_GREEN :
			if (CL_state_count <=5) {
 8003eae:	4b14      	ldr	r3, [pc, #80]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	2b05      	cmp	r3, #5
 8003eb4:	d80b      	bhi.n	8003ece <CarTrafficLight_Task_1000ms+0x106>
				CL_SetLightColor(CL_state);
 8003eb6:	4b11      	ldr	r3, [pc, #68]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f7fc fb04 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 8003ec0:	4b0f      	ldr	r3, [pc, #60]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003ec2:	781b      	ldrb	r3, [r3, #0]
 8003ec4:	3301      	adds	r3, #1
 8003ec6:	b2da      	uxtb	r2, r3
 8003ec8:	4b0d      	ldr	r3, [pc, #52]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003eca:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_DEFAULT_GREEN;
				CL_state_count =0;
			}
			break;
 8003ecc:	e010      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_DEFAULT_GREEN;
 8003ece:	4b0b      	ldr	r3, [pc, #44]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003ed0:	2204      	movs	r2, #4
 8003ed2:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 8003ed4:	4b0a      	ldr	r3, [pc, #40]	; (8003f00 <CarTrafficLight_Task_1000ms+0x138>)
 8003ed6:	2200      	movs	r2, #0
 8003ed8:	701a      	strb	r2, [r3, #0]
			break;
 8003eda:	e009      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>
		case CL_DEFAULT_GREEN :
				CL_SetLightColor(CL_state);
 8003edc:	4b07      	ldr	r3, [pc, #28]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003ede:	781b      	ldrb	r3, [r3, #0]
 8003ee0:	4618      	mov	r0, r3
 8003ee2:	f7fc faf1 	bl	80004c8 <CL_SetLightColor>

			break;
 8003ee6:	e003      	b.n	8003ef0 <CarTrafficLight_Task_1000ms+0x128>

		default :
			CL_state = CL_DEFAULT_GREEN;
 8003ee8:	4b04      	ldr	r3, [pc, #16]	; (8003efc <CarTrafficLight_Task_1000ms+0x134>)
 8003eea:	2204      	movs	r2, #4
 8003eec:	701a      	strb	r2, [r3, #0]
			break;
 8003eee:	bf00      	nop
	};
};
 8003ef0:	bf00      	nop
 8003ef2:	bd80      	pop	{r7, pc}
 8003ef4:	2000046a 	.word	0x2000046a
 8003ef8:	20000544 	.word	0x20000544
 8003efc:	20000008 	.word	0x20000008
 8003f00:	2000046b 	.word	0x2000046b

08003f04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003f04:	b480      	push	{r7}
 8003f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003f08:	bf00      	nop
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b083      	sub	sp, #12
 8003f18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003f1a:	4b0f      	ldr	r3, [pc, #60]	; (8003f58 <HAL_MspInit+0x44>)
 8003f1c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f1e:	4a0e      	ldr	r2, [pc, #56]	; (8003f58 <HAL_MspInit+0x44>)
 8003f20:	f043 0301 	orr.w	r3, r3, #1
 8003f24:	6613      	str	r3, [r2, #96]	; 0x60
 8003f26:	4b0c      	ldr	r3, [pc, #48]	; (8003f58 <HAL_MspInit+0x44>)
 8003f28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003f2a:	f003 0301 	and.w	r3, r3, #1
 8003f2e:	607b      	str	r3, [r7, #4]
 8003f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003f32:	4b09      	ldr	r3, [pc, #36]	; (8003f58 <HAL_MspInit+0x44>)
 8003f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f36:	4a08      	ldr	r2, [pc, #32]	; (8003f58 <HAL_MspInit+0x44>)
 8003f38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f3c:	6593      	str	r3, [r2, #88]	; 0x58
 8003f3e:	4b06      	ldr	r3, [pc, #24]	; (8003f58 <HAL_MspInit+0x44>)
 8003f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f46:	603b      	str	r3, [r7, #0]
 8003f48:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f4a:	bf00      	nop
 8003f4c:	370c      	adds	r7, #12
 8003f4e:	46bd      	mov	sp, r7
 8003f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f54:	4770      	bx	lr
 8003f56:	bf00      	nop
 8003f58:	40021000 	.word	0x40021000

08003f5c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b08a      	sub	sp, #40	; 0x28
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f64:	f107 0314 	add.w	r3, r7, #20
 8003f68:	2200      	movs	r2, #0
 8003f6a:	601a      	str	r2, [r3, #0]
 8003f6c:	605a      	str	r2, [r3, #4]
 8003f6e:	609a      	str	r2, [r3, #8]
 8003f70:	60da      	str	r2, [r3, #12]
 8003f72:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a17      	ldr	r2, [pc, #92]	; (8003fd8 <HAL_I2C_MspInit+0x7c>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d127      	bne.n	8003fce <HAL_I2C_MspInit+0x72>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003f7e:	4b17      	ldr	r3, [pc, #92]	; (8003fdc <HAL_I2C_MspInit+0x80>)
 8003f80:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f82:	4a16      	ldr	r2, [pc, #88]	; (8003fdc <HAL_I2C_MspInit+0x80>)
 8003f84:	f043 0302 	orr.w	r3, r3, #2
 8003f88:	64d3      	str	r3, [r2, #76]	; 0x4c
 8003f8a:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <HAL_I2C_MspInit+0x80>)
 8003f8c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003f8e:	f003 0302 	and.w	r3, r3, #2
 8003f92:	613b      	str	r3, [r7, #16]
 8003f94:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration    
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003f96:	23c0      	movs	r3, #192	; 0xc0
 8003f98:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003f9a:	2312      	movs	r3, #18
 8003f9c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003fa2:	2303      	movs	r3, #3
 8003fa4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003fa6:	2304      	movs	r3, #4
 8003fa8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003faa:	f107 0314 	add.w	r3, r7, #20
 8003fae:	4619      	mov	r1, r3
 8003fb0:	480b      	ldr	r0, [pc, #44]	; (8003fe0 <HAL_I2C_MspInit+0x84>)
 8003fb2:	f7fc fcc3 	bl	800093c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003fb6:	4b09      	ldr	r3, [pc, #36]	; (8003fdc <HAL_I2C_MspInit+0x80>)
 8003fb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fba:	4a08      	ldr	r2, [pc, #32]	; (8003fdc <HAL_I2C_MspInit+0x80>)
 8003fbc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003fc0:	6593      	str	r3, [r2, #88]	; 0x58
 8003fc2:	4b06      	ldr	r3, [pc, #24]	; (8003fdc <HAL_I2C_MspInit+0x80>)
 8003fc4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fc6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003fca:	60fb      	str	r3, [r7, #12]
 8003fcc:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003fce:	bf00      	nop
 8003fd0:	3728      	adds	r7, #40	; 0x28
 8003fd2:	46bd      	mov	sp, r7
 8003fd4:	bd80      	pop	{r7, pc}
 8003fd6:	bf00      	nop
 8003fd8:	40005400 	.word	0x40005400
 8003fdc:	40021000 	.word	0x40021000
 8003fe0:	48000400 	.word	0x48000400

08003fe4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fe4:	b580      	push	{r7, lr}
 8003fe6:	b08a      	sub	sp, #40	; 0x28
 8003fe8:	af00      	add	r7, sp, #0
 8003fea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fec:	f107 0314 	add.w	r3, r7, #20
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	605a      	str	r2, [r3, #4]
 8003ff6:	609a      	str	r2, [r3, #8]
 8003ff8:	60da      	str	r2, [r3, #12]
 8003ffa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	4a17      	ldr	r2, [pc, #92]	; (8004060 <HAL_UART_MspInit+0x7c>)
 8004002:	4293      	cmp	r3, r2
 8004004:	d128      	bne.n	8004058 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8004006:	4b17      	ldr	r3, [pc, #92]	; (8004064 <HAL_UART_MspInit+0x80>)
 8004008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800400a:	4a16      	ldr	r2, [pc, #88]	; (8004064 <HAL_UART_MspInit+0x80>)
 800400c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004010:	6593      	str	r3, [r2, #88]	; 0x58
 8004012:	4b14      	ldr	r3, [pc, #80]	; (8004064 <HAL_UART_MspInit+0x80>)
 8004014:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004016:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800401a:	613b      	str	r3, [r7, #16]
 800401c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800401e:	4b11      	ldr	r3, [pc, #68]	; (8004064 <HAL_UART_MspInit+0x80>)
 8004020:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004022:	4a10      	ldr	r2, [pc, #64]	; (8004064 <HAL_UART_MspInit+0x80>)
 8004024:	f043 0301 	orr.w	r3, r3, #1
 8004028:	64d3      	str	r3, [r2, #76]	; 0x4c
 800402a:	4b0e      	ldr	r3, [pc, #56]	; (8004064 <HAL_UART_MspInit+0x80>)
 800402c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800402e:	f003 0301 	and.w	r3, r3, #1
 8004032:	60fb      	str	r3, [r7, #12]
 8004034:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8004036:	230c      	movs	r3, #12
 8004038:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800403a:	2302      	movs	r3, #2
 800403c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800403e:	2300      	movs	r3, #0
 8004040:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004042:	2303      	movs	r3, #3
 8004044:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8004046:	2307      	movs	r3, #7
 8004048:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800404a:	f107 0314 	add.w	r3, r7, #20
 800404e:	4619      	mov	r1, r3
 8004050:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8004054:	f7fc fc72 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8004058:	bf00      	nop
 800405a:	3728      	adds	r7, #40	; 0x28
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}
 8004060:	40004400 	.word	0x40004400
 8004064:	40021000 	.word	0x40021000

08004068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004068:	b480      	push	{r7}
 800406a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800406c:	bf00      	nop
 800406e:	46bd      	mov	sp, r7
 8004070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004074:	4770      	bx	lr

08004076 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004076:	b480      	push	{r7}
 8004078:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800407a:	e7fe      	b.n	800407a <HardFault_Handler+0x4>

0800407c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800407c:	b480      	push	{r7}
 800407e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004080:	e7fe      	b.n	8004080 <MemManage_Handler+0x4>

08004082 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004082:	b480      	push	{r7}
 8004084:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004086:	e7fe      	b.n	8004086 <BusFault_Handler+0x4>

08004088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004088:	b480      	push	{r7}
 800408a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800408c:	e7fe      	b.n	800408c <UsageFault_Handler+0x4>

0800408e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800408e:	b480      	push	{r7}
 8004090:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004092:	bf00      	nop
 8004094:	46bd      	mov	sp, r7
 8004096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409a:	4770      	bx	lr

0800409c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800409c:	b480      	push	{r7}
 800409e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80040a0:	bf00      	nop
 80040a2:	46bd      	mov	sp, r7
 80040a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040a8:	4770      	bx	lr

080040aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80040aa:	b480      	push	{r7}
 80040ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80040ae:	bf00      	nop
 80040b0:	46bd      	mov	sp, r7
 80040b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040b6:	4770      	bx	lr

080040b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80040b8:	b580      	push	{r7, lr}
 80040ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80040bc:	f7fc fb0e 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80040c0:	bf00      	nop
 80040c2:	bd80      	pop	{r7, pc}

080040c4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80040c8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80040cc:	f7fc fe10 	bl	8000cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  sig_pedestrian_request = STD_HIGH;
 80040d0:	4b02      	ldr	r3, [pc, #8]	; (80040dc <EXTI15_10_IRQHandler+0x18>)
 80040d2:	2201      	movs	r2, #1
 80040d4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80040d6:	bf00      	nop
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	20000544 	.word	0x20000544

080040e0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80040e0:	b480      	push	{r7}
 80040e2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80040e4:	4b17      	ldr	r3, [pc, #92]	; (8004144 <SystemInit+0x64>)
 80040e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040ea:	4a16      	ldr	r2, [pc, #88]	; (8004144 <SystemInit+0x64>)
 80040ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80040f0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80040f4:	4b14      	ldr	r3, [pc, #80]	; (8004148 <SystemInit+0x68>)
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	4a13      	ldr	r2, [pc, #76]	; (8004148 <SystemInit+0x68>)
 80040fa:	f043 0301 	orr.w	r3, r3, #1
 80040fe:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8004100:	4b11      	ldr	r3, [pc, #68]	; (8004148 <SystemInit+0x68>)
 8004102:	2200      	movs	r2, #0
 8004104:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8004106:	4b10      	ldr	r3, [pc, #64]	; (8004148 <SystemInit+0x68>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a0f      	ldr	r2, [pc, #60]	; (8004148 <SystemInit+0x68>)
 800410c:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8004110:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8004114:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8004116:	4b0c      	ldr	r3, [pc, #48]	; (8004148 <SystemInit+0x68>)
 8004118:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800411c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800411e:	4b0a      	ldr	r3, [pc, #40]	; (8004148 <SystemInit+0x68>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a09      	ldr	r2, [pc, #36]	; (8004148 <SystemInit+0x68>)
 8004124:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004128:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <SystemInit+0x68>)
 800412c:	2200      	movs	r2, #0
 800412e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8004130:	4b04      	ldr	r3, [pc, #16]	; (8004144 <SystemInit+0x64>)
 8004132:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8004136:	609a      	str	r2, [r3, #8]
#endif
}
 8004138:	bf00      	nop
 800413a:	46bd      	mov	sp, r7
 800413c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004140:	4770      	bx	lr
 8004142:	bf00      	nop
 8004144:	e000ed00 	.word	0xe000ed00
 8004148:	40021000 	.word	0x40021000

0800414c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800414c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8004184 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8004150:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8004152:	e003      	b.n	800415c <LoopCopyDataInit>

08004154 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8004154:	4b0c      	ldr	r3, [pc, #48]	; (8004188 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8004156:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8004158:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800415a:	3104      	adds	r1, #4

0800415c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800415c:	480b      	ldr	r0, [pc, #44]	; (800418c <LoopForever+0xa>)
	ldr	r3, =_edata
 800415e:	4b0c      	ldr	r3, [pc, #48]	; (8004190 <LoopForever+0xe>)
	adds	r2, r0, r1
 8004160:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8004162:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8004164:	d3f6      	bcc.n	8004154 <CopyDataInit>
	ldr	r2, =_sbss
 8004166:	4a0b      	ldr	r2, [pc, #44]	; (8004194 <LoopForever+0x12>)
	b	LoopFillZerobss
 8004168:	e002      	b.n	8004170 <LoopFillZerobss>

0800416a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800416a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800416c:	f842 3b04 	str.w	r3, [r2], #4

08004170 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8004170:	4b09      	ldr	r3, [pc, #36]	; (8004198 <LoopForever+0x16>)
	cmp	r2, r3
 8004172:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8004174:	d3f9      	bcc.n	800416a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8004176:	f7ff ffb3 	bl	80040e0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800417a:	f000 f885 	bl	8004288 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800417e:	f7ff fc51 	bl	8003a24 <main>

08004182 <LoopForever>:

LoopForever:
    b LoopForever
 8004182:	e7fe      	b.n	8004182 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8004184:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8004188:	08004750 	.word	0x08004750
	ldr	r0, =_sdata
 800418c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8004190:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8004194:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8004198:	20000548 	.word	0x20000548

0800419c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800419c:	e7fe      	b.n	800419c <ADC1_2_IRQHandler>
	...

080041a0 <Sch_Init>:
#include <sch.h>
#include <sig_cfg.h>

static Sch_Cfg_Type * Sch_Cfg_Ptr;

void Sch_Init(Sch_Cfg_Type * cfg_ptr) {
 80041a0:	b480      	push	{r7}
 80041a2:	b083      	sub	sp, #12
 80041a4:	af00      	add	r7, sp, #0
 80041a6:	6078      	str	r0, [r7, #4]

    Sch_Cfg_Ptr = cfg_ptr;
 80041a8:	4a04      	ldr	r2, [pc, #16]	; (80041bc <Sch_Init+0x1c>)
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6013      	str	r3, [r2, #0]

}
 80041ae:	bf00      	nop
 80041b0:	370c      	adds	r7, #12
 80041b2:	46bd      	mov	sp, r7
 80041b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b8:	4770      	bx	lr
 80041ba:	bf00      	nop
 80041bc:	2000046c 	.word	0x2000046c

080041c0 <Sch_Main>:

void Sch_Main(void) {
 80041c0:	b580      	push	{r7, lr}
 80041c2:	b084      	sub	sp, #16
 80041c4:	af00      	add	r7, sp, #0
    uint32_t tick;
    uint8_t num_tasks;
    Sch_Task_Type *tasks;

    num_tasks = Sch_Cfg_Ptr->size;
 80041c6:	4b2b      	ldr	r3, [pc, #172]	; (8004274 <Sch_Main+0xb4>)
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	73bb      	strb	r3, [r7, #14]
    tasks = Sch_Cfg_Ptr->tasks;
 80041ce:	4b29      	ldr	r3, [pc, #164]	; (8004274 <Sch_Main+0xb4>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	685b      	ldr	r3, [r3, #4]
 80041d4:	60bb      	str	r3, [r7, #8]
    // The main while loop.  This while loop will run the program forever
    while(1) {
#ifndef SCH_ISR_SYSTICK
        Sys_TimerHandler();
#endif
        tick = Sys_GetTimer();       // Get current system tick
 80041d6:	f000 f84f 	bl	8004278 <Sys_GetTimer>
 80041da:	6078      	str	r0, [r7, #4]

        // Loop through all tasks.  First, run all continuous tasks.  Then,
        // if the number of ticks since the last time the task was run is
        // greater than or equal to the task interval, execute the task.
        for(uint8_t task_index = 0; task_index < num_tasks; task_index++) {
 80041dc:	2300      	movs	r3, #0
 80041de:	73fb      	strb	r3, [r7, #15]
 80041e0:	e043      	b.n	800426a <Sch_Main+0xaa>
            if(tasks[task_index].interval == 0) {
 80041e2:	7bfa      	ldrb	r2, [r7, #15]
 80041e4:	4613      	mov	r3, r2
 80041e6:	005b      	lsls	r3, r3, #1
 80041e8:	4413      	add	r3, r2
 80041ea:	009b      	lsls	r3, r3, #2
 80041ec:	461a      	mov	r2, r3
 80041ee:	68bb      	ldr	r3, [r7, #8]
 80041f0:	4413      	add	r3, r2
 80041f2:	881b      	ldrh	r3, [r3, #0]
 80041f4:	2b00      	cmp	r3, #0
 80041f6:	d10a      	bne.n	800420e <Sch_Main+0x4e>
                // Run continuous tasks.
                (*tasks[task_index].func)();
 80041f8:	7bfa      	ldrb	r2, [r7, #15]
 80041fa:	4613      	mov	r3, r2
 80041fc:	005b      	lsls	r3, r3, #1
 80041fe:	4413      	add	r3, r2
 8004200:	009b      	lsls	r3, r3, #2
 8004202:	461a      	mov	r2, r3
 8004204:	68bb      	ldr	r3, [r7, #8]
 8004206:	4413      	add	r3, r2
 8004208:	689b      	ldr	r3, [r3, #8]
 800420a:	4798      	blx	r3
 800420c:	e02a      	b.n	8004264 <Sch_Main+0xa4>
            }
            else if(tick >= tasks[task_index].next_tick) {
 800420e:	7bfa      	ldrb	r2, [r7, #15]
 8004210:	4613      	mov	r3, r2
 8004212:	005b      	lsls	r3, r3, #1
 8004214:	4413      	add	r3, r2
 8004216:	009b      	lsls	r3, r3, #2
 8004218:	461a      	mov	r2, r3
 800421a:	68bb      	ldr	r3, [r7, #8]
 800421c:	4413      	add	r3, r2
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	687a      	ldr	r2, [r7, #4]
 8004222:	429a      	cmp	r2, r3
 8004224:	d31e      	bcc.n	8004264 <Sch_Main+0xa4>
                (*tasks[task_index].func)();         // Execute Task
 8004226:	7bfa      	ldrb	r2, [r7, #15]
 8004228:	4613      	mov	r3, r2
 800422a:	005b      	lsls	r3, r3, #1
 800422c:	4413      	add	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	461a      	mov	r2, r3
 8004232:	68bb      	ldr	r3, [r7, #8]
 8004234:	4413      	add	r3, r2
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	4798      	blx	r3

                tasks[task_index].next_tick = tick + tasks[task_index].interval;  // Save last tick the task was ran.
 800423a:	7bfa      	ldrb	r2, [r7, #15]
 800423c:	4613      	mov	r3, r2
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	4413      	add	r3, r2
 8004242:	009b      	lsls	r3, r3, #2
 8004244:	461a      	mov	r2, r3
 8004246:	68bb      	ldr	r3, [r7, #8]
 8004248:	4413      	add	r3, r2
 800424a:	881b      	ldrh	r3, [r3, #0]
 800424c:	4619      	mov	r1, r3
 800424e:	7bfa      	ldrb	r2, [r7, #15]
 8004250:	4613      	mov	r3, r2
 8004252:	005b      	lsls	r3, r3, #1
 8004254:	4413      	add	r3, r2
 8004256:	009b      	lsls	r3, r3, #2
 8004258:	461a      	mov	r2, r3
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	4413      	add	r3, r2
 800425e:	687a      	ldr	r2, [r7, #4]
 8004260:	440a      	add	r2, r1
 8004262:	605a      	str	r2, [r3, #4]
        for(uint8_t task_index = 0; task_index < num_tasks; task_index++) {
 8004264:	7bfb      	ldrb	r3, [r7, #15]
 8004266:	3301      	adds	r3, #1
 8004268:	73fb      	strb	r3, [r7, #15]
 800426a:	7bfa      	ldrb	r2, [r7, #15]
 800426c:	7bbb      	ldrb	r3, [r7, #14]
 800426e:	429a      	cmp	r2, r3
 8004270:	d3b7      	bcc.n	80041e2 <Sch_Main+0x22>
        tick = Sys_GetTimer();       // Get current system tick
 8004272:	e7b0      	b.n	80041d6 <Sch_Main+0x16>
 8004274:	2000046c 	.word	0x2000046c

08004278 <Sys_GetTimer>:
#include <stm32l4xx_hal.h>
#include <sys_timer.h>
#include <stm32l476xx.h>


uint32_t Sys_GetTimer(void) {
 8004278:	b580      	push	{r7, lr}
 800427a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800427c:	f7fc fa40 	bl	8000700 <HAL_GetTick>
 8004280:	4603      	mov	r3, r0
}
 8004282:	4618      	mov	r0, r3
 8004284:	bd80      	pop	{r7, pc}
	...

08004288 <__libc_init_array>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	4e0d      	ldr	r6, [pc, #52]	; (80042c0 <__libc_init_array+0x38>)
 800428c:	4c0d      	ldr	r4, [pc, #52]	; (80042c4 <__libc_init_array+0x3c>)
 800428e:	1ba4      	subs	r4, r4, r6
 8004290:	10a4      	asrs	r4, r4, #2
 8004292:	2500      	movs	r5, #0
 8004294:	42a5      	cmp	r5, r4
 8004296:	d109      	bne.n	80042ac <__libc_init_array+0x24>
 8004298:	4e0b      	ldr	r6, [pc, #44]	; (80042c8 <__libc_init_array+0x40>)
 800429a:	4c0c      	ldr	r4, [pc, #48]	; (80042cc <__libc_init_array+0x44>)
 800429c:	f000 f820 	bl	80042e0 <_init>
 80042a0:	1ba4      	subs	r4, r4, r6
 80042a2:	10a4      	asrs	r4, r4, #2
 80042a4:	2500      	movs	r5, #0
 80042a6:	42a5      	cmp	r5, r4
 80042a8:	d105      	bne.n	80042b6 <__libc_init_array+0x2e>
 80042aa:	bd70      	pop	{r4, r5, r6, pc}
 80042ac:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042b0:	4798      	blx	r3
 80042b2:	3501      	adds	r5, #1
 80042b4:	e7ee      	b.n	8004294 <__libc_init_array+0xc>
 80042b6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80042ba:	4798      	blx	r3
 80042bc:	3501      	adds	r5, #1
 80042be:	e7f2      	b.n	80042a6 <__libc_init_array+0x1e>
 80042c0:	08004748 	.word	0x08004748
 80042c4:	08004748 	.word	0x08004748
 80042c8:	08004748 	.word	0x08004748
 80042cc:	0800474c 	.word	0x0800474c

080042d0 <memset>:
 80042d0:	4402      	add	r2, r0
 80042d2:	4603      	mov	r3, r0
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d100      	bne.n	80042da <memset+0xa>
 80042d8:	4770      	bx	lr
 80042da:	f803 1b01 	strb.w	r1, [r3], #1
 80042de:	e7f9      	b.n	80042d4 <memset+0x4>

080042e0 <_init>:
 80042e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042e2:	bf00      	nop
 80042e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042e6:	bc08      	pop	{r3}
 80042e8:	469e      	mov	lr, r3
 80042ea:	4770      	bx	lr

080042ec <_fini>:
 80042ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042ee:	bf00      	nop
 80042f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042f2:	bc08      	pop	{r3}
 80042f4:	469e      	mov	lr, r3
 80042f6:	4770      	bx	lr
