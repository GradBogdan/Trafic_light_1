
Traffic_Light_1.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003260  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000048  080033e8  080033e8  000133e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003430  08003430  00020048  2**0
                  CONTENTS
  4 .ARM          00000008  08003430  08003430  00013430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003438  08003438  00020048  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003438  08003438  00013438  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800343c  0800343c  0001343c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000048  20000000  08003440  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000b0  20000048  08003488  00020048  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200000f8  08003488  000200f8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009771  00000000  00000000  00020078  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000018c6  00000000  00000000  000297e9  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000910  00000000  00000000  0002b0b0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000007f8  00000000  00000000  0002b9c0  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00025433  00000000  00000000  0002c1b8  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00008b0b  00000000  00000000  000515eb  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000e49f2  00000000  00000000  0005a0f6  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013eae8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002244  00000000  00000000  0013eb64  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000048 	.word	0x20000048
 80001a4:	00000000 	.word	0x00000000
 80001a8:	080033d0 	.word	0x080033d0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000004c 	.word	0x2000004c
 80001c4:	080033d0 	.word	0x080033d0

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b972 	b.w	80004c4 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9e08      	ldr	r6, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	4688      	mov	r8, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14b      	bne.n	800029e <__udivmoddi4+0xa6>
 8000206:	428a      	cmp	r2, r1
 8000208:	4615      	mov	r5, r2
 800020a:	d967      	bls.n	80002dc <__udivmoddi4+0xe4>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b14a      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000212:	f1c2 0720 	rsb	r7, r2, #32
 8000216:	fa01 f302 	lsl.w	r3, r1, r2
 800021a:	fa20 f707 	lsr.w	r7, r0, r7
 800021e:	4095      	lsls	r5, r2
 8000220:	ea47 0803 	orr.w	r8, r7, r3
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbb8 f7fe 	udiv	r7, r8, lr
 8000230:	fa1f fc85 	uxth.w	ip, r5
 8000234:	fb0e 8817 	mls	r8, lr, r7, r8
 8000238:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800023c:	fb07 f10c 	mul.w	r1, r7, ip
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18eb      	adds	r3, r5, r3
 8000246:	f107 30ff 	add.w	r0, r7, #4294967295
 800024a:	f080 811b 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8118 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000254:	3f02      	subs	r7, #2
 8000256:	442b      	add	r3, r5
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000260:	fb0e 3310 	mls	r3, lr, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fc0c 	mul.w	ip, r0, ip
 800026c:	45a4      	cmp	ip, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	192c      	adds	r4, r5, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8107 	bcs.w	8000488 <__udivmoddi4+0x290>
 800027a:	45a4      	cmp	ip, r4
 800027c:	f240 8104 	bls.w	8000488 <__udivmoddi4+0x290>
 8000280:	3802      	subs	r0, #2
 8000282:	442c      	add	r4, r5
 8000284:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000288:	eba4 040c 	sub.w	r4, r4, ip
 800028c:	2700      	movs	r7, #0
 800028e:	b11e      	cbz	r6, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c6 4300 	strd	r4, r3, [r6]
 8000298:	4639      	mov	r1, r7
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	428b      	cmp	r3, r1
 80002a0:	d909      	bls.n	80002b6 <__udivmoddi4+0xbe>
 80002a2:	2e00      	cmp	r6, #0
 80002a4:	f000 80eb 	beq.w	800047e <__udivmoddi4+0x286>
 80002a8:	2700      	movs	r7, #0
 80002aa:	e9c6 0100 	strd	r0, r1, [r6]
 80002ae:	4638      	mov	r0, r7
 80002b0:	4639      	mov	r1, r7
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	fab3 f783 	clz	r7, r3
 80002ba:	2f00      	cmp	r7, #0
 80002bc:	d147      	bne.n	800034e <__udivmoddi4+0x156>
 80002be:	428b      	cmp	r3, r1
 80002c0:	d302      	bcc.n	80002c8 <__udivmoddi4+0xd0>
 80002c2:	4282      	cmp	r2, r0
 80002c4:	f200 80fa 	bhi.w	80004bc <__udivmoddi4+0x2c4>
 80002c8:	1a84      	subs	r4, r0, r2
 80002ca:	eb61 0303 	sbc.w	r3, r1, r3
 80002ce:	2001      	movs	r0, #1
 80002d0:	4698      	mov	r8, r3
 80002d2:	2e00      	cmp	r6, #0
 80002d4:	d0e0      	beq.n	8000298 <__udivmoddi4+0xa0>
 80002d6:	e9c6 4800 	strd	r4, r8, [r6]
 80002da:	e7dd      	b.n	8000298 <__udivmoddi4+0xa0>
 80002dc:	b902      	cbnz	r2, 80002e0 <__udivmoddi4+0xe8>
 80002de:	deff      	udf	#255	; 0xff
 80002e0:	fab2 f282 	clz	r2, r2
 80002e4:	2a00      	cmp	r2, #0
 80002e6:	f040 808f 	bne.w	8000408 <__udivmoddi4+0x210>
 80002ea:	1b49      	subs	r1, r1, r5
 80002ec:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f0:	fa1f f885 	uxth.w	r8, r5
 80002f4:	2701      	movs	r7, #1
 80002f6:	fbb1 fcfe 	udiv	ip, r1, lr
 80002fa:	0c23      	lsrs	r3, r4, #16
 80002fc:	fb0e 111c 	mls	r1, lr, ip, r1
 8000300:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000304:	fb08 f10c 	mul.w	r1, r8, ip
 8000308:	4299      	cmp	r1, r3
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0x124>
 800030c:	18eb      	adds	r3, r5, r3
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0x122>
 8000314:	4299      	cmp	r1, r3
 8000316:	f200 80cd 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 800031a:	4684      	mov	ip, r0
 800031c:	1a59      	subs	r1, r3, r1
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1410 	mls	r4, lr, r0, r1
 8000328:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x14c>
 8000334:	192c      	adds	r4, r5, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x14a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80b6 	bhi.w	80004ae <__udivmoddi4+0x2b6>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e79f      	b.n	800028e <__udivmoddi4+0x96>
 800034e:	f1c7 0c20 	rsb	ip, r7, #32
 8000352:	40bb      	lsls	r3, r7
 8000354:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000358:	ea4e 0e03 	orr.w	lr, lr, r3
 800035c:	fa01 f407 	lsl.w	r4, r1, r7
 8000360:	fa20 f50c 	lsr.w	r5, r0, ip
 8000364:	fa21 f30c 	lsr.w	r3, r1, ip
 8000368:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800036c:	4325      	orrs	r5, r4
 800036e:	fbb3 f9f8 	udiv	r9, r3, r8
 8000372:	0c2c      	lsrs	r4, r5, #16
 8000374:	fb08 3319 	mls	r3, r8, r9, r3
 8000378:	fa1f fa8e 	uxth.w	sl, lr
 800037c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000380:	fb09 f40a 	mul.w	r4, r9, sl
 8000384:	429c      	cmp	r4, r3
 8000386:	fa02 f207 	lsl.w	r2, r2, r7
 800038a:	fa00 f107 	lsl.w	r1, r0, r7
 800038e:	d90b      	bls.n	80003a8 <__udivmoddi4+0x1b0>
 8000390:	eb1e 0303 	adds.w	r3, lr, r3
 8000394:	f109 30ff 	add.w	r0, r9, #4294967295
 8000398:	f080 8087 	bcs.w	80004aa <__udivmoddi4+0x2b2>
 800039c:	429c      	cmp	r4, r3
 800039e:	f240 8084 	bls.w	80004aa <__udivmoddi4+0x2b2>
 80003a2:	f1a9 0902 	sub.w	r9, r9, #2
 80003a6:	4473      	add	r3, lr
 80003a8:	1b1b      	subs	r3, r3, r4
 80003aa:	b2ad      	uxth	r5, r5
 80003ac:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b0:	fb08 3310 	mls	r3, r8, r0, r3
 80003b4:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003b8:	fb00 fa0a 	mul.w	sl, r0, sl
 80003bc:	45a2      	cmp	sl, r4
 80003be:	d908      	bls.n	80003d2 <__udivmoddi4+0x1da>
 80003c0:	eb1e 0404 	adds.w	r4, lr, r4
 80003c4:	f100 33ff 	add.w	r3, r0, #4294967295
 80003c8:	d26b      	bcs.n	80004a2 <__udivmoddi4+0x2aa>
 80003ca:	45a2      	cmp	sl, r4
 80003cc:	d969      	bls.n	80004a2 <__udivmoddi4+0x2aa>
 80003ce:	3802      	subs	r0, #2
 80003d0:	4474      	add	r4, lr
 80003d2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003d6:	fba0 8902 	umull	r8, r9, r0, r2
 80003da:	eba4 040a 	sub.w	r4, r4, sl
 80003de:	454c      	cmp	r4, r9
 80003e0:	46c2      	mov	sl, r8
 80003e2:	464b      	mov	r3, r9
 80003e4:	d354      	bcc.n	8000490 <__udivmoddi4+0x298>
 80003e6:	d051      	beq.n	800048c <__udivmoddi4+0x294>
 80003e8:	2e00      	cmp	r6, #0
 80003ea:	d069      	beq.n	80004c0 <__udivmoddi4+0x2c8>
 80003ec:	ebb1 050a 	subs.w	r5, r1, sl
 80003f0:	eb64 0403 	sbc.w	r4, r4, r3
 80003f4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80003f8:	40fd      	lsrs	r5, r7
 80003fa:	40fc      	lsrs	r4, r7
 80003fc:	ea4c 0505 	orr.w	r5, ip, r5
 8000400:	e9c6 5400 	strd	r5, r4, [r6]
 8000404:	2700      	movs	r7, #0
 8000406:	e747      	b.n	8000298 <__udivmoddi4+0xa0>
 8000408:	f1c2 0320 	rsb	r3, r2, #32
 800040c:	fa20 f703 	lsr.w	r7, r0, r3
 8000410:	4095      	lsls	r5, r2
 8000412:	fa01 f002 	lsl.w	r0, r1, r2
 8000416:	fa21 f303 	lsr.w	r3, r1, r3
 800041a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800041e:	4338      	orrs	r0, r7
 8000420:	0c01      	lsrs	r1, r0, #16
 8000422:	fbb3 f7fe 	udiv	r7, r3, lr
 8000426:	fa1f f885 	uxth.w	r8, r5
 800042a:	fb0e 3317 	mls	r3, lr, r7, r3
 800042e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000432:	fb07 f308 	mul.w	r3, r7, r8
 8000436:	428b      	cmp	r3, r1
 8000438:	fa04 f402 	lsl.w	r4, r4, r2
 800043c:	d907      	bls.n	800044e <__udivmoddi4+0x256>
 800043e:	1869      	adds	r1, r5, r1
 8000440:	f107 3cff 	add.w	ip, r7, #4294967295
 8000444:	d22f      	bcs.n	80004a6 <__udivmoddi4+0x2ae>
 8000446:	428b      	cmp	r3, r1
 8000448:	d92d      	bls.n	80004a6 <__udivmoddi4+0x2ae>
 800044a:	3f02      	subs	r7, #2
 800044c:	4429      	add	r1, r5
 800044e:	1acb      	subs	r3, r1, r3
 8000450:	b281      	uxth	r1, r0
 8000452:	fbb3 f0fe 	udiv	r0, r3, lr
 8000456:	fb0e 3310 	mls	r3, lr, r0, r3
 800045a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800045e:	fb00 f308 	mul.w	r3, r0, r8
 8000462:	428b      	cmp	r3, r1
 8000464:	d907      	bls.n	8000476 <__udivmoddi4+0x27e>
 8000466:	1869      	adds	r1, r5, r1
 8000468:	f100 3cff 	add.w	ip, r0, #4294967295
 800046c:	d217      	bcs.n	800049e <__udivmoddi4+0x2a6>
 800046e:	428b      	cmp	r3, r1
 8000470:	d915      	bls.n	800049e <__udivmoddi4+0x2a6>
 8000472:	3802      	subs	r0, #2
 8000474:	4429      	add	r1, r5
 8000476:	1ac9      	subs	r1, r1, r3
 8000478:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800047c:	e73b      	b.n	80002f6 <__udivmoddi4+0xfe>
 800047e:	4637      	mov	r7, r6
 8000480:	4630      	mov	r0, r6
 8000482:	e709      	b.n	8000298 <__udivmoddi4+0xa0>
 8000484:	4607      	mov	r7, r0
 8000486:	e6e7      	b.n	8000258 <__udivmoddi4+0x60>
 8000488:	4618      	mov	r0, r3
 800048a:	e6fb      	b.n	8000284 <__udivmoddi4+0x8c>
 800048c:	4541      	cmp	r1, r8
 800048e:	d2ab      	bcs.n	80003e8 <__udivmoddi4+0x1f0>
 8000490:	ebb8 0a02 	subs.w	sl, r8, r2
 8000494:	eb69 020e 	sbc.w	r2, r9, lr
 8000498:	3801      	subs	r0, #1
 800049a:	4613      	mov	r3, r2
 800049c:	e7a4      	b.n	80003e8 <__udivmoddi4+0x1f0>
 800049e:	4660      	mov	r0, ip
 80004a0:	e7e9      	b.n	8000476 <__udivmoddi4+0x27e>
 80004a2:	4618      	mov	r0, r3
 80004a4:	e795      	b.n	80003d2 <__udivmoddi4+0x1da>
 80004a6:	4667      	mov	r7, ip
 80004a8:	e7d1      	b.n	800044e <__udivmoddi4+0x256>
 80004aa:	4681      	mov	r9, r0
 80004ac:	e77c      	b.n	80003a8 <__udivmoddi4+0x1b0>
 80004ae:	3802      	subs	r0, #2
 80004b0:	442c      	add	r4, r5
 80004b2:	e747      	b.n	8000344 <__udivmoddi4+0x14c>
 80004b4:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b8:	442b      	add	r3, r5
 80004ba:	e72f      	b.n	800031c <__udivmoddi4+0x124>
 80004bc:	4638      	mov	r0, r7
 80004be:	e708      	b.n	80002d2 <__udivmoddi4+0xda>
 80004c0:	4637      	mov	r7, r6
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0xa0>

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <CL_SetLightColor>:
/* this function set the color of the car traffic light
 *param: CL_state: the state in which the car light is in  (RED, YELLOW, GREEN)
 *
 *
 */
void CL_SetLightColor(trafficLightState_t CL_state){
 80004c8:	b580      	push	{r7, lr}
 80004ca:	b082      	sub	sp, #8
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	71fb      	strb	r3, [r7, #7]
	switch(CL_state){
 80004d2:	79fb      	ldrb	r3, [r7, #7]
 80004d4:	2b04      	cmp	r3, #4
 80004d6:	f200 8094 	bhi.w	8000602 <CL_SetLightColor+0x13a>
 80004da:	a201      	add	r2, pc, #4	; (adr r2, 80004e0 <CL_SetLightColor+0x18>)
 80004dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80004e0:	080004f5 	.word	0x080004f5
 80004e4:	0800054b 	.word	0x0800054b
 80004e8:	08000589 	.word	0x08000589
 80004ec:	08000533 	.word	0x08000533
 80004f0:	080005c7 	.word	0x080005c7
		case CL_RED :
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_SET);
 80004f4:	2201      	movs	r2, #1
 80004f6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004fa:	4849      	ldr	r0, [pc, #292]	; (8000620 <CL_SetLightColor+0x158>)
 80004fc:	f000 fbc6 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000500:	2200      	movs	r2, #0
 8000502:	2140      	movs	r1, #64	; 0x40
 8000504:	4846      	ldr	r0, [pc, #280]	; (8000620 <CL_SetLightColor+0x158>)
 8000506:	f000 fbc1 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_RESET);
 800050a:	2200      	movs	r2, #0
 800050c:	2120      	movs	r1, #32
 800050e:	4844      	ldr	r0, [pc, #272]	; (8000620 <CL_SetLightColor+0x158>)
 8000510:	f000 fbbc 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_SET);
 8000514:	2201      	movs	r2, #1
 8000516:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800051a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800051e:	f000 fbb5 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_RED_LED_Pin, GPIO_PIN_RESET);
 8000522:	2200      	movs	r2, #0
 8000524:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000528:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800052c:	f000 fbae 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 8000530:	e071      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_FLASH_RED :
			HAL_GPIO_TogglePin(GPIOC, RED_LIGHT_LED_Pin);
 8000532:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000536:	483a      	ldr	r0, [pc, #232]	; (8000620 <CL_SetLightColor+0x158>)
 8000538:	f000 fbc0 	bl	8000cbc <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOA, PED_GREEN_LED_Pin);
 800053c:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000540:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000544:	f000 fbba 	bl	8000cbc <HAL_GPIO_TogglePin>
			break;
 8000548:	e065      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_YELLOW :
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_SET);
 800054a:	2201      	movs	r2, #1
 800054c:	2140      	movs	r1, #64	; 0x40
 800054e:	4834      	ldr	r0, [pc, #208]	; (8000620 <CL_SetLightColor+0x158>)
 8000550:	f000 fb9c 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000554:	2200      	movs	r2, #0
 8000556:	f44f 7180 	mov.w	r1, #256	; 0x100
 800055a:	4831      	ldr	r0, [pc, #196]	; (8000620 <CL_SetLightColor+0x158>)
 800055c:	f000 fb96 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000560:	2200      	movs	r2, #0
 8000562:	2120      	movs	r1, #32
 8000564:	482e      	ldr	r0, [pc, #184]	; (8000620 <CL_SetLightColor+0x158>)
 8000566:	f000 fb91 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_RED_LED_Pin, GPIO_PIN_SET);
 800056a:	2201      	movs	r2, #1
 800056c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000570:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000574:	f000 fb8a 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_RESET);
 8000578:	2200      	movs	r2, #0
 800057a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 800057e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000582:	f000 fb83 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 8000586:	e046      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_GREEN :
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_SET);
 8000588:	2201      	movs	r2, #1
 800058a:	2120      	movs	r1, #32
 800058c:	4824      	ldr	r0, [pc, #144]	; (8000620 <CL_SetLightColor+0x158>)
 800058e:	f000 fb7d 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8000592:	2200      	movs	r2, #0
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4822      	ldr	r0, [pc, #136]	; (8000620 <CL_SetLightColor+0x158>)
 8000598:	f000 fb78 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 800059c:	2200      	movs	r2, #0
 800059e:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005a2:	481f      	ldr	r0, [pc, #124]	; (8000620 <CL_SetLightColor+0x158>)
 80005a4:	f000 fb72 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_RED_LED_Pin, GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ae:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005b2:	f000 fb6b 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_RESET);
 80005b6:	2200      	movs	r2, #0
 80005b8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005bc:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005c0:	f000 fb64 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 80005c4:	e027      	b.n	8000616 <CL_SetLightColor+0x14e>
		case CL_DEFAULT_GREEN :
			HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin, GPIO_PIN_SET);
 80005c6:	2201      	movs	r2, #1
 80005c8:	2120      	movs	r1, #32
 80005ca:	4815      	ldr	r0, [pc, #84]	; (8000620 <CL_SetLightColor+0x158>)
 80005cc:	f000 fb5e 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, YELLOW_LIGHT_LED_Pin, GPIO_PIN_RESET);
 80005d0:	2200      	movs	r2, #0
 80005d2:	2140      	movs	r1, #64	; 0x40
 80005d4:	4812      	ldr	r0, [pc, #72]	; (8000620 <CL_SetLightColor+0x158>)
 80005d6:	f000 fb59 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 80005da:	2200      	movs	r2, #0
 80005dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80005e0:	480f      	ldr	r0, [pc, #60]	; (8000620 <CL_SetLightColor+0x158>)
 80005e2:	f000 fb53 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOC, PED_RED_LED_Pin, GPIO_PIN_SET);
 80005e6:	2201      	movs	r2, #1
 80005e8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80005ec:	480c      	ldr	r0, [pc, #48]	; (8000620 <CL_SetLightColor+0x158>)
 80005ee:	f000 fb4d 	bl	8000c8c <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(GPIOA, PED_GREEN_LED_Pin, GPIO_PIN_RESET);
 80005f2:	2200      	movs	r2, #0
 80005f4:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80005f8:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80005fc:	f000 fb46 	bl	8000c8c <HAL_GPIO_WritePin>
			break;
 8000600:	e009      	b.n	8000616 <CL_SetLightColor+0x14e>
		default :
			HAL_GPIO_TogglePin(GPIOC, YELLOW_LIGHT_LED_Pin);
 8000602:	2140      	movs	r1, #64	; 0x40
 8000604:	4806      	ldr	r0, [pc, #24]	; (8000620 <CL_SetLightColor+0x158>)
 8000606:	f000 fb59 	bl	8000cbc <HAL_GPIO_TogglePin>
			HAL_GPIO_TogglePin(GPIOB, PED_REQUEST_LED_Pin);
 800060a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800060e:	4805      	ldr	r0, [pc, #20]	; (8000624 <CL_SetLightColor+0x15c>)
 8000610:	f000 fb54 	bl	8000cbc <HAL_GPIO_TogglePin>
			break;
 8000614:	bf00      	nop
	};
}
 8000616:	bf00      	nop
 8000618:	3708      	adds	r7, #8
 800061a:	46bd      	mov	sp, r7
 800061c:	bd80      	pop	{r7, pc}
 800061e:	bf00      	nop
 8000620:	48000800 	.word	0x48000800
 8000624:	48000400 	.word	0x48000400

08000628 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000628:	b580      	push	{r7, lr}
 800062a:	b082      	sub	sp, #8
 800062c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800062e:	2300      	movs	r3, #0
 8000630:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000632:	4b0c      	ldr	r3, [pc, #48]	; (8000664 <HAL_Init+0x3c>)
 8000634:	681b      	ldr	r3, [r3, #0]
 8000636:	4a0b      	ldr	r2, [pc, #44]	; (8000664 <HAL_Init+0x3c>)
 8000638:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800063c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800063e:	2003      	movs	r0, #3
 8000640:	f000 f93a 	bl	80008b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000644:	2000      	movs	r0, #0
 8000646:	f000 f80f 	bl	8000668 <HAL_InitTick>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d002      	beq.n	8000656 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8000650:	2301      	movs	r3, #1
 8000652:	71fb      	strb	r3, [r7, #7]
 8000654:	e001      	b.n	800065a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8000656:	f002 fd19 	bl	800308c <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800065a:	79fb      	ldrb	r3, [r7, #7]
}
 800065c:	4618      	mov	r0, r3
 800065e:	3708      	adds	r7, #8
 8000660:	46bd      	mov	sp, r7
 8000662:	bd80      	pop	{r7, pc}
 8000664:	40022000 	.word	0x40022000

08000668 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000668:	b580      	push	{r7, lr}
 800066a:	b084      	sub	sp, #16
 800066c:	af00      	add	r7, sp, #0
 800066e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000670:	2300      	movs	r3, #0
 8000672:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8000674:	4b16      	ldr	r3, [pc, #88]	; (80006d0 <HAL_InitTick+0x68>)
 8000676:	681b      	ldr	r3, [r3, #0]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d022      	beq.n	80006c2 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 800067c:	4b15      	ldr	r3, [pc, #84]	; (80006d4 <HAL_InitTick+0x6c>)
 800067e:	681a      	ldr	r2, [r3, #0]
 8000680:	4b13      	ldr	r3, [pc, #76]	; (80006d0 <HAL_InitTick+0x68>)
 8000682:	681b      	ldr	r3, [r3, #0]
 8000684:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8000688:	fbb1 f3f3 	udiv	r3, r1, r3
 800068c:	fbb2 f3f3 	udiv	r3, r2, r3
 8000690:	4618      	mov	r0, r3
 8000692:	f000 f946 	bl	8000922 <HAL_SYSTICK_Config>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d10f      	bne.n	80006bc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800069c:	687b      	ldr	r3, [r7, #4]
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	d809      	bhi.n	80006b6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80006a2:	2200      	movs	r2, #0
 80006a4:	6879      	ldr	r1, [r7, #4]
 80006a6:	f04f 30ff 	mov.w	r0, #4294967295
 80006aa:	f000 f910 	bl	80008ce <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80006ae:	4a0a      	ldr	r2, [pc, #40]	; (80006d8 <HAL_InitTick+0x70>)
 80006b0:	687b      	ldr	r3, [r7, #4]
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e007      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80006b6:	2301      	movs	r3, #1
 80006b8:	73fb      	strb	r3, [r7, #15]
 80006ba:	e004      	b.n	80006c6 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80006bc:	2301      	movs	r3, #1
 80006be:	73fb      	strb	r3, [r7, #15]
 80006c0:	e001      	b.n	80006c6 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 80006c2:	2301      	movs	r3, #1
 80006c4:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80006c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80006c8:	4618      	mov	r0, r3
 80006ca:	3710      	adds	r7, #16
 80006cc:	46bd      	mov	sp, r7
 80006ce:	bd80      	pop	{r7, pc}
 80006d0:	20000004 	.word	0x20000004
 80006d4:	2000000c 	.word	0x2000000c
 80006d8:	20000000 	.word	0x20000000

080006dc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80006dc:	b480      	push	{r7}
 80006de:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80006e0:	4b05      	ldr	r3, [pc, #20]	; (80006f8 <HAL_IncTick+0x1c>)
 80006e2:	681a      	ldr	r2, [r3, #0]
 80006e4:	4b05      	ldr	r3, [pc, #20]	; (80006fc <HAL_IncTick+0x20>)
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	4413      	add	r3, r2
 80006ea:	4a03      	ldr	r2, [pc, #12]	; (80006f8 <HAL_IncTick+0x1c>)
 80006ec:	6013      	str	r3, [r2, #0]
}
 80006ee:	bf00      	nop
 80006f0:	46bd      	mov	sp, r7
 80006f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f6:	4770      	bx	lr
 80006f8:	2000006c 	.word	0x2000006c
 80006fc:	20000004 	.word	0x20000004

08000700 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  return uwTick;
 8000704:	4b03      	ldr	r3, [pc, #12]	; (8000714 <HAL_GetTick+0x14>)
 8000706:	681b      	ldr	r3, [r3, #0]
}
 8000708:	4618      	mov	r0, r3
 800070a:	46bd      	mov	sp, r7
 800070c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000710:	4770      	bx	lr
 8000712:	bf00      	nop
 8000714:	2000006c 	.word	0x2000006c

08000718 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000718:	b480      	push	{r7}
 800071a:	b085      	sub	sp, #20
 800071c:	af00      	add	r7, sp, #0
 800071e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000720:	687b      	ldr	r3, [r7, #4]
 8000722:	f003 0307 	and.w	r3, r3, #7
 8000726:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000728:	4b0c      	ldr	r3, [pc, #48]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800072a:	68db      	ldr	r3, [r3, #12]
 800072c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800072e:	68ba      	ldr	r2, [r7, #8]
 8000730:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000734:	4013      	ands	r3, r2
 8000736:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000738:	68fb      	ldr	r3, [r7, #12]
 800073a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000740:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000744:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000748:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800074a:	4a04      	ldr	r2, [pc, #16]	; (800075c <__NVIC_SetPriorityGrouping+0x44>)
 800074c:	68bb      	ldr	r3, [r7, #8]
 800074e:	60d3      	str	r3, [r2, #12]
}
 8000750:	bf00      	nop
 8000752:	3714      	adds	r7, #20
 8000754:	46bd      	mov	sp, r7
 8000756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800075a:	4770      	bx	lr
 800075c:	e000ed00 	.word	0xe000ed00

08000760 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000760:	b480      	push	{r7}
 8000762:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000764:	4b04      	ldr	r3, [pc, #16]	; (8000778 <__NVIC_GetPriorityGrouping+0x18>)
 8000766:	68db      	ldr	r3, [r3, #12]
 8000768:	0a1b      	lsrs	r3, r3, #8
 800076a:	f003 0307 	and.w	r3, r3, #7
}
 800076e:	4618      	mov	r0, r3
 8000770:	46bd      	mov	sp, r7
 8000772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000776:	4770      	bx	lr
 8000778:	e000ed00 	.word	0xe000ed00

0800077c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800077c:	b480      	push	{r7}
 800077e:	b083      	sub	sp, #12
 8000780:	af00      	add	r7, sp, #0
 8000782:	4603      	mov	r3, r0
 8000784:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000786:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800078a:	2b00      	cmp	r3, #0
 800078c:	db0b      	blt.n	80007a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800078e:	79fb      	ldrb	r3, [r7, #7]
 8000790:	f003 021f 	and.w	r2, r3, #31
 8000794:	4907      	ldr	r1, [pc, #28]	; (80007b4 <__NVIC_EnableIRQ+0x38>)
 8000796:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800079a:	095b      	lsrs	r3, r3, #5
 800079c:	2001      	movs	r0, #1
 800079e:	fa00 f202 	lsl.w	r2, r0, r2
 80007a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80007a6:	bf00      	nop
 80007a8:	370c      	adds	r7, #12
 80007aa:	46bd      	mov	sp, r7
 80007ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007b0:	4770      	bx	lr
 80007b2:	bf00      	nop
 80007b4:	e000e100 	.word	0xe000e100

080007b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80007b8:	b480      	push	{r7}
 80007ba:	b083      	sub	sp, #12
 80007bc:	af00      	add	r7, sp, #0
 80007be:	4603      	mov	r3, r0
 80007c0:	6039      	str	r1, [r7, #0]
 80007c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80007c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	db0a      	blt.n	80007e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007cc:	683b      	ldr	r3, [r7, #0]
 80007ce:	b2da      	uxtb	r2, r3
 80007d0:	490c      	ldr	r1, [pc, #48]	; (8000804 <__NVIC_SetPriority+0x4c>)
 80007d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80007d6:	0112      	lsls	r2, r2, #4
 80007d8:	b2d2      	uxtb	r2, r2
 80007da:	440b      	add	r3, r1
 80007dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80007e0:	e00a      	b.n	80007f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80007e2:	683b      	ldr	r3, [r7, #0]
 80007e4:	b2da      	uxtb	r2, r3
 80007e6:	4908      	ldr	r1, [pc, #32]	; (8000808 <__NVIC_SetPriority+0x50>)
 80007e8:	79fb      	ldrb	r3, [r7, #7]
 80007ea:	f003 030f 	and.w	r3, r3, #15
 80007ee:	3b04      	subs	r3, #4
 80007f0:	0112      	lsls	r2, r2, #4
 80007f2:	b2d2      	uxtb	r2, r2
 80007f4:	440b      	add	r3, r1
 80007f6:	761a      	strb	r2, [r3, #24]
}
 80007f8:	bf00      	nop
 80007fa:	370c      	adds	r7, #12
 80007fc:	46bd      	mov	sp, r7
 80007fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000802:	4770      	bx	lr
 8000804:	e000e100 	.word	0xe000e100
 8000808:	e000ed00 	.word	0xe000ed00

0800080c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800080c:	b480      	push	{r7}
 800080e:	b089      	sub	sp, #36	; 0x24
 8000810:	af00      	add	r7, sp, #0
 8000812:	60f8      	str	r0, [r7, #12]
 8000814:	60b9      	str	r1, [r7, #8]
 8000816:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000818:	68fb      	ldr	r3, [r7, #12]
 800081a:	f003 0307 	and.w	r3, r3, #7
 800081e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000820:	69fb      	ldr	r3, [r7, #28]
 8000822:	f1c3 0307 	rsb	r3, r3, #7
 8000826:	2b04      	cmp	r3, #4
 8000828:	bf28      	it	cs
 800082a:	2304      	movcs	r3, #4
 800082c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800082e:	69fb      	ldr	r3, [r7, #28]
 8000830:	3304      	adds	r3, #4
 8000832:	2b06      	cmp	r3, #6
 8000834:	d902      	bls.n	800083c <NVIC_EncodePriority+0x30>
 8000836:	69fb      	ldr	r3, [r7, #28]
 8000838:	3b03      	subs	r3, #3
 800083a:	e000      	b.n	800083e <NVIC_EncodePriority+0x32>
 800083c:	2300      	movs	r3, #0
 800083e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000840:	f04f 32ff 	mov.w	r2, #4294967295
 8000844:	69bb      	ldr	r3, [r7, #24]
 8000846:	fa02 f303 	lsl.w	r3, r2, r3
 800084a:	43da      	mvns	r2, r3
 800084c:	68bb      	ldr	r3, [r7, #8]
 800084e:	401a      	ands	r2, r3
 8000850:	697b      	ldr	r3, [r7, #20]
 8000852:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000854:	f04f 31ff 	mov.w	r1, #4294967295
 8000858:	697b      	ldr	r3, [r7, #20]
 800085a:	fa01 f303 	lsl.w	r3, r1, r3
 800085e:	43d9      	mvns	r1, r3
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000864:	4313      	orrs	r3, r2
         );
}
 8000866:	4618      	mov	r0, r3
 8000868:	3724      	adds	r7, #36	; 0x24
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b082      	sub	sp, #8
 8000878:	af00      	add	r7, sp, #0
 800087a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	3b01      	subs	r3, #1
 8000880:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000884:	d301      	bcc.n	800088a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000886:	2301      	movs	r3, #1
 8000888:	e00f      	b.n	80008aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800088a:	4a0a      	ldr	r2, [pc, #40]	; (80008b4 <SysTick_Config+0x40>)
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	3b01      	subs	r3, #1
 8000890:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000892:	210f      	movs	r1, #15
 8000894:	f04f 30ff 	mov.w	r0, #4294967295
 8000898:	f7ff ff8e 	bl	80007b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800089c:	4b05      	ldr	r3, [pc, #20]	; (80008b4 <SysTick_Config+0x40>)
 800089e:	2200      	movs	r2, #0
 80008a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80008a2:	4b04      	ldr	r3, [pc, #16]	; (80008b4 <SysTick_Config+0x40>)
 80008a4:	2207      	movs	r2, #7
 80008a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80008a8:	2300      	movs	r3, #0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	3708      	adds	r7, #8
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd80      	pop	{r7, pc}
 80008b2:	bf00      	nop
 80008b4:	e000e010 	.word	0xe000e010

080008b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80008b8:	b580      	push	{r7, lr}
 80008ba:	b082      	sub	sp, #8
 80008bc:	af00      	add	r7, sp, #0
 80008be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80008c0:	6878      	ldr	r0, [r7, #4]
 80008c2:	f7ff ff29 	bl	8000718 <__NVIC_SetPriorityGrouping>
}
 80008c6:	bf00      	nop
 80008c8:	3708      	adds	r7, #8
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}

080008ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80008ce:	b580      	push	{r7, lr}
 80008d0:	b086      	sub	sp, #24
 80008d2:	af00      	add	r7, sp, #0
 80008d4:	4603      	mov	r3, r0
 80008d6:	60b9      	str	r1, [r7, #8]
 80008d8:	607a      	str	r2, [r7, #4]
 80008da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80008dc:	2300      	movs	r3, #0
 80008de:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 80008e0:	f7ff ff3e 	bl	8000760 <__NVIC_GetPriorityGrouping>
 80008e4:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80008e6:	687a      	ldr	r2, [r7, #4]
 80008e8:	68b9      	ldr	r1, [r7, #8]
 80008ea:	6978      	ldr	r0, [r7, #20]
 80008ec:	f7ff ff8e 	bl	800080c <NVIC_EncodePriority>
 80008f0:	4602      	mov	r2, r0
 80008f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80008f6:	4611      	mov	r1, r2
 80008f8:	4618      	mov	r0, r3
 80008fa:	f7ff ff5d 	bl	80007b8 <__NVIC_SetPriority>
}
 80008fe:	bf00      	nop
 8000900:	3718      	adds	r7, #24
 8000902:	46bd      	mov	sp, r7
 8000904:	bd80      	pop	{r7, pc}

08000906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000906:	b580      	push	{r7, lr}
 8000908:	b082      	sub	sp, #8
 800090a:	af00      	add	r7, sp, #0
 800090c:	4603      	mov	r3, r0
 800090e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000910:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000914:	4618      	mov	r0, r3
 8000916:	f7ff ff31 	bl	800077c <__NVIC_EnableIRQ>
}
 800091a:	bf00      	nop
 800091c:	3708      	adds	r7, #8
 800091e:	46bd      	mov	sp, r7
 8000920:	bd80      	pop	{r7, pc}

08000922 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000922:	b580      	push	{r7, lr}
 8000924:	b082      	sub	sp, #8
 8000926:	af00      	add	r7, sp, #0
 8000928:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800092a:	6878      	ldr	r0, [r7, #4]
 800092c:	f7ff ffa2 	bl	8000874 <SysTick_Config>
 8000930:	4603      	mov	r3, r0
}
 8000932:	4618      	mov	r0, r3
 8000934:	3708      	adds	r7, #8
 8000936:	46bd      	mov	sp, r7
 8000938:	bd80      	pop	{r7, pc}
	...

0800093c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800093c:	b480      	push	{r7}
 800093e:	b087      	sub	sp, #28
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
 8000944:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8000946:	2300      	movs	r3, #0
 8000948:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800094a:	e17f      	b.n	8000c4c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800094c:	683b      	ldr	r3, [r7, #0]
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	fa01 f303 	lsl.w	r3, r1, r3
 8000958:	4013      	ands	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800095c:	68fb      	ldr	r3, [r7, #12]
 800095e:	2b00      	cmp	r3, #0
 8000960:	f000 8171 	beq.w	8000c46 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000964:	683b      	ldr	r3, [r7, #0]
 8000966:	685b      	ldr	r3, [r3, #4]
 8000968:	2b02      	cmp	r3, #2
 800096a:	d003      	beq.n	8000974 <HAL_GPIO_Init+0x38>
 800096c:	683b      	ldr	r3, [r7, #0]
 800096e:	685b      	ldr	r3, [r3, #4]
 8000970:	2b12      	cmp	r3, #18
 8000972:	d123      	bne.n	80009bc <HAL_GPIO_Init+0x80>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8000974:	697b      	ldr	r3, [r7, #20]
 8000976:	08da      	lsrs	r2, r3, #3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3208      	adds	r2, #8
 800097c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000980:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8000982:	697b      	ldr	r3, [r7, #20]
 8000984:	f003 0307 	and.w	r3, r3, #7
 8000988:	009b      	lsls	r3, r3, #2
 800098a:	220f      	movs	r2, #15
 800098c:	fa02 f303 	lsl.w	r3, r2, r3
 8000990:	43db      	mvns	r3, r3
 8000992:	693a      	ldr	r2, [r7, #16]
 8000994:	4013      	ands	r3, r2
 8000996:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8000998:	683b      	ldr	r3, [r7, #0]
 800099a:	691a      	ldr	r2, [r3, #16]
 800099c:	697b      	ldr	r3, [r7, #20]
 800099e:	f003 0307 	and.w	r3, r3, #7
 80009a2:	009b      	lsls	r3, r3, #2
 80009a4:	fa02 f303 	lsl.w	r3, r2, r3
 80009a8:	693a      	ldr	r2, [r7, #16]
 80009aa:	4313      	orrs	r3, r2
 80009ac:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80009ae:	697b      	ldr	r3, [r7, #20]
 80009b0:	08da      	lsrs	r2, r3, #3
 80009b2:	687b      	ldr	r3, [r7, #4]
 80009b4:	3208      	adds	r2, #8
 80009b6:	6939      	ldr	r1, [r7, #16]
 80009b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80009c2:	697b      	ldr	r3, [r7, #20]
 80009c4:	005b      	lsls	r3, r3, #1
 80009c6:	2203      	movs	r2, #3
 80009c8:	fa02 f303 	lsl.w	r3, r2, r3
 80009cc:	43db      	mvns	r3, r3
 80009ce:	693a      	ldr	r2, [r7, #16]
 80009d0:	4013      	ands	r3, r2
 80009d2:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80009d4:	683b      	ldr	r3, [r7, #0]
 80009d6:	685b      	ldr	r3, [r3, #4]
 80009d8:	f003 0203 	and.w	r2, r3, #3
 80009dc:	697b      	ldr	r3, [r7, #20]
 80009de:	005b      	lsls	r3, r3, #1
 80009e0:	fa02 f303 	lsl.w	r3, r2, r3
 80009e4:	693a      	ldr	r2, [r7, #16]
 80009e6:	4313      	orrs	r3, r2
 80009e8:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	693a      	ldr	r2, [r7, #16]
 80009ee:	601a      	str	r2, [r3, #0]

      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80009f0:	683b      	ldr	r3, [r7, #0]
 80009f2:	685b      	ldr	r3, [r3, #4]
 80009f4:	2b01      	cmp	r3, #1
 80009f6:	d00b      	beq.n	8000a10 <HAL_GPIO_Init+0xd4>
 80009f8:	683b      	ldr	r3, [r7, #0]
 80009fa:	685b      	ldr	r3, [r3, #4]
 80009fc:	2b02      	cmp	r3, #2
 80009fe:	d007      	beq.n	8000a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a00:	683b      	ldr	r3, [r7, #0]
 8000a02:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8000a04:	2b11      	cmp	r3, #17
 8000a06:	d003      	beq.n	8000a10 <HAL_GPIO_Init+0xd4>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8000a08:	683b      	ldr	r3, [r7, #0]
 8000a0a:	685b      	ldr	r3, [r3, #4]
 8000a0c:	2b12      	cmp	r3, #18
 8000a0e:	d130      	bne.n	8000a72 <HAL_GPIO_Init+0x136>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000a10:	687b      	ldr	r3, [r7, #4]
 8000a12:	689b      	ldr	r3, [r3, #8]
 8000a14:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8000a16:	697b      	ldr	r3, [r7, #20]
 8000a18:	005b      	lsls	r3, r3, #1
 8000a1a:	2203      	movs	r2, #3
 8000a1c:	fa02 f303 	lsl.w	r3, r2, r3
 8000a20:	43db      	mvns	r3, r3
 8000a22:	693a      	ldr	r2, [r7, #16]
 8000a24:	4013      	ands	r3, r2
 8000a26:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8000a28:	683b      	ldr	r3, [r7, #0]
 8000a2a:	68da      	ldr	r2, [r3, #12]
 8000a2c:	697b      	ldr	r3, [r7, #20]
 8000a2e:	005b      	lsls	r3, r3, #1
 8000a30:	fa02 f303 	lsl.w	r3, r2, r3
 8000a34:	693a      	ldr	r2, [r7, #16]
 8000a36:	4313      	orrs	r3, r2
 8000a38:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000a3a:	687b      	ldr	r3, [r7, #4]
 8000a3c:	693a      	ldr	r2, [r7, #16]
 8000a3e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	685b      	ldr	r3, [r3, #4]
 8000a44:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8000a46:	2201      	movs	r2, #1
 8000a48:	697b      	ldr	r3, [r7, #20]
 8000a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000a4e:	43db      	mvns	r3, r3
 8000a50:	693a      	ldr	r2, [r7, #16]
 8000a52:	4013      	ands	r3, r2
 8000a54:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8000a56:	683b      	ldr	r3, [r7, #0]
 8000a58:	685b      	ldr	r3, [r3, #4]
 8000a5a:	091b      	lsrs	r3, r3, #4
 8000a5c:	f003 0201 	and.w	r2, r3, #1
 8000a60:	697b      	ldr	r3, [r7, #20]
 8000a62:	fa02 f303 	lsl.w	r3, r2, r3
 8000a66:	693a      	ldr	r2, [r7, #16]
 8000a68:	4313      	orrs	r3, r2
 8000a6a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	693a      	ldr	r2, [r7, #16]
 8000a70:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8000a72:	683b      	ldr	r3, [r7, #0]
 8000a74:	685b      	ldr	r3, [r3, #4]
 8000a76:	f003 0303 	and.w	r3, r3, #3
 8000a7a:	2b03      	cmp	r3, #3
 8000a7c:	d118      	bne.n	8000ab0 <HAL_GPIO_Init+0x174>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000a82:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8000a84:	2201      	movs	r2, #1
 8000a86:	697b      	ldr	r3, [r7, #20]
 8000a88:	fa02 f303 	lsl.w	r3, r2, r3
 8000a8c:	43db      	mvns	r3, r3
 8000a8e:	693a      	ldr	r2, [r7, #16]
 8000a90:	4013      	ands	r3, r2
 8000a92:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8000a94:	683b      	ldr	r3, [r7, #0]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	08db      	lsrs	r3, r3, #3
 8000a9a:	f003 0201 	and.w	r2, r3, #1
 8000a9e:	697b      	ldr	r3, [r7, #20]
 8000aa0:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa4:	693a      	ldr	r2, [r7, #16]
 8000aa6:	4313      	orrs	r3, r2
 8000aa8:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	693a      	ldr	r2, [r7, #16]
 8000aae:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	68db      	ldr	r3, [r3, #12]
 8000ab4:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8000ab6:	697b      	ldr	r3, [r7, #20]
 8000ab8:	005b      	lsls	r3, r3, #1
 8000aba:	2203      	movs	r2, #3
 8000abc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ac0:	43db      	mvns	r3, r3
 8000ac2:	693a      	ldr	r2, [r7, #16]
 8000ac4:	4013      	ands	r3, r2
 8000ac6:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8000ac8:	683b      	ldr	r3, [r7, #0]
 8000aca:	689a      	ldr	r2, [r3, #8]
 8000acc:	697b      	ldr	r3, [r7, #20]
 8000ace:	005b      	lsls	r3, r3, #1
 8000ad0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ad4:	693a      	ldr	r2, [r7, #16]
 8000ad6:	4313      	orrs	r3, r2
 8000ad8:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	693a      	ldr	r2, [r7, #16]
 8000ade:	60da      	str	r2, [r3, #12]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8000ae0:	683b      	ldr	r3, [r7, #0]
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	f000 80ac 	beq.w	8000c46 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aee:	4b5e      	ldr	r3, [pc, #376]	; (8000c68 <HAL_GPIO_Init+0x32c>)
 8000af0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000af2:	4a5d      	ldr	r2, [pc, #372]	; (8000c68 <HAL_GPIO_Init+0x32c>)
 8000af4:	f043 0301 	orr.w	r3, r3, #1
 8000af8:	6613      	str	r3, [r2, #96]	; 0x60
 8000afa:	4b5b      	ldr	r3, [pc, #364]	; (8000c68 <HAL_GPIO_Init+0x32c>)
 8000afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000afe:	f003 0301 	and.w	r3, r3, #1
 8000b02:	60bb      	str	r3, [r7, #8]
 8000b04:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8000b06:	4a59      	ldr	r2, [pc, #356]	; (8000c6c <HAL_GPIO_Init+0x330>)
 8000b08:	697b      	ldr	r3, [r7, #20]
 8000b0a:	089b      	lsrs	r3, r3, #2
 8000b0c:	3302      	adds	r3, #2
 8000b0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000b12:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8000b14:	697b      	ldr	r3, [r7, #20]
 8000b16:	f003 0303 	and.w	r3, r3, #3
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	220f      	movs	r2, #15
 8000b1e:	fa02 f303 	lsl.w	r3, r2, r3
 8000b22:	43db      	mvns	r3, r3
 8000b24:	693a      	ldr	r2, [r7, #16]
 8000b26:	4013      	ands	r3, r2
 8000b28:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8000b2a:	687b      	ldr	r3, [r7, #4]
 8000b2c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8000b30:	d025      	beq.n	8000b7e <HAL_GPIO_Init+0x242>
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	4a4e      	ldr	r2, [pc, #312]	; (8000c70 <HAL_GPIO_Init+0x334>)
 8000b36:	4293      	cmp	r3, r2
 8000b38:	d01f      	beq.n	8000b7a <HAL_GPIO_Init+0x23e>
 8000b3a:	687b      	ldr	r3, [r7, #4]
 8000b3c:	4a4d      	ldr	r2, [pc, #308]	; (8000c74 <HAL_GPIO_Init+0x338>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d019      	beq.n	8000b76 <HAL_GPIO_Init+0x23a>
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	4a4c      	ldr	r2, [pc, #304]	; (8000c78 <HAL_GPIO_Init+0x33c>)
 8000b46:	4293      	cmp	r3, r2
 8000b48:	d013      	beq.n	8000b72 <HAL_GPIO_Init+0x236>
 8000b4a:	687b      	ldr	r3, [r7, #4]
 8000b4c:	4a4b      	ldr	r2, [pc, #300]	; (8000c7c <HAL_GPIO_Init+0x340>)
 8000b4e:	4293      	cmp	r3, r2
 8000b50:	d00d      	beq.n	8000b6e <HAL_GPIO_Init+0x232>
 8000b52:	687b      	ldr	r3, [r7, #4]
 8000b54:	4a4a      	ldr	r2, [pc, #296]	; (8000c80 <HAL_GPIO_Init+0x344>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d007      	beq.n	8000b6a <HAL_GPIO_Init+0x22e>
 8000b5a:	687b      	ldr	r3, [r7, #4]
 8000b5c:	4a49      	ldr	r2, [pc, #292]	; (8000c84 <HAL_GPIO_Init+0x348>)
 8000b5e:	4293      	cmp	r3, r2
 8000b60:	d101      	bne.n	8000b66 <HAL_GPIO_Init+0x22a>
 8000b62:	2306      	movs	r3, #6
 8000b64:	e00c      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b66:	2307      	movs	r3, #7
 8000b68:	e00a      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b6a:	2305      	movs	r3, #5
 8000b6c:	e008      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b6e:	2304      	movs	r3, #4
 8000b70:	e006      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b72:	2303      	movs	r3, #3
 8000b74:	e004      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b76:	2302      	movs	r3, #2
 8000b78:	e002      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b7a:	2301      	movs	r3, #1
 8000b7c:	e000      	b.n	8000b80 <HAL_GPIO_Init+0x244>
 8000b7e:	2300      	movs	r3, #0
 8000b80:	697a      	ldr	r2, [r7, #20]
 8000b82:	f002 0203 	and.w	r2, r2, #3
 8000b86:	0092      	lsls	r2, r2, #2
 8000b88:	4093      	lsls	r3, r2
 8000b8a:	693a      	ldr	r2, [r7, #16]
 8000b8c:	4313      	orrs	r3, r2
 8000b8e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8000b90:	4936      	ldr	r1, [pc, #216]	; (8000c6c <HAL_GPIO_Init+0x330>)
 8000b92:	697b      	ldr	r3, [r7, #20]
 8000b94:	089b      	lsrs	r3, r3, #2
 8000b96:	3302      	adds	r3, #2
 8000b98:	693a      	ldr	r2, [r7, #16]
 8000b9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8000b9e:	4b3a      	ldr	r3, [pc, #232]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000ba0:	681b      	ldr	r3, [r3, #0]
 8000ba2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000ba4:	68fb      	ldr	r3, [r7, #12]
 8000ba6:	43db      	mvns	r3, r3
 8000ba8:	693a      	ldr	r2, [r7, #16]
 8000baa:	4013      	ands	r3, r2
 8000bac:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8000bae:	683b      	ldr	r3, [r7, #0]
 8000bb0:	685b      	ldr	r3, [r3, #4]
 8000bb2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d003      	beq.n	8000bc2 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8000bba:	693a      	ldr	r2, [r7, #16]
 8000bbc:	68fb      	ldr	r3, [r7, #12]
 8000bbe:	4313      	orrs	r3, r2
 8000bc0:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8000bc2:	4a31      	ldr	r2, [pc, #196]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bc4:	693b      	ldr	r3, [r7, #16]
 8000bc6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8000bc8:	4b2f      	ldr	r3, [pc, #188]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bca:	685b      	ldr	r3, [r3, #4]
 8000bcc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bce:	68fb      	ldr	r3, [r7, #12]
 8000bd0:	43db      	mvns	r3, r3
 8000bd2:	693a      	ldr	r2, [r7, #16]
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8000bd8:	683b      	ldr	r3, [r7, #0]
 8000bda:	685b      	ldr	r3, [r3, #4]
 8000bdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000be0:	2b00      	cmp	r3, #0
 8000be2:	d003      	beq.n	8000bec <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8000be4:	693a      	ldr	r2, [r7, #16]
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	4313      	orrs	r3, r2
 8000bea:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8000bec:	4a26      	ldr	r2, [pc, #152]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bee:	693b      	ldr	r3, [r7, #16]
 8000bf0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8000bf2:	4b25      	ldr	r3, [pc, #148]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000bf4:	689b      	ldr	r3, [r3, #8]
 8000bf6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000bf8:	68fb      	ldr	r3, [r7, #12]
 8000bfa:	43db      	mvns	r3, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4013      	ands	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	685b      	ldr	r3, [r3, #4]
 8000c06:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000c0a:	2b00      	cmp	r3, #0
 8000c0c:	d003      	beq.n	8000c16 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8000c0e:	693a      	ldr	r2, [r7, #16]
 8000c10:	68fb      	ldr	r3, [r7, #12]
 8000c12:	4313      	orrs	r3, r2
 8000c14:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8000c16:	4a1c      	ldr	r2, [pc, #112]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000c18:	693b      	ldr	r3, [r7, #16]
 8000c1a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8000c1c:	4b1a      	ldr	r3, [pc, #104]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000c1e:	68db      	ldr	r3, [r3, #12]
 8000c20:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8000c22:	68fb      	ldr	r3, [r7, #12]
 8000c24:	43db      	mvns	r3, r3
 8000c26:	693a      	ldr	r2, [r7, #16]
 8000c28:	4013      	ands	r3, r2
 8000c2a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8000c2c:	683b      	ldr	r3, [r7, #0]
 8000c2e:	685b      	ldr	r3, [r3, #4]
 8000c30:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	d003      	beq.n	8000c40 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8000c38:	693a      	ldr	r2, [r7, #16]
 8000c3a:	68fb      	ldr	r3, [r7, #12]
 8000c3c:	4313      	orrs	r3, r2
 8000c3e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8000c40:	4a11      	ldr	r2, [pc, #68]	; (8000c88 <HAL_GPIO_Init+0x34c>)
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8000c46:	697b      	ldr	r3, [r7, #20]
 8000c48:	3301      	adds	r3, #1
 8000c4a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	681a      	ldr	r2, [r3, #0]
 8000c50:	697b      	ldr	r3, [r7, #20]
 8000c52:	fa22 f303 	lsr.w	r3, r2, r3
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	f47f ae78 	bne.w	800094c <HAL_GPIO_Init+0x10>
  }
}
 8000c5c:	bf00      	nop
 8000c5e:	371c      	adds	r7, #28
 8000c60:	46bd      	mov	sp, r7
 8000c62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c66:	4770      	bx	lr
 8000c68:	40021000 	.word	0x40021000
 8000c6c:	40010000 	.word	0x40010000
 8000c70:	48000400 	.word	0x48000400
 8000c74:	48000800 	.word	0x48000800
 8000c78:	48000c00 	.word	0x48000c00
 8000c7c:	48001000 	.word	0x48001000
 8000c80:	48001400 	.word	0x48001400
 8000c84:	48001800 	.word	0x48001800
 8000c88:	40010400 	.word	0x40010400

08000c8c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000c8c:	b480      	push	{r7}
 8000c8e:	b083      	sub	sp, #12
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
 8000c94:	460b      	mov	r3, r1
 8000c96:	807b      	strh	r3, [r7, #2]
 8000c98:	4613      	mov	r3, r2
 8000c9a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8000c9c:	787b      	ldrb	r3, [r7, #1]
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d003      	beq.n	8000caa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ca2:	887a      	ldrh	r2, [r7, #2]
 8000ca4:	687b      	ldr	r3, [r7, #4]
 8000ca6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8000ca8:	e002      	b.n	8000cb0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000caa:	887a      	ldrh	r2, [r7, #2]
 8000cac:	687b      	ldr	r3, [r7, #4]
 8000cae:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000cb0:	bf00      	nop
 8000cb2:	370c      	adds	r7, #12
 8000cb4:	46bd      	mov	sp, r7
 8000cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cba:	4770      	bx	lr

08000cbc <HAL_GPIO_TogglePin>:
  * @param  GPIOx where x can be (A..H) to select the GPIO peripheral for STM32L4 family
  * @param  GPIO_Pin specifies the pin to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b083      	sub	sp, #12
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	460b      	mov	r3, r1
 8000cc6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) != 0x00u)
 8000cc8:	687b      	ldr	r3, [r7, #4]
 8000cca:	695a      	ldr	r2, [r3, #20]
 8000ccc:	887b      	ldrh	r3, [r7, #2]
 8000cce:	4013      	ands	r3, r2
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d003      	beq.n	8000cdc <HAL_GPIO_TogglePin+0x20>
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8000cd4:	887a      	ldrh	r2, [r7, #2]
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	629a      	str	r2, [r3, #40]	; 0x28
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
  }
}
 8000cda:	e002      	b.n	8000ce2 <HAL_GPIO_TogglePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000cdc:	887a      	ldrh	r2, [r7, #2]
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	619a      	str	r2, [r3, #24]
}
 8000ce2:	bf00      	nop
 8000ce4:	370c      	adds	r7, #12
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
	...

08000cf0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b082      	sub	sp, #8
 8000cf4:	af00      	add	r7, sp, #0
 8000cf6:	4603      	mov	r3, r0
 8000cf8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8000cfa:	4b08      	ldr	r3, [pc, #32]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000cfc:	695a      	ldr	r2, [r3, #20]
 8000cfe:	88fb      	ldrh	r3, [r7, #6]
 8000d00:	4013      	ands	r3, r2
 8000d02:	2b00      	cmp	r3, #0
 8000d04:	d006      	beq.n	8000d14 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8000d06:	4a05      	ldr	r2, [pc, #20]	; (8000d1c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8000d08:	88fb      	ldrh	r3, [r7, #6]
 8000d0a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8000d0c:	88fb      	ldrh	r3, [r7, #6]
 8000d0e:	4618      	mov	r0, r3
 8000d10:	f000 f806 	bl	8000d20 <HAL_GPIO_EXTI_Callback>
  }
}
 8000d14:	bf00      	nop
 8000d16:	3708      	adds	r7, #8
 8000d18:	46bd      	mov	sp, r7
 8000d1a:	bd80      	pop	{r7, pc}
 8000d1c:	40010400 	.word	0x40010400

08000d20 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	4603      	mov	r3, r0
 8000d28:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8000d2a:	bf00      	nop
 8000d2c:	370c      	adds	r7, #12
 8000d2e:	46bd      	mov	sp, r7
 8000d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d34:	4770      	bx	lr
	...

08000d38 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_RANGE1 or PWR_REGULATOR_VOLTAGE_RANGE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8000d3c:	4b04      	ldr	r3, [pc, #16]	; (8000d50 <HAL_PWREx_GetVoltageRange+0x18>)
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	40007000 	.word	0x40007000

08000d54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d5c:	687b      	ldr	r3, [r7, #4]
 8000d5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d62:	d130      	bne.n	8000dc6 <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8000d64:	4b23      	ldr	r3, [pc, #140]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d66:	681b      	ldr	r3, [r3, #0]
 8000d68:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000d6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d70:	d038      	beq.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8000d72:	4b20      	ldr	r3, [pc, #128]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000d7a:	4a1e      	ldr	r2, [pc, #120]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000d7c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000d80:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8000d82:	4b1d      	ldr	r3, [pc, #116]	; (8000df8 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	2232      	movs	r2, #50	; 0x32
 8000d88:	fb02 f303 	mul.w	r3, r2, r3
 8000d8c:	4a1b      	ldr	r2, [pc, #108]	; (8000dfc <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8000d8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000d92:	0c9b      	lsrs	r3, r3, #18
 8000d94:	3301      	adds	r3, #1
 8000d96:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000d98:	e002      	b.n	8000da0 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	3b01      	subs	r3, #1
 8000d9e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8000da0:	4b14      	ldr	r3, [pc, #80]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000da2:	695b      	ldr	r3, [r3, #20]
 8000da4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000da8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dac:	d102      	bne.n	8000db4 <HAL_PWREx_ControlVoltageScaling+0x60>
 8000dae:	68fb      	ldr	r3, [r7, #12]
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d1f2      	bne.n	8000d9a <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8000db4:	4b0f      	ldr	r3, [pc, #60]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000db6:	695b      	ldr	r3, [r3, #20]
 8000db8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000dbc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dc0:	d110      	bne.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 8000dc2:	2303      	movs	r3, #3
 8000dc4:	e00f      	b.n	8000de6 <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8000dc6:	4b0b      	ldr	r3, [pc, #44]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dc8:	681b      	ldr	r3, [r3, #0]
 8000dca:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8000dce:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000dd2:	d007      	beq.n	8000de4 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8000dd4:	4b07      	ldr	r3, [pc, #28]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8000ddc:	4a05      	ldr	r2, [pc, #20]	; (8000df4 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8000dde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000de2:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8000de4:	2300      	movs	r3, #0
}
 8000de6:	4618      	mov	r0, r3
 8000de8:	3714      	adds	r7, #20
 8000dea:	46bd      	mov	sp, r7
 8000dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df0:	4770      	bx	lr
 8000df2:	bf00      	nop
 8000df4:	40007000 	.word	0x40007000
 8000df8:	2000000c 	.word	0x2000000c
 8000dfc:	431bde83 	.word	0x431bde83

08000e00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b088      	sub	sp, #32
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	2b00      	cmp	r3, #0
 8000e0c:	d101      	bne.n	8000e12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000e0e:	2301      	movs	r3, #1
 8000e10:	e39d      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000e12:	4ba4      	ldr	r3, [pc, #656]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000e14:	689b      	ldr	r3, [r3, #8]
 8000e16:	f003 030c 	and.w	r3, r3, #12
 8000e1a:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000e1c:	4ba1      	ldr	r3, [pc, #644]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000e1e:	68db      	ldr	r3, [r3, #12]
 8000e20:	f003 0303 	and.w	r3, r3, #3
 8000e24:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	f003 0310 	and.w	r3, r3, #16
 8000e2e:	2b00      	cmp	r3, #0
 8000e30:	f000 80e1 	beq.w	8000ff6 <HAL_RCC_OscConfig+0x1f6>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8000e34:	69bb      	ldr	r3, [r7, #24]
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d007      	beq.n	8000e4a <HAL_RCC_OscConfig+0x4a>
 8000e3a:	69bb      	ldr	r3, [r7, #24]
 8000e3c:	2b0c      	cmp	r3, #12
 8000e3e:	f040 8088 	bne.w	8000f52 <HAL_RCC_OscConfig+0x152>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8000e42:	697b      	ldr	r3, [r7, #20]
 8000e44:	2b01      	cmp	r3, #1
 8000e46:	f040 8084 	bne.w	8000f52 <HAL_RCC_OscConfig+0x152>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000e4a:	4b96      	ldr	r3, [pc, #600]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000e4c:	681b      	ldr	r3, [r3, #0]
 8000e4e:	f003 0302 	and.w	r3, r3, #2
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d005      	beq.n	8000e62 <HAL_RCC_OscConfig+0x62>
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	699b      	ldr	r3, [r3, #24]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	d101      	bne.n	8000e62 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	e375      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	6a1a      	ldr	r2, [r3, #32]
 8000e66:	4b8f      	ldr	r3, [pc, #572]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	f003 0308 	and.w	r3, r3, #8
 8000e6e:	2b00      	cmp	r3, #0
 8000e70:	d004      	beq.n	8000e7c <HAL_RCC_OscConfig+0x7c>
 8000e72:	4b8c      	ldr	r3, [pc, #560]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e7a:	e005      	b.n	8000e88 <HAL_RCC_OscConfig+0x88>
 8000e7c:	4b89      	ldr	r3, [pc, #548]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000e7e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8000e82:	091b      	lsrs	r3, r3, #4
 8000e84:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000e88:	4293      	cmp	r3, r2
 8000e8a:	d223      	bcs.n	8000ed4 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4618      	mov	r0, r3
 8000e92:	f000 fd09 	bl	80018a8 <RCC_SetFlashLatencyFromMSIRange>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 8000e9c:	2301      	movs	r3, #1
 8000e9e:	e356      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ea0:	4b80      	ldr	r3, [pc, #512]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000ea2:	681b      	ldr	r3, [r3, #0]
 8000ea4:	4a7f      	ldr	r2, [pc, #508]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000ea6:	f043 0308 	orr.w	r3, r3, #8
 8000eaa:	6013      	str	r3, [r2, #0]
 8000eac:	4b7d      	ldr	r3, [pc, #500]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000eb4:	687b      	ldr	r3, [r7, #4]
 8000eb6:	6a1b      	ldr	r3, [r3, #32]
 8000eb8:	497a      	ldr	r1, [pc, #488]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000eba:	4313      	orrs	r3, r2
 8000ebc:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ebe:	4b79      	ldr	r3, [pc, #484]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000ec0:	685b      	ldr	r3, [r3, #4]
 8000ec2:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	69db      	ldr	r3, [r3, #28]
 8000eca:	021b      	lsls	r3, r3, #8
 8000ecc:	4975      	ldr	r1, [pc, #468]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000ece:	4313      	orrs	r3, r2
 8000ed0:	604b      	str	r3, [r1, #4]
 8000ed2:	e022      	b.n	8000f1a <HAL_RCC_OscConfig+0x11a>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000ed4:	4b73      	ldr	r3, [pc, #460]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	4a72      	ldr	r2, [pc, #456]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000eda:	f043 0308 	orr.w	r3, r3, #8
 8000ede:	6013      	str	r3, [r2, #0]
 8000ee0:	4b70      	ldr	r3, [pc, #448]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000ee2:	681b      	ldr	r3, [r3, #0]
 8000ee4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	6a1b      	ldr	r3, [r3, #32]
 8000eec:	496d      	ldr	r1, [pc, #436]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000eee:	4313      	orrs	r3, r2
 8000ef0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000ef2:	4b6c      	ldr	r3, [pc, #432]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000ef4:	685b      	ldr	r3, [r3, #4]
 8000ef6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	69db      	ldr	r3, [r3, #28]
 8000efe:	021b      	lsls	r3, r3, #8
 8000f00:	4968      	ldr	r1, [pc, #416]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f02:	4313      	orrs	r3, r2
 8000f04:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	6a1b      	ldr	r3, [r3, #32]
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f000 fccc 	bl	80018a8 <RCC_SetFlashLatencyFromMSIRange>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_ERROR;
 8000f16:	2301      	movs	r3, #1
 8000f18:	e319      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8000f1a:	f000 fc03 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8000f1e:	4601      	mov	r1, r0
 8000f20:	4b60      	ldr	r3, [pc, #384]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f22:	689b      	ldr	r3, [r3, #8]
 8000f24:	091b      	lsrs	r3, r3, #4
 8000f26:	f003 030f 	and.w	r3, r3, #15
 8000f2a:	4a5f      	ldr	r2, [pc, #380]	; (80010a8 <HAL_RCC_OscConfig+0x2a8>)
 8000f2c:	5cd3      	ldrb	r3, [r2, r3]
 8000f2e:	f003 031f 	and.w	r3, r3, #31
 8000f32:	fa21 f303 	lsr.w	r3, r1, r3
 8000f36:	4a5d      	ldr	r2, [pc, #372]	; (80010ac <HAL_RCC_OscConfig+0x2ac>)
 8000f38:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8000f3a:	4b5d      	ldr	r3, [pc, #372]	; (80010b0 <HAL_RCC_OscConfig+0x2b0>)
 8000f3c:	681b      	ldr	r3, [r3, #0]
 8000f3e:	4618      	mov	r0, r3
 8000f40:	f7ff fb92 	bl	8000668 <HAL_InitTick>
 8000f44:	4603      	mov	r3, r0
 8000f46:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8000f48:	7bfb      	ldrb	r3, [r7, #15]
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d052      	beq.n	8000ff4 <HAL_RCC_OscConfig+0x1f4>
        {
          return status;
 8000f4e:	7bfb      	ldrb	r3, [r7, #15]
 8000f50:	e2fd      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	699b      	ldr	r3, [r3, #24]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d032      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8000f5a:	4b52      	ldr	r3, [pc, #328]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	4a51      	ldr	r2, [pc, #324]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000f66:	f7ff fbcb 	bl	8000700 <HAL_GetTick>
 8000f6a:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f6c:	e008      	b.n	8000f80 <HAL_RCC_OscConfig+0x180>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000f6e:	f7ff fbc7 	bl	8000700 <HAL_GetTick>
 8000f72:	4602      	mov	r2, r0
 8000f74:	693b      	ldr	r3, [r7, #16]
 8000f76:	1ad3      	subs	r3, r2, r3
 8000f78:	2b02      	cmp	r3, #2
 8000f7a:	d901      	bls.n	8000f80 <HAL_RCC_OscConfig+0x180>
          {
            return HAL_TIMEOUT;
 8000f7c:	2303      	movs	r3, #3
 8000f7e:	e2e6      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8000f80:	4b48      	ldr	r3, [pc, #288]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	f003 0302 	and.w	r3, r3, #2
 8000f88:	2b00      	cmp	r3, #0
 8000f8a:	d0f0      	beq.n	8000f6e <HAL_RCC_OscConfig+0x16e>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8000f8c:	4b45      	ldr	r3, [pc, #276]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	4a44      	ldr	r2, [pc, #272]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f92:	f043 0308 	orr.w	r3, r3, #8
 8000f96:	6013      	str	r3, [r2, #0]
 8000f98:	4b42      	ldr	r3, [pc, #264]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000f9a:	681b      	ldr	r3, [r3, #0]
 8000f9c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	6a1b      	ldr	r3, [r3, #32]
 8000fa4:	493f      	ldr	r1, [pc, #252]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000fa6:	4313      	orrs	r3, r2
 8000fa8:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8000faa:	4b3e      	ldr	r3, [pc, #248]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000fac:	685b      	ldr	r3, [r3, #4]
 8000fae:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8000fb2:	687b      	ldr	r3, [r7, #4]
 8000fb4:	69db      	ldr	r3, [r3, #28]
 8000fb6:	021b      	lsls	r3, r3, #8
 8000fb8:	493a      	ldr	r1, [pc, #232]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000fba:	4313      	orrs	r3, r2
 8000fbc:	604b      	str	r3, [r1, #4]
 8000fbe:	e01a      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1f6>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a37      	ldr	r2, [pc, #220]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000fc6:	f023 0301 	bic.w	r3, r3, #1
 8000fca:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8000fcc:	f7ff fb98 	bl	8000700 <HAL_GetTick>
 8000fd0:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fd2:	e008      	b.n	8000fe6 <HAL_RCC_OscConfig+0x1e6>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8000fd4:	f7ff fb94 	bl	8000700 <HAL_GetTick>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	693b      	ldr	r3, [r7, #16]
 8000fdc:	1ad3      	subs	r3, r2, r3
 8000fde:	2b02      	cmp	r3, #2
 8000fe0:	d901      	bls.n	8000fe6 <HAL_RCC_OscConfig+0x1e6>
          {
            return HAL_TIMEOUT;
 8000fe2:	2303      	movs	r3, #3
 8000fe4:	e2b3      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8000fe6:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	f003 0302 	and.w	r3, r3, #2
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d1f0      	bne.n	8000fd4 <HAL_RCC_OscConfig+0x1d4>
 8000ff2:	e000      	b.n	8000ff6 <HAL_RCC_OscConfig+0x1f6>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8000ff4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	f003 0301 	and.w	r3, r3, #1
 8000ffe:	2b00      	cmp	r3, #0
 8001000:	d074      	beq.n	80010ec <HAL_RCC_OscConfig+0x2ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8001002:	69bb      	ldr	r3, [r7, #24]
 8001004:	2b08      	cmp	r3, #8
 8001006:	d005      	beq.n	8001014 <HAL_RCC_OscConfig+0x214>
 8001008:	69bb      	ldr	r3, [r7, #24]
 800100a:	2b0c      	cmp	r3, #12
 800100c:	d10e      	bne.n	800102c <HAL_RCC_OscConfig+0x22c>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800100e:	697b      	ldr	r3, [r7, #20]
 8001010:	2b03      	cmp	r3, #3
 8001012:	d10b      	bne.n	800102c <HAL_RCC_OscConfig+0x22c>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001014:	4b23      	ldr	r3, [pc, #140]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800101c:	2b00      	cmp	r3, #0
 800101e:	d064      	beq.n	80010ea <HAL_RCC_OscConfig+0x2ea>
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	2b00      	cmp	r3, #0
 8001026:	d160      	bne.n	80010ea <HAL_RCC_OscConfig+0x2ea>
      {
        return HAL_ERROR;
 8001028:	2301      	movs	r3, #1
 800102a:	e290      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800102c:	687b      	ldr	r3, [r7, #4]
 800102e:	685b      	ldr	r3, [r3, #4]
 8001030:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001034:	d106      	bne.n	8001044 <HAL_RCC_OscConfig+0x244>
 8001036:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8001038:	681b      	ldr	r3, [r3, #0]
 800103a:	4a1a      	ldr	r2, [pc, #104]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 800103c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001040:	6013      	str	r3, [r2, #0]
 8001042:	e01d      	b.n	8001080 <HAL_RCC_OscConfig+0x280>
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800104c:	d10c      	bne.n	8001068 <HAL_RCC_OscConfig+0x268>
 800104e:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	4a14      	ldr	r2, [pc, #80]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8001054:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001058:	6013      	str	r3, [r2, #0]
 800105a:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	4a11      	ldr	r2, [pc, #68]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8001060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001064:	6013      	str	r3, [r2, #0]
 8001066:	e00b      	b.n	8001080 <HAL_RCC_OscConfig+0x280>
 8001068:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0d      	ldr	r2, [pc, #52]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 800106e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001072:	6013      	str	r3, [r2, #0]
 8001074:	4b0b      	ldr	r3, [pc, #44]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 8001076:	681b      	ldr	r3, [r3, #0]
 8001078:	4a0a      	ldr	r2, [pc, #40]	; (80010a4 <HAL_RCC_OscConfig+0x2a4>)
 800107a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800107e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	685b      	ldr	r3, [r3, #4]
 8001084:	2b00      	cmp	r3, #0
 8001086:	d01c      	beq.n	80010c2 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001088:	f7ff fb3a 	bl	8000700 <HAL_GetTick>
 800108c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800108e:	e011      	b.n	80010b4 <HAL_RCC_OscConfig+0x2b4>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001090:	f7ff fb36 	bl	8000700 <HAL_GetTick>
 8001094:	4602      	mov	r2, r0
 8001096:	693b      	ldr	r3, [r7, #16]
 8001098:	1ad3      	subs	r3, r2, r3
 800109a:	2b64      	cmp	r3, #100	; 0x64
 800109c:	d90a      	bls.n	80010b4 <HAL_RCC_OscConfig+0x2b4>
          {
            return HAL_TIMEOUT;
 800109e:	2303      	movs	r3, #3
 80010a0:	e255      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
 80010a2:	bf00      	nop
 80010a4:	40021000 	.word	0x40021000
 80010a8:	080033e8 	.word	0x080033e8
 80010ac:	2000000c 	.word	0x2000000c
 80010b0:	20000000 	.word	0x20000000
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80010b4:	4bae      	ldr	r3, [pc, #696]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d0e7      	beq.n	8001090 <HAL_RCC_OscConfig+0x290>
 80010c0:	e014      	b.n	80010ec <HAL_RCC_OscConfig+0x2ec>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80010c2:	f7ff fb1d 	bl	8000700 <HAL_GetTick>
 80010c6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010c8:	e008      	b.n	80010dc <HAL_RCC_OscConfig+0x2dc>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80010ca:	f7ff fb19 	bl	8000700 <HAL_GetTick>
 80010ce:	4602      	mov	r2, r0
 80010d0:	693b      	ldr	r3, [r7, #16]
 80010d2:	1ad3      	subs	r3, r2, r3
 80010d4:	2b64      	cmp	r3, #100	; 0x64
 80010d6:	d901      	bls.n	80010dc <HAL_RCC_OscConfig+0x2dc>
          {
            return HAL_TIMEOUT;
 80010d8:	2303      	movs	r3, #3
 80010da:	e238      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80010dc:	4ba4      	ldr	r3, [pc, #656]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80010de:	681b      	ldr	r3, [r3, #0]
 80010e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80010e4:	2b00      	cmp	r3, #0
 80010e6:	d1f0      	bne.n	80010ca <HAL_RCC_OscConfig+0x2ca>
 80010e8:	e000      	b.n	80010ec <HAL_RCC_OscConfig+0x2ec>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80010ea:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 0302 	and.w	r3, r3, #2
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d060      	beq.n	80011ba <HAL_RCC_OscConfig+0x3ba>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 80010f8:	69bb      	ldr	r3, [r7, #24]
 80010fa:	2b04      	cmp	r3, #4
 80010fc:	d005      	beq.n	800110a <HAL_RCC_OscConfig+0x30a>
 80010fe:	69bb      	ldr	r3, [r7, #24]
 8001100:	2b0c      	cmp	r3, #12
 8001102:	d119      	bne.n	8001138 <HAL_RCC_OscConfig+0x338>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8001104:	697b      	ldr	r3, [r7, #20]
 8001106:	2b02      	cmp	r3, #2
 8001108:	d116      	bne.n	8001138 <HAL_RCC_OscConfig+0x338>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800110a:	4b99      	ldr	r3, [pc, #612]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 800110c:	681b      	ldr	r3, [r3, #0]
 800110e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001112:	2b00      	cmp	r3, #0
 8001114:	d005      	beq.n	8001122 <HAL_RCC_OscConfig+0x322>
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	68db      	ldr	r3, [r3, #12]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d101      	bne.n	8001122 <HAL_RCC_OscConfig+0x322>
      {
        return HAL_ERROR;
 800111e:	2301      	movs	r3, #1
 8001120:	e215      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001122:	4b93      	ldr	r3, [pc, #588]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001124:	685b      	ldr	r3, [r3, #4]
 8001126:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	691b      	ldr	r3, [r3, #16]
 800112e:	061b      	lsls	r3, r3, #24
 8001130:	498f      	ldr	r1, [pc, #572]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001132:	4313      	orrs	r3, r2
 8001134:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001136:	e040      	b.n	80011ba <HAL_RCC_OscConfig+0x3ba>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	68db      	ldr	r3, [r3, #12]
 800113c:	2b00      	cmp	r3, #0
 800113e:	d023      	beq.n	8001188 <HAL_RCC_OscConfig+0x388>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001140:	4b8b      	ldr	r3, [pc, #556]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001142:	681b      	ldr	r3, [r3, #0]
 8001144:	4a8a      	ldr	r2, [pc, #552]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001146:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800114c:	f7ff fad8 	bl	8000700 <HAL_GetTick>
 8001150:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001152:	e008      	b.n	8001166 <HAL_RCC_OscConfig+0x366>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001154:	f7ff fad4 	bl	8000700 <HAL_GetTick>
 8001158:	4602      	mov	r2, r0
 800115a:	693b      	ldr	r3, [r7, #16]
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b02      	cmp	r3, #2
 8001160:	d901      	bls.n	8001166 <HAL_RCC_OscConfig+0x366>
          {
            return HAL_TIMEOUT;
 8001162:	2303      	movs	r3, #3
 8001164:	e1f3      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001166:	4b82      	ldr	r3, [pc, #520]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800116e:	2b00      	cmp	r3, #0
 8001170:	d0f0      	beq.n	8001154 <HAL_RCC_OscConfig+0x354>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001172:	4b7f      	ldr	r3, [pc, #508]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001174:	685b      	ldr	r3, [r3, #4]
 8001176:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	691b      	ldr	r3, [r3, #16]
 800117e:	061b      	lsls	r3, r3, #24
 8001180:	497b      	ldr	r1, [pc, #492]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001182:	4313      	orrs	r3, r2
 8001184:	604b      	str	r3, [r1, #4]
 8001186:	e018      	b.n	80011ba <HAL_RCC_OscConfig+0x3ba>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001188:	4b79      	ldr	r3, [pc, #484]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 800118a:	681b      	ldr	r3, [r3, #0]
 800118c:	4a78      	ldr	r2, [pc, #480]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 800118e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8001192:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001194:	f7ff fab4 	bl	8000700 <HAL_GetTick>
 8001198:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800119a:	e008      	b.n	80011ae <HAL_RCC_OscConfig+0x3ae>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800119c:	f7ff fab0 	bl	8000700 <HAL_GetTick>
 80011a0:	4602      	mov	r2, r0
 80011a2:	693b      	ldr	r3, [r7, #16]
 80011a4:	1ad3      	subs	r3, r2, r3
 80011a6:	2b02      	cmp	r3, #2
 80011a8:	d901      	bls.n	80011ae <HAL_RCC_OscConfig+0x3ae>
          {
            return HAL_TIMEOUT;
 80011aa:	2303      	movs	r3, #3
 80011ac:	e1cf      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80011ae:	4b70      	ldr	r3, [pc, #448]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d1f0      	bne.n	800119c <HAL_RCC_OscConfig+0x39c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	f003 0308 	and.w	r3, r3, #8
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d03c      	beq.n	8001240 <HAL_RCC_OscConfig+0x440>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	695b      	ldr	r3, [r3, #20]
 80011ca:	2b00      	cmp	r3, #0
 80011cc:	d01c      	beq.n	8001208 <HAL_RCC_OscConfig+0x408>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80011ce:	4b68      	ldr	r3, [pc, #416]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80011d0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011d4:	4a66      	ldr	r2, [pc, #408]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80011d6:	f043 0301 	orr.w	r3, r3, #1
 80011da:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80011de:	f7ff fa8f 	bl	8000700 <HAL_GetTick>
 80011e2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011e4:	e008      	b.n	80011f8 <HAL_RCC_OscConfig+0x3f8>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80011e6:	f7ff fa8b 	bl	8000700 <HAL_GetTick>
 80011ea:	4602      	mov	r2, r0
 80011ec:	693b      	ldr	r3, [r7, #16]
 80011ee:	1ad3      	subs	r3, r2, r3
 80011f0:	2b02      	cmp	r3, #2
 80011f2:	d901      	bls.n	80011f8 <HAL_RCC_OscConfig+0x3f8>
        {
          return HAL_TIMEOUT;
 80011f4:	2303      	movs	r3, #3
 80011f6:	e1aa      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80011f8:	4b5d      	ldr	r3, [pc, #372]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80011fa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80011fe:	f003 0302 	and.w	r3, r3, #2
 8001202:	2b00      	cmp	r3, #0
 8001204:	d0ef      	beq.n	80011e6 <HAL_RCC_OscConfig+0x3e6>
 8001206:	e01b      	b.n	8001240 <HAL_RCC_OscConfig+0x440>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001208:	4b59      	ldr	r3, [pc, #356]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 800120a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800120e:	4a58      	ldr	r2, [pc, #352]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001210:	f023 0301 	bic.w	r3, r3, #1
 8001214:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001218:	f7ff fa72 	bl	8000700 <HAL_GetTick>
 800121c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800121e:	e008      	b.n	8001232 <HAL_RCC_OscConfig+0x432>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001220:	f7ff fa6e 	bl	8000700 <HAL_GetTick>
 8001224:	4602      	mov	r2, r0
 8001226:	693b      	ldr	r3, [r7, #16]
 8001228:	1ad3      	subs	r3, r2, r3
 800122a:	2b02      	cmp	r3, #2
 800122c:	d901      	bls.n	8001232 <HAL_RCC_OscConfig+0x432>
        {
          return HAL_TIMEOUT;
 800122e:	2303      	movs	r3, #3
 8001230:	e18d      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001232:	4b4f      	ldr	r3, [pc, #316]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001234:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8001238:	f003 0302 	and.w	r3, r3, #2
 800123c:	2b00      	cmp	r3, #0
 800123e:	d1ef      	bne.n	8001220 <HAL_RCC_OscConfig+0x420>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	f003 0304 	and.w	r3, r3, #4
 8001248:	2b00      	cmp	r3, #0
 800124a:	f000 80a5 	beq.w	8001398 <HAL_RCC_OscConfig+0x598>
  {
    FlagStatus       pwrclkchanged = RESET;
 800124e:	2300      	movs	r3, #0
 8001250:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8001252:	4b47      	ldr	r3, [pc, #284]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001254:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800125a:	2b00      	cmp	r3, #0
 800125c:	d10d      	bne.n	800127a <HAL_RCC_OscConfig+0x47a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800125e:	4b44      	ldr	r3, [pc, #272]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001262:	4a43      	ldr	r2, [pc, #268]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001264:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001268:	6593      	str	r3, [r2, #88]	; 0x58
 800126a:	4b41      	ldr	r3, [pc, #260]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 800126c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800126e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001272:	60bb      	str	r3, [r7, #8]
 8001274:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001276:	2301      	movs	r3, #1
 8001278:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800127a:	4b3e      	ldr	r3, [pc, #248]	; (8001374 <HAL_RCC_OscConfig+0x574>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001282:	2b00      	cmp	r3, #0
 8001284:	d118      	bne.n	80012b8 <HAL_RCC_OscConfig+0x4b8>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001286:	4b3b      	ldr	r3, [pc, #236]	; (8001374 <HAL_RCC_OscConfig+0x574>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4a3a      	ldr	r2, [pc, #232]	; (8001374 <HAL_RCC_OscConfig+0x574>)
 800128c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001290:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001292:	f7ff fa35 	bl	8000700 <HAL_GetTick>
 8001296:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001298:	e008      	b.n	80012ac <HAL_RCC_OscConfig+0x4ac>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800129a:	f7ff fa31 	bl	8000700 <HAL_GetTick>
 800129e:	4602      	mov	r2, r0
 80012a0:	693b      	ldr	r3, [r7, #16]
 80012a2:	1ad3      	subs	r3, r2, r3
 80012a4:	2b02      	cmp	r3, #2
 80012a6:	d901      	bls.n	80012ac <HAL_RCC_OscConfig+0x4ac>
        {
          return HAL_TIMEOUT;
 80012a8:	2303      	movs	r3, #3
 80012aa:	e150      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80012ac:	4b31      	ldr	r3, [pc, #196]	; (8001374 <HAL_RCC_OscConfig+0x574>)
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80012b4:	2b00      	cmp	r3, #0
 80012b6:	d0f0      	beq.n	800129a <HAL_RCC_OscConfig+0x49a>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80012b8:	687b      	ldr	r3, [r7, #4]
 80012ba:	689b      	ldr	r3, [r3, #8]
 80012bc:	2b01      	cmp	r3, #1
 80012be:	d108      	bne.n	80012d2 <HAL_RCC_OscConfig+0x4d2>
 80012c0:	4b2b      	ldr	r3, [pc, #172]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80012c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012c6:	4a2a      	ldr	r2, [pc, #168]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80012c8:	f043 0301 	orr.w	r3, r3, #1
 80012cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012d0:	e024      	b.n	800131c <HAL_RCC_OscConfig+0x51c>
 80012d2:	687b      	ldr	r3, [r7, #4]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	2b05      	cmp	r3, #5
 80012d8:	d110      	bne.n	80012fc <HAL_RCC_OscConfig+0x4fc>
 80012da:	4b25      	ldr	r3, [pc, #148]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80012dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012e0:	4a23      	ldr	r2, [pc, #140]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80012e2:	f043 0304 	orr.w	r3, r3, #4
 80012e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012ea:	4b21      	ldr	r3, [pc, #132]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80012ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80012f0:	4a1f      	ldr	r2, [pc, #124]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80012f2:	f043 0301 	orr.w	r3, r3, #1
 80012f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80012fa:	e00f      	b.n	800131c <HAL_RCC_OscConfig+0x51c>
 80012fc:	4b1c      	ldr	r3, [pc, #112]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 80012fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001302:	4a1b      	ldr	r2, [pc, #108]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001304:	f023 0301 	bic.w	r3, r3, #1
 8001308:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800130c:	4b18      	ldr	r3, [pc, #96]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 800130e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001312:	4a17      	ldr	r2, [pc, #92]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001314:	f023 0304 	bic.w	r3, r3, #4
 8001318:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	689b      	ldr	r3, [r3, #8]
 8001320:	2b00      	cmp	r3, #0
 8001322:	d016      	beq.n	8001352 <HAL_RCC_OscConfig+0x552>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001324:	f7ff f9ec 	bl	8000700 <HAL_GetTick>
 8001328:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800132a:	e00a      	b.n	8001342 <HAL_RCC_OscConfig+0x542>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800132c:	f7ff f9e8 	bl	8000700 <HAL_GetTick>
 8001330:	4602      	mov	r2, r0
 8001332:	693b      	ldr	r3, [r7, #16]
 8001334:	1ad3      	subs	r3, r2, r3
 8001336:	f241 3288 	movw	r2, #5000	; 0x1388
 800133a:	4293      	cmp	r3, r2
 800133c:	d901      	bls.n	8001342 <HAL_RCC_OscConfig+0x542>
        {
          return HAL_TIMEOUT;
 800133e:	2303      	movs	r3, #3
 8001340:	e105      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001342:	4b0b      	ldr	r3, [pc, #44]	; (8001370 <HAL_RCC_OscConfig+0x570>)
 8001344:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001348:	f003 0302 	and.w	r3, r3, #2
 800134c:	2b00      	cmp	r3, #0
 800134e:	d0ed      	beq.n	800132c <HAL_RCC_OscConfig+0x52c>
 8001350:	e019      	b.n	8001386 <HAL_RCC_OscConfig+0x586>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001352:	f7ff f9d5 	bl	8000700 <HAL_GetTick>
 8001356:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001358:	e00e      	b.n	8001378 <HAL_RCC_OscConfig+0x578>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800135a:	f7ff f9d1 	bl	8000700 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	693b      	ldr	r3, [r7, #16]
 8001362:	1ad3      	subs	r3, r2, r3
 8001364:	f241 3288 	movw	r2, #5000	; 0x1388
 8001368:	4293      	cmp	r3, r2
 800136a:	d905      	bls.n	8001378 <HAL_RCC_OscConfig+0x578>
        {
          return HAL_TIMEOUT;
 800136c:	2303      	movs	r3, #3
 800136e:	e0ee      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
 8001370:	40021000 	.word	0x40021000
 8001374:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8001378:	4b77      	ldr	r3, [pc, #476]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 800137a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800137e:	f003 0302 	and.w	r3, r3, #2
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1e9      	bne.n	800135a <HAL_RCC_OscConfig+0x55a>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001386:	7ffb      	ldrb	r3, [r7, #31]
 8001388:	2b01      	cmp	r3, #1
 800138a:	d105      	bne.n	8001398 <HAL_RCC_OscConfig+0x598>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800138c:	4b72      	ldr	r3, [pc, #456]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 800138e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001390:	4a71      	ldr	r2, [pc, #452]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001392:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001396:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139c:	2b00      	cmp	r3, #0
 800139e:	f000 80d5 	beq.w	800154c <HAL_RCC_OscConfig+0x74c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_CFGR_SWS_PLL)
 80013a2:	69bb      	ldr	r3, [r7, #24]
 80013a4:	2b0c      	cmp	r3, #12
 80013a6:	f000 808e 	beq.w	80014c6 <HAL_RCC_OscConfig+0x6c6>
    {
      if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80013ae:	2b02      	cmp	r3, #2
 80013b0:	d15b      	bne.n	800146a <HAL_RCC_OscConfig+0x66a>
#endif /* RCC_PLLP_SUPPORT */
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80013b2:	4b69      	ldr	r3, [pc, #420]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4a68      	ldr	r2, [pc, #416]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 80013b8:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80013bc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80013be:	f7ff f99f 	bl	8000700 <HAL_GetTick>
 80013c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013c4:	e008      	b.n	80013d8 <HAL_RCC_OscConfig+0x5d8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80013c6:	f7ff f99b 	bl	8000700 <HAL_GetTick>
 80013ca:	4602      	mov	r2, r0
 80013cc:	693b      	ldr	r3, [r7, #16]
 80013ce:	1ad3      	subs	r3, r2, r3
 80013d0:	2b02      	cmp	r3, #2
 80013d2:	d901      	bls.n	80013d8 <HAL_RCC_OscConfig+0x5d8>
          {
            return HAL_TIMEOUT;
 80013d4:	2303      	movs	r3, #3
 80013d6:	e0ba      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80013d8:	4b5f      	ldr	r3, [pc, #380]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	d1f0      	bne.n	80013c6 <HAL_RCC_OscConfig+0x5c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80013e4:	4b5c      	ldr	r3, [pc, #368]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 80013e6:	68da      	ldr	r2, [r3, #12]
 80013e8:	4b5c      	ldr	r3, [pc, #368]	; (800155c <HAL_RCC_OscConfig+0x75c>)
 80013ea:	4013      	ands	r3, r2
 80013ec:	687a      	ldr	r2, [r7, #4]
 80013ee:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80013f4:	3a01      	subs	r2, #1
 80013f6:	0112      	lsls	r2, r2, #4
 80013f8:	4311      	orrs	r1, r2
 80013fa:	687a      	ldr	r2, [r7, #4]
 80013fc:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80013fe:	0212      	lsls	r2, r2, #8
 8001400:	4311      	orrs	r1, r2
 8001402:	687a      	ldr	r2, [r7, #4]
 8001404:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8001406:	0852      	lsrs	r2, r2, #1
 8001408:	3a01      	subs	r2, #1
 800140a:	0552      	lsls	r2, r2, #21
 800140c:	4311      	orrs	r1, r2
 800140e:	687a      	ldr	r2, [r7, #4]
 8001410:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8001412:	0852      	lsrs	r2, r2, #1
 8001414:	3a01      	subs	r2, #1
 8001416:	0652      	lsls	r2, r2, #25
 8001418:	4311      	orrs	r1, r2
 800141a:	687a      	ldr	r2, [r7, #4]
 800141c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800141e:	0912      	lsrs	r2, r2, #4
 8001420:	0452      	lsls	r2, r2, #17
 8001422:	430a      	orrs	r2, r1
 8001424:	494c      	ldr	r1, [pc, #304]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001426:	4313      	orrs	r3, r2
 8001428:	60cb      	str	r3, [r1, #12]
#endif
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800142a:	4b4b      	ldr	r3, [pc, #300]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	4a4a      	ldr	r2, [pc, #296]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001430:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001434:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8001436:	4b48      	ldr	r3, [pc, #288]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001438:	68db      	ldr	r3, [r3, #12]
 800143a:	4a47      	ldr	r2, [pc, #284]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 800143c:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001440:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001442:	f7ff f95d 	bl	8000700 <HAL_GetTick>
 8001446:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8001448:	e008      	b.n	800145c <HAL_RCC_OscConfig+0x65c>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800144a:	f7ff f959 	bl	8000700 <HAL_GetTick>
 800144e:	4602      	mov	r2, r0
 8001450:	693b      	ldr	r3, [r7, #16]
 8001452:	1ad3      	subs	r3, r2, r3
 8001454:	2b02      	cmp	r3, #2
 8001456:	d901      	bls.n	800145c <HAL_RCC_OscConfig+0x65c>
          {
            return HAL_TIMEOUT;
 8001458:	2303      	movs	r3, #3
 800145a:	e078      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800145c:	4b3e      	ldr	r3, [pc, #248]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d0f0      	beq.n	800144a <HAL_RCC_OscConfig+0x64a>
 8001468:	e070      	b.n	800154c <HAL_RCC_OscConfig+0x74c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800146a:	4b3b      	ldr	r3, [pc, #236]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	4a3a      	ldr	r2, [pc, #232]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001470:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001474:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8001476:	4b38      	ldr	r3, [pc, #224]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 800147e:	2b00      	cmp	r3, #0
 8001480:	d105      	bne.n	800148e <HAL_RCC_OscConfig+0x68e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8001482:	4b35      	ldr	r3, [pc, #212]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001484:	68db      	ldr	r3, [r3, #12]
 8001486:	4a34      	ldr	r2, [pc, #208]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001488:	f023 0303 	bic.w	r3, r3, #3
 800148c:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 800148e:	4b32      	ldr	r3, [pc, #200]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001490:	68db      	ldr	r3, [r3, #12]
 8001492:	4a31      	ldr	r2, [pc, #196]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 8001494:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8001498:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800149c:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800149e:	f7ff f92f 	bl	8000700 <HAL_GetTick>
 80014a2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014a4:	e008      	b.n	80014b8 <HAL_RCC_OscConfig+0x6b8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80014a6:	f7ff f92b 	bl	8000700 <HAL_GetTick>
 80014aa:	4602      	mov	r2, r0
 80014ac:	693b      	ldr	r3, [r7, #16]
 80014ae:	1ad3      	subs	r3, r2, r3
 80014b0:	2b02      	cmp	r3, #2
 80014b2:	d901      	bls.n	80014b8 <HAL_RCC_OscConfig+0x6b8>
          {
            return HAL_TIMEOUT;
 80014b4:	2303      	movs	r3, #3
 80014b6:	e04a      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80014b8:	4b27      	ldr	r3, [pc, #156]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1f0      	bne.n	80014a6 <HAL_RCC_OscConfig+0x6a6>
 80014c4:	e042      	b.n	800154c <HAL_RCC_OscConfig+0x74c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80014ca:	2b01      	cmp	r3, #1
 80014cc:	d101      	bne.n	80014d2 <HAL_RCC_OscConfig+0x6d2>
      {
        return HAL_ERROR;
 80014ce:	2301      	movs	r3, #1
 80014d0:	e03d      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
      }
      else
      {
        pll_config = RCC->PLLCFGR;
 80014d2:	4b21      	ldr	r3, [pc, #132]	; (8001558 <HAL_RCC_OscConfig+0x758>)
 80014d4:	68db      	ldr	r3, [r3, #12]
 80014d6:	617b      	str	r3, [r7, #20]
        /* Do not return HAL_ERROR if request repeats the current configuration */
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014d8:	697b      	ldr	r3, [r7, #20]
 80014da:	f003 0203 	and.w	r2, r3, #3
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80014e2:	429a      	cmp	r2, r3
 80014e4:	d130      	bne.n	8001548 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80014e6:	697b      	ldr	r3, [r7, #20]
 80014e8:	f003 0270 	and.w	r2, r3, #112	; 0x70
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f0:	3b01      	subs	r3, #1
 80014f2:	011b      	lsls	r3, r3, #4
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f4:	429a      	cmp	r2, r3
 80014f6:	d127      	bne.n	8001548 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80014f8:	697b      	ldr	r3, [r7, #20]
 80014fa:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001502:	021b      	lsls	r3, r3, #8
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d11f      	bne.n	8001548 <HAL_RCC_OscConfig+0x748>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001508:	697b      	ldr	r3, [r7, #20]
 800150a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800150e:	687a      	ldr	r2, [r7, #4]
 8001510:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8001512:	2a07      	cmp	r2, #7
 8001514:	bf14      	ite	ne
 8001516:	2201      	movne	r2, #1
 8001518:	2200      	moveq	r2, #0
 800151a:	b2d2      	uxtb	r2, r2
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800151c:	4293      	cmp	r3, r2
 800151e:	d113      	bne.n	8001548 <HAL_RCC_OscConfig+0x748>
#endif
#endif
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800152a:	085b      	lsrs	r3, r3, #1
 800152c:	3b01      	subs	r3, #1
 800152e:	055b      	lsls	r3, r3, #21
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8001530:	429a      	cmp	r2, r3
 8001532:	d109      	bne.n	8001548 <HAL_RCC_OscConfig+0x748>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153e:	085b      	lsrs	r3, r3, #1
 8001540:	3b01      	subs	r3, #1
 8001542:	065b      	lsls	r3, r3, #25
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8001544:	429a      	cmp	r2, r3
 8001546:	d001      	beq.n	800154c <HAL_RCC_OscConfig+0x74c>
        {
          return HAL_ERROR;
 8001548:	2301      	movs	r3, #1
 800154a:	e000      	b.n	800154e <HAL_RCC_OscConfig+0x74e>
        }
      }
    }
  }
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	3720      	adds	r7, #32
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	f99d808c 	.word	0xf99d808c

08001560 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	2b00      	cmp	r3, #0
 800156e:	d101      	bne.n	8001574 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001570:	2301      	movs	r3, #1
 8001572:	e0c8      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001574:	4b66      	ldr	r3, [pc, #408]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	f003 0307 	and.w	r3, r3, #7
 800157c:	683a      	ldr	r2, [r7, #0]
 800157e:	429a      	cmp	r2, r3
 8001580:	d910      	bls.n	80015a4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001582:	4b63      	ldr	r3, [pc, #396]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f023 0207 	bic.w	r2, r3, #7
 800158a:	4961      	ldr	r1, [pc, #388]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 800158c:	683b      	ldr	r3, [r7, #0]
 800158e:	4313      	orrs	r3, r2
 8001590:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001592:	4b5f      	ldr	r3, [pc, #380]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	f003 0307 	and.w	r3, r3, #7
 800159a:	683a      	ldr	r2, [r7, #0]
 800159c:	429a      	cmp	r2, r3
 800159e:	d001      	beq.n	80015a4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 80015a0:	2301      	movs	r3, #1
 80015a2:	e0b0      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f003 0301 	and.w	r3, r3, #1
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d04c      	beq.n	800164a <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	2b03      	cmp	r3, #3
 80015b6:	d107      	bne.n	80015c8 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80015b8:	4b56      	ldr	r3, [pc, #344]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d121      	bne.n	8001608 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	e09e      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	685b      	ldr	r3, [r3, #4]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d107      	bne.n	80015e0 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80015d0:	4b50      	ldr	r3, [pc, #320]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d115      	bne.n	8001608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015dc:	2301      	movs	r3, #1
 80015de:	e092      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d107      	bne.n	80015f8 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80015e8:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	f003 0302 	and.w	r3, r3, #2
 80015f0:	2b00      	cmp	r3, #0
 80015f2:	d109      	bne.n	8001608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 80015f4:	2301      	movs	r3, #1
 80015f6:	e086      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80015f8:	4b46      	ldr	r3, [pc, #280]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80015fa:	681b      	ldr	r3, [r3, #0]
 80015fc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001600:	2b00      	cmp	r3, #0
 8001602:	d101      	bne.n	8001608 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8001604:	2301      	movs	r3, #1
 8001606:	e07e      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8001608:	4b42      	ldr	r3, [pc, #264]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 800160a:	689b      	ldr	r3, [r3, #8]
 800160c:	f023 0203 	bic.w	r2, r3, #3
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	685b      	ldr	r3, [r3, #4]
 8001614:	493f      	ldr	r1, [pc, #252]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 8001616:	4313      	orrs	r3, r2
 8001618:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800161a:	f7ff f871 	bl	8000700 <HAL_GetTick>
 800161e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001620:	e00a      	b.n	8001638 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001622:	f7ff f86d 	bl	8000700 <HAL_GetTick>
 8001626:	4602      	mov	r2, r0
 8001628:	68fb      	ldr	r3, [r7, #12]
 800162a:	1ad3      	subs	r3, r2, r3
 800162c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001630:	4293      	cmp	r3, r2
 8001632:	d901      	bls.n	8001638 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8001634:	2303      	movs	r3, #3
 8001636:	e066      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001638:	4b36      	ldr	r3, [pc, #216]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 800163a:	689b      	ldr	r3, [r3, #8]
 800163c:	f003 020c 	and.w	r2, r3, #12
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	009b      	lsls	r3, r3, #2
 8001646:	429a      	cmp	r2, r3
 8001648:	d1eb      	bne.n	8001622 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	2b00      	cmp	r3, #0
 8001654:	d008      	beq.n	8001668 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001656:	4b2f      	ldr	r3, [pc, #188]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 8001658:	689b      	ldr	r3, [r3, #8]
 800165a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	689b      	ldr	r3, [r3, #8]
 8001662:	492c      	ldr	r1, [pc, #176]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 8001664:	4313      	orrs	r3, r2
 8001666:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8001668:	4b29      	ldr	r3, [pc, #164]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	f003 0307 	and.w	r3, r3, #7
 8001670:	683a      	ldr	r2, [r7, #0]
 8001672:	429a      	cmp	r2, r3
 8001674:	d210      	bcs.n	8001698 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001676:	4b26      	ldr	r3, [pc, #152]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	f023 0207 	bic.w	r2, r3, #7
 800167e:	4924      	ldr	r1, [pc, #144]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 8001680:	683b      	ldr	r3, [r7, #0]
 8001682:	4313      	orrs	r3, r2
 8001684:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001686:	4b22      	ldr	r3, [pc, #136]	; (8001710 <HAL_RCC_ClockConfig+0x1b0>)
 8001688:	681b      	ldr	r3, [r3, #0]
 800168a:	f003 0307 	and.w	r3, r3, #7
 800168e:	683a      	ldr	r2, [r7, #0]
 8001690:	429a      	cmp	r2, r3
 8001692:	d001      	beq.n	8001698 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8001694:	2301      	movs	r3, #1
 8001696:	e036      	b.n	8001706 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f003 0304 	and.w	r3, r3, #4
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d008      	beq.n	80016b6 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80016a4:	4b1b      	ldr	r3, [pc, #108]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80016a6:	689b      	ldr	r3, [r3, #8]
 80016a8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	68db      	ldr	r3, [r3, #12]
 80016b0:	4918      	ldr	r1, [pc, #96]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80016b2:	4313      	orrs	r3, r2
 80016b4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f003 0308 	and.w	r3, r3, #8
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d009      	beq.n	80016d6 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80016c2:	4b14      	ldr	r3, [pc, #80]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80016c4:	689b      	ldr	r3, [r3, #8]
 80016c6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	691b      	ldr	r3, [r3, #16]
 80016ce:	00db      	lsls	r3, r3, #3
 80016d0:	4910      	ldr	r1, [pc, #64]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80016d2:	4313      	orrs	r3, r2
 80016d4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80016d6:	f000 f825 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 80016da:	4601      	mov	r1, r0
 80016dc:	4b0d      	ldr	r3, [pc, #52]	; (8001714 <HAL_RCC_ClockConfig+0x1b4>)
 80016de:	689b      	ldr	r3, [r3, #8]
 80016e0:	091b      	lsrs	r3, r3, #4
 80016e2:	f003 030f 	and.w	r3, r3, #15
 80016e6:	4a0c      	ldr	r2, [pc, #48]	; (8001718 <HAL_RCC_ClockConfig+0x1b8>)
 80016e8:	5cd3      	ldrb	r3, [r2, r3]
 80016ea:	f003 031f 	and.w	r3, r3, #31
 80016ee:	fa21 f303 	lsr.w	r3, r1, r3
 80016f2:	4a0a      	ldr	r2, [pc, #40]	; (800171c <HAL_RCC_ClockConfig+0x1bc>)
 80016f4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 80016f6:	4b0a      	ldr	r3, [pc, #40]	; (8001720 <HAL_RCC_ClockConfig+0x1c0>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	4618      	mov	r0, r3
 80016fc:	f7fe ffb4 	bl	8000668 <HAL_InitTick>
 8001700:	4603      	mov	r3, r0
 8001702:	72fb      	strb	r3, [r7, #11]

  return status;
 8001704:	7afb      	ldrb	r3, [r7, #11]
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	40022000 	.word	0x40022000
 8001714:	40021000 	.word	0x40021000
 8001718:	080033e8 	.word	0x080033e8
 800171c:	2000000c 	.word	0x2000000c
 8001720:	20000000 	.word	0x20000000

08001724 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800172a:	2300      	movs	r3, #0
 800172c:	61fb      	str	r3, [r7, #28]
 800172e:	2300      	movs	r3, #0
 8001730:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001732:	4b3d      	ldr	r3, [pc, #244]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 8001734:	689b      	ldr	r3, [r3, #8]
 8001736:	f003 030c 	and.w	r3, r3, #12
 800173a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800173c:	4b3a      	ldr	r3, [pc, #232]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	f003 0303 	and.w	r3, r3, #3
 8001744:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8001746:	693b      	ldr	r3, [r7, #16]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d005      	beq.n	8001758 <HAL_RCC_GetSysClockFreq+0x34>
 800174c:	693b      	ldr	r3, [r7, #16]
 800174e:	2b0c      	cmp	r3, #12
 8001750:	d121      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	2b01      	cmp	r3, #1
 8001756:	d11e      	bne.n	8001796 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8001758:	4b33      	ldr	r3, [pc, #204]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f003 0308 	and.w	r3, r3, #8
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8001764:	4b30      	ldr	r3, [pc, #192]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 8001766:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800176a:	0a1b      	lsrs	r3, r3, #8
 800176c:	f003 030f 	and.w	r3, r3, #15
 8001770:	61fb      	str	r3, [r7, #28]
 8001772:	e005      	b.n	8001780 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8001774:	4b2c      	ldr	r3, [pc, #176]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	091b      	lsrs	r3, r3, #4
 800177a:	f003 030f 	and.w	r3, r3, #15
 800177e:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8001780:	4a2a      	ldr	r2, [pc, #168]	; (800182c <HAL_RCC_GetSysClockFreq+0x108>)
 8001782:	69fb      	ldr	r3, [r7, #28]
 8001784:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001788:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800178a:	693b      	ldr	r3, [r7, #16]
 800178c:	2b00      	cmp	r3, #0
 800178e:	d10d      	bne.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8001790:	69fb      	ldr	r3, [r7, #28]
 8001792:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8001794:	e00a      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8001796:	693b      	ldr	r3, [r7, #16]
 8001798:	2b04      	cmp	r3, #4
 800179a:	d102      	bne.n	80017a2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800179c:	4b24      	ldr	r3, [pc, #144]	; (8001830 <HAL_RCC_GetSysClockFreq+0x10c>)
 800179e:	61bb      	str	r3, [r7, #24]
 80017a0:	e004      	b.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	2b08      	cmp	r3, #8
 80017a6:	d101      	bne.n	80017ac <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80017a8:	4b22      	ldr	r3, [pc, #136]	; (8001834 <HAL_RCC_GetSysClockFreq+0x110>)
 80017aa:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80017ac:	693b      	ldr	r3, [r7, #16]
 80017ae:	2b0c      	cmp	r3, #12
 80017b0:	d133      	bne.n	800181a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80017b2:	4b1d      	ldr	r3, [pc, #116]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 80017b4:	68db      	ldr	r3, [r3, #12]
 80017b6:	f003 0303 	and.w	r3, r3, #3
 80017ba:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80017bc:	68bb      	ldr	r3, [r7, #8]
 80017be:	2b02      	cmp	r3, #2
 80017c0:	d002      	beq.n	80017c8 <HAL_RCC_GetSysClockFreq+0xa4>
 80017c2:	2b03      	cmp	r3, #3
 80017c4:	d003      	beq.n	80017ce <HAL_RCC_GetSysClockFreq+0xaa>
 80017c6:	e005      	b.n	80017d4 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80017c8:	4b19      	ldr	r3, [pc, #100]	; (8001830 <HAL_RCC_GetSysClockFreq+0x10c>)
 80017ca:	617b      	str	r3, [r7, #20]
      break;
 80017cc:	e005      	b.n	80017da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 80017ce:	4b19      	ldr	r3, [pc, #100]	; (8001834 <HAL_RCC_GetSysClockFreq+0x110>)
 80017d0:	617b      	str	r3, [r7, #20]
      break;
 80017d2:	e002      	b.n	80017da <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 80017d4:	69fb      	ldr	r3, [r7, #28]
 80017d6:	617b      	str	r3, [r7, #20]
      break;
 80017d8:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80017da:	4b13      	ldr	r3, [pc, #76]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	091b      	lsrs	r3, r3, #4
 80017e0:	f003 0307 	and.w	r3, r3, #7
 80017e4:	3301      	adds	r3, #1
 80017e6:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 80017e8:	4b0f      	ldr	r3, [pc, #60]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 80017ea:	68db      	ldr	r3, [r3, #12]
 80017ec:	0a1b      	lsrs	r3, r3, #8
 80017ee:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80017f2:	697a      	ldr	r2, [r7, #20]
 80017f4:	fb02 f203 	mul.w	r2, r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80017fe:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8001800:	4b09      	ldr	r3, [pc, #36]	; (8001828 <HAL_RCC_GetSysClockFreq+0x104>)
 8001802:	68db      	ldr	r3, [r3, #12]
 8001804:	0e5b      	lsrs	r3, r3, #25
 8001806:	f003 0303 	and.w	r3, r3, #3
 800180a:	3301      	adds	r3, #1
 800180c:	005b      	lsls	r3, r3, #1
 800180e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8001810:	697a      	ldr	r2, [r7, #20]
 8001812:	683b      	ldr	r3, [r7, #0]
 8001814:	fbb2 f3f3 	udiv	r3, r2, r3
 8001818:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800181a:	69bb      	ldr	r3, [r7, #24]
}
 800181c:	4618      	mov	r0, r3
 800181e:	3724      	adds	r7, #36	; 0x24
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40021000 	.word	0x40021000
 800182c:	08003400 	.word	0x08003400
 8001830:	00f42400 	.word	0x00f42400
 8001834:	007a1200 	.word	0x007a1200

08001838 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001838:	b480      	push	{r7}
 800183a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800183c:	4b03      	ldr	r3, [pc, #12]	; (800184c <HAL_RCC_GetHCLKFreq+0x14>)
 800183e:	681b      	ldr	r3, [r3, #0]
}
 8001840:	4618      	mov	r0, r3
 8001842:	46bd      	mov	sp, r7
 8001844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001848:	4770      	bx	lr
 800184a:	bf00      	nop
 800184c:	2000000c 	.word	0x2000000c

08001850 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8001854:	f7ff fff0 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8001858:	4601      	mov	r1, r0
 800185a:	4b06      	ldr	r3, [pc, #24]	; (8001874 <HAL_RCC_GetPCLK1Freq+0x24>)
 800185c:	689b      	ldr	r3, [r3, #8]
 800185e:	0a1b      	lsrs	r3, r3, #8
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	4a04      	ldr	r2, [pc, #16]	; (8001878 <HAL_RCC_GetPCLK1Freq+0x28>)
 8001866:	5cd3      	ldrb	r3, [r2, r3]
 8001868:	f003 031f 	and.w	r3, r3, #31
 800186c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001870:	4618      	mov	r0, r3
 8001872:	bd80      	pop	{r7, pc}
 8001874:	40021000 	.word	0x40021000
 8001878:	080033f8 	.word	0x080033f8

0800187c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8001880:	f7ff ffda 	bl	8001838 <HAL_RCC_GetHCLKFreq>
 8001884:	4601      	mov	r1, r0
 8001886:	4b06      	ldr	r3, [pc, #24]	; (80018a0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001888:	689b      	ldr	r3, [r3, #8]
 800188a:	0adb      	lsrs	r3, r3, #11
 800188c:	f003 0307 	and.w	r3, r3, #7
 8001890:	4a04      	ldr	r2, [pc, #16]	; (80018a4 <HAL_RCC_GetPCLK2Freq+0x28>)
 8001892:	5cd3      	ldrb	r3, [r2, r3]
 8001894:	f003 031f 	and.w	r3, r3, #31
 8001898:	fa21 f303 	lsr.w	r3, r1, r3
}
 800189c:	4618      	mov	r0, r3
 800189e:	bd80      	pop	{r7, pc}
 80018a0:	40021000 	.word	0x40021000
 80018a4:	080033f8 	.word	0x080033f8

080018a8 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b086      	sub	sp, #24
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80018b0:	2300      	movs	r3, #0
 80018b2:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80018b4:	4b2a      	ldr	r3, [pc, #168]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d003      	beq.n	80018c8 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80018c0:	f7ff fa3a 	bl	8000d38 <HAL_PWREx_GetVoltageRange>
 80018c4:	6178      	str	r0, [r7, #20]
 80018c6:	e014      	b.n	80018f2 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	4b25      	ldr	r3, [pc, #148]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018cc:	4a24      	ldr	r2, [pc, #144]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80018d2:	6593      	str	r3, [r2, #88]	; 0x58
 80018d4:	4b22      	ldr	r3, [pc, #136]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80018dc:	60fb      	str	r3, [r7, #12]
 80018de:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 80018e0:	f7ff fa2a 	bl	8000d38 <HAL_PWREx_GetVoltageRange>
 80018e4:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 80018e6:	4b1e      	ldr	r3, [pc, #120]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	4a1d      	ldr	r2, [pc, #116]	; (8001960 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80018ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80018f0:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 80018f2:	697b      	ldr	r3, [r7, #20]
 80018f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80018f8:	d10b      	bne.n	8001912 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	2b80      	cmp	r3, #128	; 0x80
 80018fe:	d919      	bls.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	2ba0      	cmp	r3, #160	; 0xa0
 8001904:	d902      	bls.n	800190c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001906:	2302      	movs	r3, #2
 8001908:	613b      	str	r3, [r7, #16]
 800190a:	e013      	b.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800190c:	2301      	movs	r3, #1
 800190e:	613b      	str	r3, [r7, #16]
 8001910:	e010      	b.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	2b80      	cmp	r3, #128	; 0x80
 8001916:	d902      	bls.n	800191e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8001918:	2303      	movs	r3, #3
 800191a:	613b      	str	r3, [r7, #16]
 800191c:	e00a      	b.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b80      	cmp	r3, #128	; 0x80
 8001922:	d102      	bne.n	800192a <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8001924:	2302      	movs	r3, #2
 8001926:	613b      	str	r3, [r7, #16]
 8001928:	e004      	b.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	2b70      	cmp	r3, #112	; 0x70
 800192e:	d101      	bne.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8001930:	2301      	movs	r3, #1
 8001932:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001934:	4b0b      	ldr	r3, [pc, #44]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	f023 0207 	bic.w	r2, r3, #7
 800193c:	4909      	ldr	r1, [pc, #36]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800193e:	693b      	ldr	r3, [r7, #16]
 8001940:	4313      	orrs	r3, r2
 8001942:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001944:	4b07      	ldr	r3, [pc, #28]	; (8001964 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f003 0307 	and.w	r3, r3, #7
 800194c:	693a      	ldr	r2, [r7, #16]
 800194e:	429a      	cmp	r2, r3
 8001950:	d001      	beq.n	8001956 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8001952:	2301      	movs	r3, #1
 8001954:	e000      	b.n	8001958 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 8001956:	2300      	movs	r3, #0
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}
 8001960:	40021000 	.word	0x40021000
 8001964:	40022000 	.word	0x40022000

08001968 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b086      	sub	sp, #24
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8001970:	2300      	movs	r3, #0
 8001972:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8001974:	2300      	movs	r3, #0
 8001976:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001980:	2b00      	cmp	r3, #0
 8001982:	d03f      	beq.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8001988:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800198c:	d01c      	beq.n	80019c8 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800198e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001992:	d802      	bhi.n	800199a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8001994:	2b00      	cmp	r3, #0
 8001996:	d00e      	beq.n	80019b6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8001998:	e01f      	b.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x72>
 800199a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800199e:	d003      	beq.n	80019a8 <HAL_RCCEx_PeriphCLKConfig+0x40>
 80019a0:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80019a4:	d01c      	beq.n	80019e0 <HAL_RCCEx_PeriphCLKConfig+0x78>
 80019a6:	e018      	b.n	80019da <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated form System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80019a8:	4b85      	ldr	r3, [pc, #532]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019aa:	68db      	ldr	r3, [r3, #12]
 80019ac:	4a84      	ldr	r2, [pc, #528]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80019b2:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019b4:	e015      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	3304      	adds	r3, #4
 80019ba:	2100      	movs	r1, #0
 80019bc:	4618      	mov	r0, r3
 80019be:	f000 fab9 	bl	8001f34 <RCCEx_PLLSAI1_Config>
 80019c2:	4603      	mov	r3, r0
 80019c4:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019c6:	e00c      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	3320      	adds	r3, #32
 80019cc:	2100      	movs	r1, #0
 80019ce:	4618      	mov	r0, r3
 80019d0:	f000 fba0 	bl	8002114 <RCCEx_PLLSAI2_Config>
 80019d4:	4603      	mov	r3, r0
 80019d6:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80019d8:	e003      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80019da:	2301      	movs	r3, #1
 80019dc:	74fb      	strb	r3, [r7, #19]
      break;
 80019de:	e000      	b.n	80019e2 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 80019e0:	bf00      	nop
    }

    if(ret == HAL_OK)
 80019e2:	7cfb      	ldrb	r3, [r7, #19]
 80019e4:	2b00      	cmp	r3, #0
 80019e6:	d10b      	bne.n	8001a00 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80019e8:	4b75      	ldr	r3, [pc, #468]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80019ee:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80019f6:	4972      	ldr	r1, [pc, #456]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80019f8:	4313      	orrs	r3, r2
 80019fa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80019fe:	e001      	b.n	8001a04 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d03f      	beq.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a18:	d01c      	beq.n	8001a54 <HAL_RCCEx_PeriphCLKConfig+0xec>
 8001a1a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a1e:	d802      	bhi.n	8001a26 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 8001a20:	2b00      	cmp	r3, #0
 8001a22:	d00e      	beq.n	8001a42 <HAL_RCCEx_PeriphCLKConfig+0xda>
 8001a24:	e01f      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 8001a26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8001a2a:	d003      	beq.n	8001a34 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 8001a2c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8001a30:	d01c      	beq.n	8001a6c <HAL_RCCEx_PeriphCLKConfig+0x104>
 8001a32:	e018      	b.n	8001a66 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated form System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8001a34:	4b62      	ldr	r3, [pc, #392]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a36:	68db      	ldr	r3, [r3, #12]
 8001a38:	4a61      	ldr	r2, [pc, #388]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a3a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001a3e:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a40:	e015      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	3304      	adds	r3, #4
 8001a46:	2100      	movs	r1, #0
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f000 fa73 	bl	8001f34 <RCCEx_PLLSAI1_Config>
 8001a4e:	4603      	mov	r3, r0
 8001a50:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a52:	e00c      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	3320      	adds	r3, #32
 8001a58:	2100      	movs	r1, #0
 8001a5a:	4618      	mov	r0, r3
 8001a5c:	f000 fb5a 	bl	8002114 <RCCEx_PLLSAI2_Config>
 8001a60:	4603      	mov	r3, r0
 8001a62:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 8001a64:	e003      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8001a66:	2301      	movs	r3, #1
 8001a68:	74fb      	strb	r3, [r7, #19]
      break;
 8001a6a:	e000      	b.n	8001a6e <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 8001a6c:	bf00      	nop
    }

    if(ret == HAL_OK)
 8001a6e:	7cfb      	ldrb	r3, [r7, #19]
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d10b      	bne.n	8001a8c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8001a74:	4b52      	ldr	r3, [pc, #328]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001a7a:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001a82:	494f      	ldr	r1, [pc, #316]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001a84:	4313      	orrs	r3, r2
 8001a86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8001a8a:	e001      	b.n	8001a90 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001a8c:	7cfb      	ldrb	r3, [r7, #19]
 8001a8e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	f000 80a0 	beq.w	8001bde <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8001aa2:	4b47      	ldr	r3, [pc, #284]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aa4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001aa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001aaa:	2b00      	cmp	r3, #0
 8001aac:	d101      	bne.n	8001ab2 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e000      	b.n	8001ab4 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d00d      	beq.n	8001ad4 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001ab8:	4b41      	ldr	r3, [pc, #260]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001abc:	4a40      	ldr	r2, [pc, #256]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001abe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ac2:	6593      	str	r3, [r2, #88]	; 0x58
 8001ac4:	4b3e      	ldr	r3, [pc, #248]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001acc:	60bb      	str	r3, [r7, #8]
 8001ace:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ad0:	2301      	movs	r3, #1
 8001ad2:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001ad4:	4b3b      	ldr	r3, [pc, #236]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a3a      	ldr	r2, [pc, #232]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001ada:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001ade:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001ae0:	f7fe fe0e 	bl	8000700 <HAL_GetTick>
 8001ae4:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001ae6:	e009      	b.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001ae8:	f7fe fe0a 	bl	8000700 <HAL_GetTick>
 8001aec:	4602      	mov	r2, r0
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	1ad3      	subs	r3, r2, r3
 8001af2:	2b02      	cmp	r3, #2
 8001af4:	d902      	bls.n	8001afc <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8001af6:	2303      	movs	r3, #3
 8001af8:	74fb      	strb	r3, [r7, #19]
        break;
 8001afa:	e005      	b.n	8001b08 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8001afc:	4b31      	ldr	r3, [pc, #196]	; (8001bc4 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d0ef      	beq.n	8001ae8 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8001b08:	7cfb      	ldrb	r3, [r7, #19]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d15c      	bne.n	8001bc8 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8001b0e:	4b2c      	ldr	r3, [pc, #176]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b14:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8001b18:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b00      	cmp	r3, #0
 8001b1e:	d01f      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b26:	697a      	ldr	r2, [r7, #20]
 8001b28:	429a      	cmp	r2, r3
 8001b2a:	d019      	beq.n	8001b60 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8001b2c:	4b24      	ldr	r3, [pc, #144]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b32:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8001b36:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8001b38:	4b21      	ldr	r3, [pc, #132]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b3e:	4a20      	ldr	r2, [pc, #128]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001b44:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8001b48:	4b1d      	ldr	r3, [pc, #116]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b4e:	4a1c      	ldr	r2, [pc, #112]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b50:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001b54:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8001b58:	4a19      	ldr	r2, [pc, #100]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b5a:	697b      	ldr	r3, [r7, #20]
 8001b5c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	f003 0301 	and.w	r3, r3, #1
 8001b66:	2b00      	cmp	r3, #0
 8001b68:	d016      	beq.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b6a:	f7fe fdc9 	bl	8000700 <HAL_GetTick>
 8001b6e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b70:	e00b      	b.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b72:	f7fe fdc5 	bl	8000700 <HAL_GetTick>
 8001b76:	4602      	mov	r2, r0
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	1ad3      	subs	r3, r2, r3
 8001b7c:	f241 3288 	movw	r2, #5000	; 0x1388
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d902      	bls.n	8001b8a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8001b84:	2303      	movs	r3, #3
 8001b86:	74fb      	strb	r3, [r7, #19]
            break;
 8001b88:	e006      	b.n	8001b98 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8001b8a:	4b0d      	ldr	r3, [pc, #52]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001b8c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001b90:	f003 0302 	and.w	r3, r3, #2
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d0ec      	beq.n	8001b72 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8001b98:	7cfb      	ldrb	r3, [r7, #19]
 8001b9a:	2b00      	cmp	r3, #0
 8001b9c:	d10c      	bne.n	8001bb8 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001b9e:	4b08      	ldr	r3, [pc, #32]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001ba0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8001ba4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001bae:	4904      	ldr	r1, [pc, #16]	; (8001bc0 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8001bb6:	e009      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8001bb8:	7cfb      	ldrb	r3, [r7, #19]
 8001bba:	74bb      	strb	r3, [r7, #18]
 8001bbc:	e006      	b.n	8001bcc <HAL_RCCEx_PeriphCLKConfig+0x264>
 8001bbe:	bf00      	nop
 8001bc0:	40021000 	.word	0x40021000
 8001bc4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8001bc8:	7cfb      	ldrb	r3, [r7, #19]
 8001bca:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001bcc:	7c7b      	ldrb	r3, [r7, #17]
 8001bce:	2b01      	cmp	r3, #1
 8001bd0:	d105      	bne.n	8001bde <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001bd2:	4b9e      	ldr	r3, [pc, #632]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bd6:	4a9d      	ldr	r2, [pc, #628]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bd8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001bdc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	f003 0301 	and.w	r3, r3, #1
 8001be6:	2b00      	cmp	r3, #0
 8001be8:	d00a      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8001bea:	4b98      	ldr	r3, [pc, #608]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bf0:	f023 0203 	bic.w	r2, r3, #3
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf8:	4994      	ldr	r1, [pc, #592]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001bfa:	4313      	orrs	r3, r2
 8001bfc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d00a      	beq.n	8001c22 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8001c0c:	4b8f      	ldr	r3, [pc, #572]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c12:	f023 020c 	bic.w	r2, r3, #12
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c1a:	498c      	ldr	r1, [pc, #560]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	f003 0304 	and.w	r3, r3, #4
 8001c2a:	2b00      	cmp	r3, #0
 8001c2c:	d00a      	beq.n	8001c44 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8001c2e:	4b87      	ldr	r3, [pc, #540]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c30:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c34:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c3c:	4983      	ldr	r1, [pc, #524]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f003 0308 	and.w	r3, r3, #8
 8001c4c:	2b00      	cmp	r3, #0
 8001c4e:	d00a      	beq.n	8001c66 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8001c50:	4b7e      	ldr	r3, [pc, #504]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c56:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c5e:	497b      	ldr	r1, [pc, #492]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c60:	4313      	orrs	r3, r2
 8001c62:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f003 0310 	and.w	r3, r3, #16
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d00a      	beq.n	8001c88 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8001c72:	4b76      	ldr	r3, [pc, #472]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c74:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c78:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001c80:	4972      	ldr	r1, [pc, #456]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c82:	4313      	orrs	r3, r2
 8001c84:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	f003 0320 	and.w	r3, r3, #32
 8001c90:	2b00      	cmp	r3, #0
 8001c92:	d00a      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8001c94:	4b6d      	ldr	r3, [pc, #436]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001c96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c9a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ca2:	496a      	ldr	r1, [pc, #424]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cb2:	2b00      	cmp	r3, #0
 8001cb4:	d00a      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8001cb6:	4b65      	ldr	r3, [pc, #404]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cb8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cbc:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cc4:	4961      	ldr	r1, [pc, #388]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cc6:	4313      	orrs	r3, r2
 8001cc8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	681b      	ldr	r3, [r3, #0]
 8001cd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d00a      	beq.n	8001cee <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8001cd8:	4b5c      	ldr	r3, [pc, #368]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001cde:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ce6:	4959      	ldr	r1, [pc, #356]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001ce8:	4313      	orrs	r3, r2
 8001cea:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d00a      	beq.n	8001d10 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8001cfa:	4b54      	ldr	r3, [pc, #336]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001cfc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d00:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001d08:	4950      	ldr	r1, [pc, #320]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d00a      	beq.n	8001d32 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8001d1c:	4b4b      	ldr	r3, [pc, #300]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d22:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d2a:	4948      	ldr	r1, [pc, #288]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d00a      	beq.n	8001d54 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8001d3e:	4b43      	ldr	r3, [pc, #268]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d40:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d44:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d4c:	493f      	ldr	r1, [pc, #252]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d028      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8001d60:	4b3a      	ldr	r3, [pc, #232]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d66:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d6e:	4937      	ldr	r1, [pc, #220]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d70:	4313      	orrs	r3, r2
 8001d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d7a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001d7e:	d106      	bne.n	8001d8e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001d80:	4b32      	ldr	r3, [pc, #200]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d82:	68db      	ldr	r3, [r3, #12]
 8001d84:	4a31      	ldr	r2, [pc, #196]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001d86:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001d8a:	60d3      	str	r3, [r2, #12]
 8001d8c:	e011      	b.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001d92:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001d96:	d10c      	bne.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	3304      	adds	r3, #4
 8001d9c:	2101      	movs	r1, #1
 8001d9e:	4618      	mov	r0, r3
 8001da0:	f000 f8c8 	bl	8001f34 <RCCEx_PLLSAI1_Config>
 8001da4:	4603      	mov	r3, r0
 8001da6:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8001da8:	7cfb      	ldrb	r3, [r7, #19]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d001      	beq.n	8001db2 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 8001dae:	7cfb      	ldrb	r3, [r7, #19]
 8001db0:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d028      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8001dbe:	4b23      	ldr	r3, [pc, #140]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001dc4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dcc:	491f      	ldr	r1, [pc, #124]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001dce:	4313      	orrs	r3, r2
 8001dd0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001dd8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001ddc:	d106      	bne.n	8001dec <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001dde:	4b1b      	ldr	r3, [pc, #108]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de0:	68db      	ldr	r3, [r3, #12]
 8001de2:	4a1a      	ldr	r2, [pc, #104]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001de4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001de8:	60d3      	str	r3, [r2, #12]
 8001dea:	e011      	b.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001df0:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001df4:	d10c      	bne.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	3304      	adds	r3, #4
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	4618      	mov	r0, r3
 8001dfe:	f000 f899 	bl	8001f34 <RCCEx_PLLSAI1_Config>
 8001e02:	4603      	mov	r3, r0
 8001e04:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e06:	7cfb      	ldrb	r3, [r7, #19]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 8001e0c:	7cfb      	ldrb	r3, [r7, #19]
 8001e0e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d02b      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e1e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e22:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e2a:	4908      	ldr	r1, [pc, #32]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e36:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001e3a:	d109      	bne.n	8001e50 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8001e3c:	4b03      	ldr	r3, [pc, #12]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e3e:	68db      	ldr	r3, [r3, #12]
 8001e40:	4a02      	ldr	r2, [pc, #8]	; (8001e4c <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8001e42:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001e46:	60d3      	str	r3, [r2, #12]
 8001e48:	e014      	b.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 8001e4a:	bf00      	nop
 8001e4c:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001e54:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8001e58:	d10c      	bne.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2101      	movs	r1, #1
 8001e60:	4618      	mov	r0, r3
 8001e62:	f000 f867 	bl	8001f34 <RCCEx_PLLSAI1_Config>
 8001e66:	4603      	mov	r3, r0
 8001e68:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001e6a:	7cfb      	ldrb	r3, [r7, #19]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d001      	beq.n	8001e74 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 8001e70:	7cfb      	ldrb	r3, [r7, #19]
 8001e72:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d02f      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8001e80:	4b2b      	ldr	r3, [pc, #172]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e82:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001e86:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e8e:	4928      	ldr	r1, [pc, #160]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001e90:	4313      	orrs	r3, r2
 8001e92:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001e9a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001e9e:	d10d      	bne.n	8001ebc <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	3304      	adds	r3, #4
 8001ea4:	2102      	movs	r1, #2
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	f000 f844 	bl	8001f34 <RCCEx_PLLSAI1_Config>
 8001eac:	4603      	mov	r3, r0
 8001eae:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001eb0:	7cfb      	ldrb	r3, [r7, #19]
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d014      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001eb6:	7cfb      	ldrb	r3, [r7, #19]
 8001eb8:	74bb      	strb	r3, [r7, #18]
 8001eba:	e011      	b.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8001ec0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001ec4:	d10c      	bne.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3320      	adds	r3, #32
 8001eca:	2102      	movs	r1, #2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f000 f921 	bl	8002114 <RCCEx_PLLSAI2_Config>
 8001ed2:	4603      	mov	r3, r0
 8001ed4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8001ed6:	7cfb      	ldrb	r3, [r7, #19]
 8001ed8:	2b00      	cmp	r3, #0
 8001eda:	d001      	beq.n	8001ee0 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8001edc:	7cfb      	ldrb	r3, [r7, #19]
 8001ede:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001ee8:	2b00      	cmp	r3, #0
 8001eea:	d00a      	beq.n	8001f02 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8001eec:	4b10      	ldr	r3, [pc, #64]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001eee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001ef2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001efa:	490d      	ldr	r1, [pc, #52]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d00b      	beq.n	8001f26 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8001f0e:	4b08      	ldr	r3, [pc, #32]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001f14:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8001f1e:	4904      	ldr	r1, [pc, #16]	; (8001f30 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8001f20:	4313      	orrs	r3, r2
 8001f22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8001f26:	7cbb      	ldrb	r3, [r7, #18]
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3718      	adds	r7, #24
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	40021000 	.word	0x40021000

08001f34 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b084      	sub	sp, #16
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	6078      	str	r0, [r7, #4]
 8001f3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8001f42:	4b73      	ldr	r3, [pc, #460]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f44:	68db      	ldr	r3, [r3, #12]
 8001f46:	f003 0303 	and.w	r3, r3, #3
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d018      	beq.n	8001f80 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 8001f4e:	4b70      	ldr	r3, [pc, #448]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f50:	68db      	ldr	r3, [r3, #12]
 8001f52:	f003 0203 	and.w	r2, r3, #3
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	429a      	cmp	r2, r3
 8001f5c:	d10d      	bne.n	8001f7a <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
       ||
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d009      	beq.n	8001f7a <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8001f66:	4b6a      	ldr	r3, [pc, #424]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f68:	68db      	ldr	r3, [r3, #12]
 8001f6a:	091b      	lsrs	r3, r3, #4
 8001f6c:	f003 0307 	and.w	r3, r3, #7
 8001f70:	1c5a      	adds	r2, r3, #1
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	685b      	ldr	r3, [r3, #4]
       ||
 8001f76:	429a      	cmp	r2, r3
 8001f78:	d044      	beq.n	8002004 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 8001f7a:	2301      	movs	r3, #1
 8001f7c:	73fb      	strb	r3, [r7, #15]
 8001f7e:	e041      	b.n	8002004 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	2b02      	cmp	r3, #2
 8001f86:	d00c      	beq.n	8001fa2 <RCCEx_PLLSAI1_Config+0x6e>
 8001f88:	2b03      	cmp	r3, #3
 8001f8a:	d013      	beq.n	8001fb4 <RCCEx_PLLSAI1_Config+0x80>
 8001f8c:	2b01      	cmp	r3, #1
 8001f8e:	d120      	bne.n	8001fd2 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8001f90:	4b5f      	ldr	r3, [pc, #380]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f003 0302 	and.w	r3, r3, #2
 8001f98:	2b00      	cmp	r3, #0
 8001f9a:	d11d      	bne.n	8001fd8 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 8001f9c:	2301      	movs	r3, #1
 8001f9e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fa0:	e01a      	b.n	8001fd8 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8001fa2:	4b5b      	ldr	r3, [pc, #364]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d116      	bne.n	8001fdc <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 8001fae:	2301      	movs	r3, #1
 8001fb0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001fb2:	e013      	b.n	8001fdc <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8001fb4:	4b56      	ldr	r3, [pc, #344]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d10f      	bne.n	8001fe0 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8001fc0:	4b53      	ldr	r3, [pc, #332]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d109      	bne.n	8001fe0 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 8001fcc:	2301      	movs	r3, #1
 8001fce:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8001fd0:	e006      	b.n	8001fe0 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8001fd2:	2301      	movs	r3, #1
 8001fd4:	73fb      	strb	r3, [r7, #15]
      break;
 8001fd6:	e004      	b.n	8001fe2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fd8:	bf00      	nop
 8001fda:	e002      	b.n	8001fe2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fdc:	bf00      	nop
 8001fde:	e000      	b.n	8001fe2 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8001fe0:	bf00      	nop
    }

    if(status == HAL_OK)
 8001fe2:	7bfb      	ldrb	r3, [r7, #15]
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d10d      	bne.n	8002004 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8001fe8:	4b49      	ldr	r3, [pc, #292]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6819      	ldr	r1, [r3, #0]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	685b      	ldr	r3, [r3, #4]
 8001ff8:	3b01      	subs	r3, #1
 8001ffa:	011b      	lsls	r3, r3, #4
 8001ffc:	430b      	orrs	r3, r1
 8001ffe:	4944      	ldr	r1, [pc, #272]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002000:	4313      	orrs	r3, r2
 8002002:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8002004:	7bfb      	ldrb	r3, [r7, #15]
 8002006:	2b00      	cmp	r3, #0
 8002008:	d17d      	bne.n	8002106 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800200a:	4b41      	ldr	r3, [pc, #260]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4a40      	ldr	r2, [pc, #256]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002010:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002014:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002016:	f7fe fb73 	bl	8000700 <HAL_GetTick>
 800201a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800201c:	e009      	b.n	8002032 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800201e:	f7fe fb6f 	bl	8000700 <HAL_GetTick>
 8002022:	4602      	mov	r2, r0
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	1ad3      	subs	r3, r2, r3
 8002028:	2b02      	cmp	r3, #2
 800202a:	d902      	bls.n	8002032 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800202c:	2303      	movs	r3, #3
 800202e:	73fb      	strb	r3, [r7, #15]
        break;
 8002030:	e005      	b.n	800203e <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8002032:	4b37      	ldr	r3, [pc, #220]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1ef      	bne.n	800201e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800203e:	7bfb      	ldrb	r3, [r7, #15]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d160      	bne.n	8002106 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002044:	683b      	ldr	r3, [r7, #0]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d111      	bne.n	800206e <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800204a:	4b31      	ldr	r3, [pc, #196]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 800204c:	691b      	ldr	r3, [r3, #16]
 800204e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002052:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002056:	687a      	ldr	r2, [r7, #4]
 8002058:	6892      	ldr	r2, [r2, #8]
 800205a:	0211      	lsls	r1, r2, #8
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	68d2      	ldr	r2, [r2, #12]
 8002060:	0912      	lsrs	r2, r2, #4
 8002062:	0452      	lsls	r2, r2, #17
 8002064:	430a      	orrs	r2, r1
 8002066:	492a      	ldr	r1, [pc, #168]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002068:	4313      	orrs	r3, r2
 800206a:	610b      	str	r3, [r1, #16]
 800206c:	e027      	b.n	80020be <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 800206e:	683b      	ldr	r3, [r7, #0]
 8002070:	2b01      	cmp	r3, #1
 8002072:	d112      	bne.n	800209a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8002074:	4b26      	ldr	r3, [pc, #152]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002076:	691b      	ldr	r3, [r3, #16]
 8002078:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 800207c:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6892      	ldr	r2, [r2, #8]
 8002084:	0211      	lsls	r1, r2, #8
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	6912      	ldr	r2, [r2, #16]
 800208a:	0852      	lsrs	r2, r2, #1
 800208c:	3a01      	subs	r2, #1
 800208e:	0552      	lsls	r2, r2, #21
 8002090:	430a      	orrs	r2, r1
 8002092:	491f      	ldr	r1, [pc, #124]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002094:	4313      	orrs	r3, r2
 8002096:	610b      	str	r3, [r1, #16]
 8002098:	e011      	b.n	80020be <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800209a:	4b1d      	ldr	r3, [pc, #116]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 800209c:	691b      	ldr	r3, [r3, #16]
 800209e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80020a2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80020a6:	687a      	ldr	r2, [r7, #4]
 80020a8:	6892      	ldr	r2, [r2, #8]
 80020aa:	0211      	lsls	r1, r2, #8
 80020ac:	687a      	ldr	r2, [r7, #4]
 80020ae:	6952      	ldr	r2, [r2, #20]
 80020b0:	0852      	lsrs	r2, r2, #1
 80020b2:	3a01      	subs	r2, #1
 80020b4:	0652      	lsls	r2, r2, #25
 80020b6:	430a      	orrs	r2, r1
 80020b8:	4915      	ldr	r1, [pc, #84]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80020be:	4b14      	ldr	r3, [pc, #80]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a13      	ldr	r2, [pc, #76]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020c4:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80020c8:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020ca:	f7fe fb19 	bl	8000700 <HAL_GetTick>
 80020ce:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020d0:	e009      	b.n	80020e6 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 80020d2:	f7fe fb15 	bl	8000700 <HAL_GetTick>
 80020d6:	4602      	mov	r2, r0
 80020d8:	68bb      	ldr	r3, [r7, #8]
 80020da:	1ad3      	subs	r3, r2, r3
 80020dc:	2b02      	cmp	r3, #2
 80020de:	d902      	bls.n	80020e6 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 80020e0:	2303      	movs	r3, #3
 80020e2:	73fb      	strb	r3, [r7, #15]
          break;
 80020e4:	e005      	b.n	80020f2 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 80020e6:	4b0a      	ldr	r3, [pc, #40]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0ef      	beq.n	80020d2 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 80020f2:	7bfb      	ldrb	r3, [r7, #15]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d106      	bne.n	8002106 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 80020f8:	4b05      	ldr	r3, [pc, #20]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 80020fa:	691a      	ldr	r2, [r3, #16]
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	699b      	ldr	r3, [r3, #24]
 8002100:	4903      	ldr	r1, [pc, #12]	; (8002110 <RCCEx_PLLSAI1_Config+0x1dc>)
 8002102:	4313      	orrs	r3, r2
 8002104:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8002106:	7bfb      	ldrb	r3, [r7, #15]
}
 8002108:	4618      	mov	r0, r3
 800210a:	3710      	adds	r7, #16
 800210c:	46bd      	mov	sp, r7
 800210e:	bd80      	pop	{r7, pc}
 8002110:	40021000 	.word	0x40021000

08002114 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b084      	sub	sp, #16
 8002118:	af00      	add	r7, sp, #0
 800211a:	6078      	str	r0, [r7, #4]
 800211c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800211e:	2300      	movs	r3, #0
 8002120:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8002122:	4b68      	ldr	r3, [pc, #416]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f003 0303 	and.w	r3, r3, #3
 800212a:	2b00      	cmp	r3, #0
 800212c:	d018      	beq.n	8002160 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 800212e:	4b65      	ldr	r3, [pc, #404]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002130:	68db      	ldr	r3, [r3, #12]
 8002132:	f003 0203 	and.w	r2, r3, #3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	429a      	cmp	r2, r3
 800213c:	d10d      	bne.n	800215a <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
       ||
 8002142:	2b00      	cmp	r3, #0
 8002144:	d009      	beq.n	800215a <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 8002146:	4b5f      	ldr	r3, [pc, #380]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002148:	68db      	ldr	r3, [r3, #12]
 800214a:	091b      	lsrs	r3, r3, #4
 800214c:	f003 0307 	and.w	r3, r3, #7
 8002150:	1c5a      	adds	r2, r3, #1
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	685b      	ldr	r3, [r3, #4]
       ||
 8002156:	429a      	cmp	r2, r3
 8002158:	d044      	beq.n	80021e4 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 800215a:	2301      	movs	r3, #1
 800215c:	73fb      	strb	r3, [r7, #15]
 800215e:	e041      	b.n	80021e4 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b02      	cmp	r3, #2
 8002166:	d00c      	beq.n	8002182 <RCCEx_PLLSAI2_Config+0x6e>
 8002168:	2b03      	cmp	r3, #3
 800216a:	d013      	beq.n	8002194 <RCCEx_PLLSAI2_Config+0x80>
 800216c:	2b01      	cmp	r3, #1
 800216e:	d120      	bne.n	80021b2 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8002170:	4b54      	ldr	r3, [pc, #336]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0302 	and.w	r3, r3, #2
 8002178:	2b00      	cmp	r3, #0
 800217a:	d11d      	bne.n	80021b8 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002180:	e01a      	b.n	80021b8 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8002182:	4b50      	ldr	r3, [pc, #320]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800218a:	2b00      	cmp	r3, #0
 800218c:	d116      	bne.n	80021bc <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002192:	e013      	b.n	80021bc <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8002194:	4b4b      	ldr	r3, [pc, #300]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d10f      	bne.n	80021c0 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80021a0:	4b48      	ldr	r3, [pc, #288]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d109      	bne.n	80021c0 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80021b0:	e006      	b.n	80021c0 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 80021b2:	2301      	movs	r3, #1
 80021b4:	73fb      	strb	r3, [r7, #15]
      break;
 80021b6:	e004      	b.n	80021c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021b8:	bf00      	nop
 80021ba:	e002      	b.n	80021c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021bc:	bf00      	nop
 80021be:	e000      	b.n	80021c2 <RCCEx_PLLSAI2_Config+0xae>
      break;
 80021c0:	bf00      	nop
    }

    if(status == HAL_OK)
 80021c2:	7bfb      	ldrb	r3, [r7, #15]
 80021c4:	2b00      	cmp	r3, #0
 80021c6:	d10d      	bne.n	80021e4 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80021c8:	4b3e      	ldr	r3, [pc, #248]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	6819      	ldr	r1, [r3, #0]
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	685b      	ldr	r3, [r3, #4]
 80021d8:	3b01      	subs	r3, #1
 80021da:	011b      	lsls	r3, r3, #4
 80021dc:	430b      	orrs	r3, r1
 80021de:	4939      	ldr	r1, [pc, #228]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021e0:	4313      	orrs	r3, r2
 80021e2:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 80021e4:	7bfb      	ldrb	r3, [r7, #15]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d167      	bne.n	80022ba <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80021ea:	4b36      	ldr	r3, [pc, #216]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021ec:	681b      	ldr	r3, [r3, #0]
 80021ee:	4a35      	ldr	r2, [pc, #212]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80021f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80021f4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80021f6:	f7fe fa83 	bl	8000700 <HAL_GetTick>
 80021fa:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80021fc:	e009      	b.n	8002212 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80021fe:	f7fe fa7f 	bl	8000700 <HAL_GetTick>
 8002202:	4602      	mov	r2, r0
 8002204:	68bb      	ldr	r3, [r7, #8]
 8002206:	1ad3      	subs	r3, r2, r3
 8002208:	2b02      	cmp	r3, #2
 800220a:	d902      	bls.n	8002212 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800220c:	2303      	movs	r3, #3
 800220e:	73fb      	strb	r3, [r7, #15]
        break;
 8002210:	e005      	b.n	800221e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8002212:	4b2c      	ldr	r3, [pc, #176]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1ef      	bne.n	80021fe <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800221e:	7bfb      	ldrb	r3, [r7, #15]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d14a      	bne.n	80022ba <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8002224:	683b      	ldr	r3, [r7, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d111      	bne.n	800224e <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800222a:	4b26      	ldr	r3, [pc, #152]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8002232:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002236:	687a      	ldr	r2, [r7, #4]
 8002238:	6892      	ldr	r2, [r2, #8]
 800223a:	0211      	lsls	r1, r2, #8
 800223c:	687a      	ldr	r2, [r7, #4]
 800223e:	68d2      	ldr	r2, [r2, #12]
 8002240:	0912      	lsrs	r2, r2, #4
 8002242:	0452      	lsls	r2, r2, #17
 8002244:	430a      	orrs	r2, r1
 8002246:	491f      	ldr	r1, [pc, #124]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002248:	4313      	orrs	r3, r2
 800224a:	614b      	str	r3, [r1, #20]
 800224c:	e011      	b.n	8002272 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800224e:	4b1d      	ldr	r3, [pc, #116]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002250:	695b      	ldr	r3, [r3, #20]
 8002252:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8002256:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800225a:	687a      	ldr	r2, [r7, #4]
 800225c:	6892      	ldr	r2, [r2, #8]
 800225e:	0211      	lsls	r1, r2, #8
 8002260:	687a      	ldr	r2, [r7, #4]
 8002262:	6912      	ldr	r2, [r2, #16]
 8002264:	0852      	lsrs	r2, r2, #1
 8002266:	3a01      	subs	r2, #1
 8002268:	0652      	lsls	r2, r2, #25
 800226a:	430a      	orrs	r2, r1
 800226c:	4915      	ldr	r1, [pc, #84]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800226e:	4313      	orrs	r3, r2
 8002270:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8002272:	4b14      	ldr	r3, [pc, #80]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4a13      	ldr	r2, [pc, #76]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 8002278:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800227c:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800227e:	f7fe fa3f 	bl	8000700 <HAL_GetTick>
 8002282:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8002284:	e009      	b.n	800229a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8002286:	f7fe fa3b 	bl	8000700 <HAL_GetTick>
 800228a:	4602      	mov	r2, r0
 800228c:	68bb      	ldr	r3, [r7, #8]
 800228e:	1ad3      	subs	r3, r2, r3
 8002290:	2b02      	cmp	r3, #2
 8002292:	d902      	bls.n	800229a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8002294:	2303      	movs	r3, #3
 8002296:	73fb      	strb	r3, [r7, #15]
          break;
 8002298:	e005      	b.n	80022a6 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800229a:	4b0a      	ldr	r3, [pc, #40]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80022a2:	2b00      	cmp	r3, #0
 80022a4:	d0ef      	beq.n	8002286 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 80022a6:	7bfb      	ldrb	r3, [r7, #15]
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d106      	bne.n	80022ba <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80022ac:	4b05      	ldr	r3, [pc, #20]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022ae:	695a      	ldr	r2, [r3, #20]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	695b      	ldr	r3, [r3, #20]
 80022b4:	4903      	ldr	r1, [pc, #12]	; (80022c4 <RCCEx_PLLSAI2_Config+0x1b0>)
 80022b6:	4313      	orrs	r3, r2
 80022b8:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80022ba:	7bfb      	ldrb	r3, [r7, #15]
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	40021000 	.word	0x40021000

080022c8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80022c8:	b580      	push	{r7, lr}
 80022ca:	b082      	sub	sp, #8
 80022cc:	af00      	add	r7, sp, #0
 80022ce:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d101      	bne.n	80022da <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e040      	b.n	800235c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d106      	bne.n	80022f0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	f000 fef2 	bl	80030d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	2224      	movs	r2, #36	; 0x24
 80022f4:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	681b      	ldr	r3, [r3, #0]
 80022fa:	681a      	ldr	r2, [r3, #0]
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f022 0201 	bic.w	r2, r2, #1
 8002304:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f000 f82c 	bl	8002364 <UART_SetConfig>
 800230c:	4603      	mov	r3, r0
 800230e:	2b01      	cmp	r3, #1
 8002310:	d101      	bne.n	8002316 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8002312:	2301      	movs	r3, #1
 8002314:	e022      	b.n	800235c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800231a:	2b00      	cmp	r3, #0
 800231c:	d002      	beq.n	8002324 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 800231e:	6878      	ldr	r0, [r7, #4]
 8002320:	f000 fb68 	bl	80029f4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	689a      	ldr	r2, [r3, #8]
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	681b      	ldr	r3, [r3, #0]
 8002348:	681a      	ldr	r2, [r3, #0]
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f042 0201 	orr.w	r2, r2, #1
 8002352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 fbef 	bl	8002b38 <UART_CheckIdleState>
 800235a:	4603      	mov	r3, r0
}
 800235c:	4618      	mov	r0, r3
 800235e:	3708      	adds	r7, #8
 8002360:	46bd      	mov	sp, r7
 8002362:	bd80      	pop	{r7, pc}

08002364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002364:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8002368:	b088      	sub	sp, #32
 800236a:	af00      	add	r7, sp, #0
 800236c:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 800236e:	2300      	movs	r3, #0
 8002370:	617b      	str	r3, [r7, #20]
  HAL_StatusTypeDef ret               = HAL_OK;
 8002372:	2300      	movs	r3, #0
 8002374:	74fb      	strb	r3, [r7, #19]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8002376:	2300      	movs	r3, #0
 8002378:	60fb      	str	r3, [r7, #12]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	689a      	ldr	r2, [r3, #8]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	691b      	ldr	r3, [r3, #16]
 8002382:	431a      	orrs	r2, r3
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	695b      	ldr	r3, [r3, #20]
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	69db      	ldr	r3, [r3, #28]
 800238e:	4313      	orrs	r3, r2
 8002390:	61fb      	str	r3, [r7, #28]
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681a      	ldr	r2, [r3, #0]
 8002398:	4bac      	ldr	r3, [pc, #688]	; (800264c <UART_SetConfig+0x2e8>)
 800239a:	4013      	ands	r3, r2
 800239c:	687a      	ldr	r2, [r7, #4]
 800239e:	6812      	ldr	r2, [r2, #0]
 80023a0:	69f9      	ldr	r1, [r7, #28]
 80023a2:	430b      	orrs	r3, r1
 80023a4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	685b      	ldr	r3, [r3, #4]
 80023ac:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	68da      	ldr	r2, [r3, #12]
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	430a      	orrs	r2, r1
 80023ba:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	4aa2      	ldr	r2, [pc, #648]	; (8002650 <UART_SetConfig+0x2ec>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d004      	beq.n	80023d6 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6a1b      	ldr	r3, [r3, #32]
 80023d0:	69fa      	ldr	r2, [r7, #28]
 80023d2:	4313      	orrs	r3, r2
 80023d4:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	69fa      	ldr	r2, [r7, #28]
 80023e6:	430a      	orrs	r2, r1
 80023e8:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	4a99      	ldr	r2, [pc, #612]	; (8002654 <UART_SetConfig+0x2f0>)
 80023f0:	4293      	cmp	r3, r2
 80023f2:	d121      	bne.n	8002438 <UART_SetConfig+0xd4>
 80023f4:	4b98      	ldr	r3, [pc, #608]	; (8002658 <UART_SetConfig+0x2f4>)
 80023f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80023fa:	f003 0303 	and.w	r3, r3, #3
 80023fe:	2b03      	cmp	r3, #3
 8002400:	d816      	bhi.n	8002430 <UART_SetConfig+0xcc>
 8002402:	a201      	add	r2, pc, #4	; (adr r2, 8002408 <UART_SetConfig+0xa4>)
 8002404:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002408:	08002419 	.word	0x08002419
 800240c:	08002425 	.word	0x08002425
 8002410:	0800241f 	.word	0x0800241f
 8002414:	0800242b 	.word	0x0800242b
 8002418:	2301      	movs	r3, #1
 800241a:	76fb      	strb	r3, [r7, #27]
 800241c:	e0e8      	b.n	80025f0 <UART_SetConfig+0x28c>
 800241e:	2302      	movs	r3, #2
 8002420:	76fb      	strb	r3, [r7, #27]
 8002422:	e0e5      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002424:	2304      	movs	r3, #4
 8002426:	76fb      	strb	r3, [r7, #27]
 8002428:	e0e2      	b.n	80025f0 <UART_SetConfig+0x28c>
 800242a:	2308      	movs	r3, #8
 800242c:	76fb      	strb	r3, [r7, #27]
 800242e:	e0df      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002430:	2310      	movs	r3, #16
 8002432:	76fb      	strb	r3, [r7, #27]
 8002434:	bf00      	nop
 8002436:	e0db      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4a87      	ldr	r2, [pc, #540]	; (800265c <UART_SetConfig+0x2f8>)
 800243e:	4293      	cmp	r3, r2
 8002440:	d134      	bne.n	80024ac <UART_SetConfig+0x148>
 8002442:	4b85      	ldr	r3, [pc, #532]	; (8002658 <UART_SetConfig+0x2f4>)
 8002444:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b0c      	cmp	r3, #12
 800244e:	d829      	bhi.n	80024a4 <UART_SetConfig+0x140>
 8002450:	a201      	add	r2, pc, #4	; (adr r2, 8002458 <UART_SetConfig+0xf4>)
 8002452:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002456:	bf00      	nop
 8002458:	0800248d 	.word	0x0800248d
 800245c:	080024a5 	.word	0x080024a5
 8002460:	080024a5 	.word	0x080024a5
 8002464:	080024a5 	.word	0x080024a5
 8002468:	08002499 	.word	0x08002499
 800246c:	080024a5 	.word	0x080024a5
 8002470:	080024a5 	.word	0x080024a5
 8002474:	080024a5 	.word	0x080024a5
 8002478:	08002493 	.word	0x08002493
 800247c:	080024a5 	.word	0x080024a5
 8002480:	080024a5 	.word	0x080024a5
 8002484:	080024a5 	.word	0x080024a5
 8002488:	0800249f 	.word	0x0800249f
 800248c:	2300      	movs	r3, #0
 800248e:	76fb      	strb	r3, [r7, #27]
 8002490:	e0ae      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002492:	2302      	movs	r3, #2
 8002494:	76fb      	strb	r3, [r7, #27]
 8002496:	e0ab      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002498:	2304      	movs	r3, #4
 800249a:	76fb      	strb	r3, [r7, #27]
 800249c:	e0a8      	b.n	80025f0 <UART_SetConfig+0x28c>
 800249e:	2308      	movs	r3, #8
 80024a0:	76fb      	strb	r3, [r7, #27]
 80024a2:	e0a5      	b.n	80025f0 <UART_SetConfig+0x28c>
 80024a4:	2310      	movs	r3, #16
 80024a6:	76fb      	strb	r3, [r7, #27]
 80024a8:	bf00      	nop
 80024aa:	e0a1      	b.n	80025f0 <UART_SetConfig+0x28c>
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	4a6b      	ldr	r2, [pc, #428]	; (8002660 <UART_SetConfig+0x2fc>)
 80024b2:	4293      	cmp	r3, r2
 80024b4:	d120      	bne.n	80024f8 <UART_SetConfig+0x194>
 80024b6:	4b68      	ldr	r3, [pc, #416]	; (8002658 <UART_SetConfig+0x2f4>)
 80024b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024bc:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80024c0:	2b10      	cmp	r3, #16
 80024c2:	d00f      	beq.n	80024e4 <UART_SetConfig+0x180>
 80024c4:	2b10      	cmp	r3, #16
 80024c6:	d802      	bhi.n	80024ce <UART_SetConfig+0x16a>
 80024c8:	2b00      	cmp	r3, #0
 80024ca:	d005      	beq.n	80024d8 <UART_SetConfig+0x174>
 80024cc:	e010      	b.n	80024f0 <UART_SetConfig+0x18c>
 80024ce:	2b20      	cmp	r3, #32
 80024d0:	d005      	beq.n	80024de <UART_SetConfig+0x17a>
 80024d2:	2b30      	cmp	r3, #48	; 0x30
 80024d4:	d009      	beq.n	80024ea <UART_SetConfig+0x186>
 80024d6:	e00b      	b.n	80024f0 <UART_SetConfig+0x18c>
 80024d8:	2300      	movs	r3, #0
 80024da:	76fb      	strb	r3, [r7, #27]
 80024dc:	e088      	b.n	80025f0 <UART_SetConfig+0x28c>
 80024de:	2302      	movs	r3, #2
 80024e0:	76fb      	strb	r3, [r7, #27]
 80024e2:	e085      	b.n	80025f0 <UART_SetConfig+0x28c>
 80024e4:	2304      	movs	r3, #4
 80024e6:	76fb      	strb	r3, [r7, #27]
 80024e8:	e082      	b.n	80025f0 <UART_SetConfig+0x28c>
 80024ea:	2308      	movs	r3, #8
 80024ec:	76fb      	strb	r3, [r7, #27]
 80024ee:	e07f      	b.n	80025f0 <UART_SetConfig+0x28c>
 80024f0:	2310      	movs	r3, #16
 80024f2:	76fb      	strb	r3, [r7, #27]
 80024f4:	bf00      	nop
 80024f6:	e07b      	b.n	80025f0 <UART_SetConfig+0x28c>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	4a59      	ldr	r2, [pc, #356]	; (8002664 <UART_SetConfig+0x300>)
 80024fe:	4293      	cmp	r3, r2
 8002500:	d120      	bne.n	8002544 <UART_SetConfig+0x1e0>
 8002502:	4b55      	ldr	r3, [pc, #340]	; (8002658 <UART_SetConfig+0x2f4>)
 8002504:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002508:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800250c:	2b40      	cmp	r3, #64	; 0x40
 800250e:	d00f      	beq.n	8002530 <UART_SetConfig+0x1cc>
 8002510:	2b40      	cmp	r3, #64	; 0x40
 8002512:	d802      	bhi.n	800251a <UART_SetConfig+0x1b6>
 8002514:	2b00      	cmp	r3, #0
 8002516:	d005      	beq.n	8002524 <UART_SetConfig+0x1c0>
 8002518:	e010      	b.n	800253c <UART_SetConfig+0x1d8>
 800251a:	2b80      	cmp	r3, #128	; 0x80
 800251c:	d005      	beq.n	800252a <UART_SetConfig+0x1c6>
 800251e:	2bc0      	cmp	r3, #192	; 0xc0
 8002520:	d009      	beq.n	8002536 <UART_SetConfig+0x1d2>
 8002522:	e00b      	b.n	800253c <UART_SetConfig+0x1d8>
 8002524:	2300      	movs	r3, #0
 8002526:	76fb      	strb	r3, [r7, #27]
 8002528:	e062      	b.n	80025f0 <UART_SetConfig+0x28c>
 800252a:	2302      	movs	r3, #2
 800252c:	76fb      	strb	r3, [r7, #27]
 800252e:	e05f      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002530:	2304      	movs	r3, #4
 8002532:	76fb      	strb	r3, [r7, #27]
 8002534:	e05c      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002536:	2308      	movs	r3, #8
 8002538:	76fb      	strb	r3, [r7, #27]
 800253a:	e059      	b.n	80025f0 <UART_SetConfig+0x28c>
 800253c:	2310      	movs	r3, #16
 800253e:	76fb      	strb	r3, [r7, #27]
 8002540:	bf00      	nop
 8002542:	e055      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	4a47      	ldr	r2, [pc, #284]	; (8002668 <UART_SetConfig+0x304>)
 800254a:	4293      	cmp	r3, r2
 800254c:	d124      	bne.n	8002598 <UART_SetConfig+0x234>
 800254e:	4b42      	ldr	r3, [pc, #264]	; (8002658 <UART_SetConfig+0x2f4>)
 8002550:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002554:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002558:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800255c:	d012      	beq.n	8002584 <UART_SetConfig+0x220>
 800255e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002562:	d802      	bhi.n	800256a <UART_SetConfig+0x206>
 8002564:	2b00      	cmp	r3, #0
 8002566:	d007      	beq.n	8002578 <UART_SetConfig+0x214>
 8002568:	e012      	b.n	8002590 <UART_SetConfig+0x22c>
 800256a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800256e:	d006      	beq.n	800257e <UART_SetConfig+0x21a>
 8002570:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002574:	d009      	beq.n	800258a <UART_SetConfig+0x226>
 8002576:	e00b      	b.n	8002590 <UART_SetConfig+0x22c>
 8002578:	2300      	movs	r3, #0
 800257a:	76fb      	strb	r3, [r7, #27]
 800257c:	e038      	b.n	80025f0 <UART_SetConfig+0x28c>
 800257e:	2302      	movs	r3, #2
 8002580:	76fb      	strb	r3, [r7, #27]
 8002582:	e035      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002584:	2304      	movs	r3, #4
 8002586:	76fb      	strb	r3, [r7, #27]
 8002588:	e032      	b.n	80025f0 <UART_SetConfig+0x28c>
 800258a:	2308      	movs	r3, #8
 800258c:	76fb      	strb	r3, [r7, #27]
 800258e:	e02f      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002590:	2310      	movs	r3, #16
 8002592:	76fb      	strb	r3, [r7, #27]
 8002594:	bf00      	nop
 8002596:	e02b      	b.n	80025f0 <UART_SetConfig+0x28c>
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	4a2c      	ldr	r2, [pc, #176]	; (8002650 <UART_SetConfig+0x2ec>)
 800259e:	4293      	cmp	r3, r2
 80025a0:	d124      	bne.n	80025ec <UART_SetConfig+0x288>
 80025a2:	4b2d      	ldr	r3, [pc, #180]	; (8002658 <UART_SetConfig+0x2f4>)
 80025a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80025a8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80025ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b0:	d012      	beq.n	80025d8 <UART_SetConfig+0x274>
 80025b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80025b6:	d802      	bhi.n	80025be <UART_SetConfig+0x25a>
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d007      	beq.n	80025cc <UART_SetConfig+0x268>
 80025bc:	e012      	b.n	80025e4 <UART_SetConfig+0x280>
 80025be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80025c2:	d006      	beq.n	80025d2 <UART_SetConfig+0x26e>
 80025c4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80025c8:	d009      	beq.n	80025de <UART_SetConfig+0x27a>
 80025ca:	e00b      	b.n	80025e4 <UART_SetConfig+0x280>
 80025cc:	2300      	movs	r3, #0
 80025ce:	76fb      	strb	r3, [r7, #27]
 80025d0:	e00e      	b.n	80025f0 <UART_SetConfig+0x28c>
 80025d2:	2302      	movs	r3, #2
 80025d4:	76fb      	strb	r3, [r7, #27]
 80025d6:	e00b      	b.n	80025f0 <UART_SetConfig+0x28c>
 80025d8:	2304      	movs	r3, #4
 80025da:	76fb      	strb	r3, [r7, #27]
 80025dc:	e008      	b.n	80025f0 <UART_SetConfig+0x28c>
 80025de:	2308      	movs	r3, #8
 80025e0:	76fb      	strb	r3, [r7, #27]
 80025e2:	e005      	b.n	80025f0 <UART_SetConfig+0x28c>
 80025e4:	2310      	movs	r3, #16
 80025e6:	76fb      	strb	r3, [r7, #27]
 80025e8:	bf00      	nop
 80025ea:	e001      	b.n	80025f0 <UART_SetConfig+0x28c>
 80025ec:	2310      	movs	r3, #16
 80025ee:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	4a16      	ldr	r2, [pc, #88]	; (8002650 <UART_SetConfig+0x2ec>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	f040 80fa 	bne.w	80027f0 <UART_SetConfig+0x48c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80025fc:	7efb      	ldrb	r3, [r7, #27]
 80025fe:	2b08      	cmp	r3, #8
 8002600:	d836      	bhi.n	8002670 <UART_SetConfig+0x30c>
 8002602:	a201      	add	r2, pc, #4	; (adr r2, 8002608 <UART_SetConfig+0x2a4>)
 8002604:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002608:	0800262d 	.word	0x0800262d
 800260c:	08002671 	.word	0x08002671
 8002610:	08002635 	.word	0x08002635
 8002614:	08002671 	.word	0x08002671
 8002618:	0800263b 	.word	0x0800263b
 800261c:	08002671 	.word	0x08002671
 8002620:	08002671 	.word	0x08002671
 8002624:	08002671 	.word	0x08002671
 8002628:	08002643 	.word	0x08002643
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800262c:	f7ff f910 	bl	8001850 <HAL_RCC_GetPCLK1Freq>
 8002630:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002632:	e020      	b.n	8002676 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 8002634:	4b0d      	ldr	r3, [pc, #52]	; (800266c <UART_SetConfig+0x308>)
 8002636:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002638:	e01d      	b.n	8002676 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800263a:	f7ff f873 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 800263e:	60f8      	str	r0, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002640:	e019      	b.n	8002676 <UART_SetConfig+0x312>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8002642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002646:	60fb      	str	r3, [r7, #12]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002648:	e015      	b.n	8002676 <UART_SetConfig+0x312>
 800264a:	bf00      	nop
 800264c:	efff69f3 	.word	0xefff69f3
 8002650:	40008000 	.word	0x40008000
 8002654:	40013800 	.word	0x40013800
 8002658:	40021000 	.word	0x40021000
 800265c:	40004400 	.word	0x40004400
 8002660:	40004800 	.word	0x40004800
 8002664:	40004c00 	.word	0x40004c00
 8002668:	40005000 	.word	0x40005000
 800266c:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 8002670:	2301      	movs	r3, #1
 8002672:	74fb      	strb	r3, [r7, #19]
        break;
 8002674:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8002676:	68fb      	ldr	r3, [r7, #12]
 8002678:	2b00      	cmp	r3, #0
 800267a:	f000 81ac 	beq.w	80029d6 <UART_SetConfig+0x672>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	685a      	ldr	r2, [r3, #4]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	429a      	cmp	r2, r3
 800268c:	d305      	bcc.n	800269a <UART_SetConfig+0x336>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8002694:	68fa      	ldr	r2, [r7, #12]
 8002696:	429a      	cmp	r2, r3
 8002698:	d902      	bls.n	80026a0 <UART_SetConfig+0x33c>
      {
        ret = HAL_ERROR;
 800269a:	2301      	movs	r3, #1
 800269c:	74fb      	strb	r3, [r7, #19]
 800269e:	e19a      	b.n	80029d6 <UART_SetConfig+0x672>
      }
      else
      {
        switch (clocksource)
 80026a0:	7efb      	ldrb	r3, [r7, #27]
 80026a2:	2b08      	cmp	r3, #8
 80026a4:	f200 8091 	bhi.w	80027ca <UART_SetConfig+0x466>
 80026a8:	a201      	add	r2, pc, #4	; (adr r2, 80026b0 <UART_SetConfig+0x34c>)
 80026aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026ae:	bf00      	nop
 80026b0:	080026d5 	.word	0x080026d5
 80026b4:	080027cb 	.word	0x080027cb
 80026b8:	08002721 	.word	0x08002721
 80026bc:	080027cb 	.word	0x080027cb
 80026c0:	08002755 	.word	0x08002755
 80026c4:	080027cb 	.word	0x080027cb
 80026c8:	080027cb 	.word	0x080027cb
 80026cc:	080027cb 	.word	0x080027cb
 80026d0:	080027a1 	.word	0x080027a1
        {
          case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 80026d4:	f7ff f8bc 	bl	8001850 <HAL_RCC_GetPCLK1Freq>
 80026d8:	4603      	mov	r3, r0
 80026da:	4619      	mov	r1, r3
 80026dc:	f04f 0200 	mov.w	r2, #0
 80026e0:	f04f 0300 	mov.w	r3, #0
 80026e4:	f04f 0400 	mov.w	r4, #0
 80026e8:	0214      	lsls	r4, r2, #8
 80026ea:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80026ee:	020b      	lsls	r3, r1, #8
 80026f0:	687a      	ldr	r2, [r7, #4]
 80026f2:	6852      	ldr	r2, [r2, #4]
 80026f4:	0852      	lsrs	r2, r2, #1
 80026f6:	4611      	mov	r1, r2
 80026f8:	f04f 0200 	mov.w	r2, #0
 80026fc:	eb13 0b01 	adds.w	fp, r3, r1
 8002700:	eb44 0c02 	adc.w	ip, r4, r2
 8002704:	4658      	mov	r0, fp
 8002706:	4661      	mov	r1, ip
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f04f 0400 	mov.w	r4, #0
 8002710:	461a      	mov	r2, r3
 8002712:	4623      	mov	r3, r4
 8002714:	f7fd fd58 	bl	80001c8 <__aeabi_uldivmod>
 8002718:	4603      	mov	r3, r0
 800271a:	460c      	mov	r4, r1
 800271c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800271e:	e057      	b.n	80027d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	685b      	ldr	r3, [r3, #4]
 8002724:	085b      	lsrs	r3, r3, #1
 8002726:	f04f 0400 	mov.w	r4, #0
 800272a:	49b1      	ldr	r1, [pc, #708]	; (80029f0 <UART_SetConfig+0x68c>)
 800272c:	f04f 0200 	mov.w	r2, #0
 8002730:	eb13 0b01 	adds.w	fp, r3, r1
 8002734:	eb44 0c02 	adc.w	ip, r4, r2
 8002738:	4658      	mov	r0, fp
 800273a:	4661      	mov	r1, ip
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f04f 0400 	mov.w	r4, #0
 8002744:	461a      	mov	r2, r3
 8002746:	4623      	mov	r3, r4
 8002748:	f7fd fd3e 	bl	80001c8 <__aeabi_uldivmod>
 800274c:	4603      	mov	r3, r0
 800274e:	460c      	mov	r4, r1
 8002750:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 8002752:	e03d      	b.n	80027d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002754:	f7fe ffe6 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8002758:	4603      	mov	r3, r0
 800275a:	4619      	mov	r1, r3
 800275c:	f04f 0200 	mov.w	r2, #0
 8002760:	f04f 0300 	mov.w	r3, #0
 8002764:	f04f 0400 	mov.w	r4, #0
 8002768:	0214      	lsls	r4, r2, #8
 800276a:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800276e:	020b      	lsls	r3, r1, #8
 8002770:	687a      	ldr	r2, [r7, #4]
 8002772:	6852      	ldr	r2, [r2, #4]
 8002774:	0852      	lsrs	r2, r2, #1
 8002776:	4611      	mov	r1, r2
 8002778:	f04f 0200 	mov.w	r2, #0
 800277c:	eb13 0b01 	adds.w	fp, r3, r1
 8002780:	eb44 0c02 	adc.w	ip, r4, r2
 8002784:	4658      	mov	r0, fp
 8002786:	4661      	mov	r1, ip
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	685b      	ldr	r3, [r3, #4]
 800278c:	f04f 0400 	mov.w	r4, #0
 8002790:	461a      	mov	r2, r3
 8002792:	4623      	mov	r3, r4
 8002794:	f7fd fd18 	bl	80001c8 <__aeabi_uldivmod>
 8002798:	4603      	mov	r3, r0
 800279a:	460c      	mov	r4, r1
 800279c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 800279e:	e017      	b.n	80027d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	085b      	lsrs	r3, r3, #1
 80027a6:	f04f 0400 	mov.w	r4, #0
 80027aa:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 80027ae:	f144 0100 	adc.w	r1, r4, #0
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f04f 0400 	mov.w	r4, #0
 80027ba:	461a      	mov	r2, r3
 80027bc:	4623      	mov	r3, r4
 80027be:	f7fd fd03 	bl	80001c8 <__aeabi_uldivmod>
 80027c2:	4603      	mov	r3, r0
 80027c4:	460c      	mov	r4, r1
 80027c6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
            break;
 80027c8:	e002      	b.n	80027d0 <UART_SetConfig+0x46c>
          case UART_CLOCKSOURCE_UNDEFINED:
          default:
            ret = HAL_ERROR;
 80027ca:	2301      	movs	r3, #1
 80027cc:	74fb      	strb	r3, [r7, #19]
            break;
 80027ce:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80027d0:	697b      	ldr	r3, [r7, #20]
 80027d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80027d6:	d308      	bcc.n	80027ea <UART_SetConfig+0x486>
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80027de:	d204      	bcs.n	80027ea <UART_SetConfig+0x486>
        {
          huart->Instance->BRR = usartdiv;
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	697a      	ldr	r2, [r7, #20]
 80027e6:	60da      	str	r2, [r3, #12]
 80027e8:	e0f5      	b.n	80029d6 <UART_SetConfig+0x672>
        }
        else
        {
          ret = HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	74fb      	strb	r3, [r7, #19]
 80027ee:	e0f2      	b.n	80029d6 <UART_SetConfig+0x672>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	69db      	ldr	r3, [r3, #28]
 80027f4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80027f8:	d17f      	bne.n	80028fa <UART_SetConfig+0x596>
  {
    switch (clocksource)
 80027fa:	7efb      	ldrb	r3, [r7, #27]
 80027fc:	2b08      	cmp	r3, #8
 80027fe:	d85c      	bhi.n	80028ba <UART_SetConfig+0x556>
 8002800:	a201      	add	r2, pc, #4	; (adr r2, 8002808 <UART_SetConfig+0x4a4>)
 8002802:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002806:	bf00      	nop
 8002808:	0800282d 	.word	0x0800282d
 800280c:	0800284b 	.word	0x0800284b
 8002810:	08002869 	.word	0x08002869
 8002814:	080028bb 	.word	0x080028bb
 8002818:	08002885 	.word	0x08002885
 800281c:	080028bb 	.word	0x080028bb
 8002820:	080028bb 	.word	0x080028bb
 8002824:	080028bb 	.word	0x080028bb
 8002828:	080028a3 	.word	0x080028a3
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800282c:	f7ff f810 	bl	8001850 <HAL_RCC_GetPCLK1Freq>
 8002830:	4603      	mov	r3, r0
 8002832:	005a      	lsls	r2, r3, #1
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	441a      	add	r2, r3
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	685b      	ldr	r3, [r3, #4]
 8002840:	fbb2 f3f3 	udiv	r3, r2, r3
 8002844:	b29b      	uxth	r3, r3
 8002846:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002848:	e03a      	b.n	80028c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 800284a:	f7ff f817 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 800284e:	4603      	mov	r3, r0
 8002850:	005a      	lsls	r2, r3, #1
 8002852:	687b      	ldr	r3, [r7, #4]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	085b      	lsrs	r3, r3, #1
 8002858:	441a      	add	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	685b      	ldr	r3, [r3, #4]
 800285e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002862:	b29b      	uxth	r3, r3
 8002864:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002866:	e02b      	b.n	80028c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	685b      	ldr	r3, [r3, #4]
 800286c:	085b      	lsrs	r3, r3, #1
 800286e:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 8002872:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8002876:	687a      	ldr	r2, [r7, #4]
 8002878:	6852      	ldr	r2, [r2, #4]
 800287a:	fbb3 f3f2 	udiv	r3, r3, r2
 800287e:	b29b      	uxth	r3, r3
 8002880:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002882:	e01d      	b.n	80028c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002884:	f7fe ff4e 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8002888:	4603      	mov	r3, r0
 800288a:	005a      	lsls	r2, r3, #1
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	685b      	ldr	r3, [r3, #4]
 8002890:	085b      	lsrs	r3, r3, #1
 8002892:	441a      	add	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	b29b      	uxth	r3, r3
 800289e:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028a0:	e00e      	b.n	80028c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	085b      	lsrs	r3, r3, #1
 80028a8:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80028b4:	b29b      	uxth	r3, r3
 80028b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80028b8:	e002      	b.n	80028c0 <UART_SetConfig+0x55c>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	74fb      	strb	r3, [r7, #19]
        break;
 80028be:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	2b0f      	cmp	r3, #15
 80028c4:	d916      	bls.n	80028f4 <UART_SetConfig+0x590>
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80028cc:	d212      	bcs.n	80028f4 <UART_SetConfig+0x590>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80028ce:	697b      	ldr	r3, [r7, #20]
 80028d0:	b29b      	uxth	r3, r3
 80028d2:	f023 030f 	bic.w	r3, r3, #15
 80028d6:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	085b      	lsrs	r3, r3, #1
 80028dc:	b29b      	uxth	r3, r3
 80028de:	f003 0307 	and.w	r3, r3, #7
 80028e2:	b29a      	uxth	r2, r3
 80028e4:	897b      	ldrh	r3, [r7, #10]
 80028e6:	4313      	orrs	r3, r2
 80028e8:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	897a      	ldrh	r2, [r7, #10]
 80028f0:	60da      	str	r2, [r3, #12]
 80028f2:	e070      	b.n	80029d6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80028f4:	2301      	movs	r3, #1
 80028f6:	74fb      	strb	r3, [r7, #19]
 80028f8:	e06d      	b.n	80029d6 <UART_SetConfig+0x672>
    }
  }
  else
  {
    switch (clocksource)
 80028fa:	7efb      	ldrb	r3, [r7, #27]
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d859      	bhi.n	80029b4 <UART_SetConfig+0x650>
 8002900:	a201      	add	r2, pc, #4	; (adr r2, 8002908 <UART_SetConfig+0x5a4>)
 8002902:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002906:	bf00      	nop
 8002908:	0800292d 	.word	0x0800292d
 800290c:	08002949 	.word	0x08002949
 8002910:	08002965 	.word	0x08002965
 8002914:	080029b5 	.word	0x080029b5
 8002918:	08002981 	.word	0x08002981
 800291c:	080029b5 	.word	0x080029b5
 8002920:	080029b5 	.word	0x080029b5
 8002924:	080029b5 	.word	0x080029b5
 8002928:	0800299d 	.word	0x0800299d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate));
 800292c:	f7fe ff90 	bl	8001850 <HAL_RCC_GetPCLK1Freq>
 8002930:	4602      	mov	r2, r0
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	085b      	lsrs	r3, r3, #1
 8002938:	441a      	add	r2, r3
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002942:	b29b      	uxth	r3, r3
 8002944:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002946:	e038      	b.n	80029ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_PCLK2:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate));
 8002948:	f7fe ff98 	bl	800187c <HAL_RCC_GetPCLK2Freq>
 800294c:	4602      	mov	r2, r0
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	685b      	ldr	r3, [r3, #4]
 8002952:	085b      	lsrs	r3, r3, #1
 8002954:	441a      	add	r2, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	fbb2 f3f3 	udiv	r3, r2, r3
 800295e:	b29b      	uxth	r3, r3
 8002960:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 8002962:	e02a      	b.n	80029ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	685b      	ldr	r3, [r3, #4]
 8002968:	085b      	lsrs	r3, r3, #1
 800296a:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800296e:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	6852      	ldr	r2, [r2, #4]
 8002976:	fbb3 f3f2 	udiv	r3, r3, r2
 800297a:	b29b      	uxth	r3, r3
 800297c:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800297e:	e01c      	b.n	80029ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HAL_RCC_GetSysClockFreq(), huart->Init.BaudRate));
 8002980:	f7fe fed0 	bl	8001724 <HAL_RCC_GetSysClockFreq>
 8002984:	4602      	mov	r2, r0
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	685b      	ldr	r3, [r3, #4]
 800298a:	085b      	lsrs	r3, r3, #1
 800298c:	441a      	add	r2, r3
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	685b      	ldr	r3, [r3, #4]
 8002992:	fbb2 f3f3 	udiv	r3, r2, r3
 8002996:	b29b      	uxth	r3, r3
 8002998:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800299a:	e00e      	b.n	80029ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	085b      	lsrs	r3, r3, #1
 80029a2:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	685b      	ldr	r3, [r3, #4]
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 80029b2:	e002      	b.n	80029ba <UART_SetConfig+0x656>
      case UART_CLOCKSOURCE_UNDEFINED:
      default:
        ret = HAL_ERROR;
 80029b4:	2301      	movs	r3, #1
 80029b6:	74fb      	strb	r3, [r7, #19]
        break;
 80029b8:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80029ba:	697b      	ldr	r3, [r7, #20]
 80029bc:	2b0f      	cmp	r3, #15
 80029be:	d908      	bls.n	80029d2 <UART_SetConfig+0x66e>
 80029c0:	697b      	ldr	r3, [r7, #20]
 80029c2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029c6:	d204      	bcs.n	80029d2 <UART_SetConfig+0x66e>
    {
      huart->Instance->BRR = usartdiv;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	697a      	ldr	r2, [r7, #20]
 80029ce:	60da      	str	r2, [r3, #12]
 80029d0:	e001      	b.n	80029d6 <UART_SetConfig+0x672>
    }
    else
    {
      ret = HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	74fb      	strb	r3, [r7, #19]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2200      	movs	r2, #0
 80029da:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	2200      	movs	r2, #0
 80029e0:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 80029e2:	7cfb      	ldrb	r3, [r7, #19]
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3720      	adds	r7, #32
 80029e8:	46bd      	mov	sp, r7
 80029ea:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80029ee:	bf00      	nop
 80029f0:	f4240000 	.word	0xf4240000

080029f4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80029f4:	b480      	push	{r7}
 80029f6:	b083      	sub	sp, #12
 80029f8:	af00      	add	r7, sp, #0
 80029fa:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a00:	f003 0301 	and.w	r3, r3, #1
 8002a04:	2b00      	cmp	r3, #0
 8002a06:	d00a      	beq.n	8002a1e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	430a      	orrs	r2, r1
 8002a1c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a22:	f003 0302 	and.w	r3, r3, #2
 8002a26:	2b00      	cmp	r3, #0
 8002a28:	d00a      	beq.n	8002a40 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	685b      	ldr	r3, [r3, #4]
 8002a30:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a44:	f003 0304 	and.w	r3, r3, #4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d00a      	beq.n	8002a62 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	685b      	ldr	r3, [r3, #4]
 8002a52:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a66:	f003 0308 	and.w	r3, r3, #8
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d00a      	beq.n	8002a84 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	685b      	ldr	r3, [r3, #4]
 8002a74:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	430a      	orrs	r2, r1
 8002a82:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a88:	f003 0310 	and.w	r3, r3, #16
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d00a      	beq.n	8002aa6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689b      	ldr	r3, [r3, #8]
 8002a96:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	430a      	orrs	r2, r1
 8002aa4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002aaa:	f003 0320 	and.w	r3, r3, #32
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d00a      	beq.n	8002ac8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	430a      	orrs	r2, r1
 8002ac6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	d01a      	beq.n	8002b0a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	685b      	ldr	r3, [r3, #4]
 8002ada:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aee:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002af2:	d10a      	bne.n	8002b0a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	430a      	orrs	r2, r1
 8002b08:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d00a      	beq.n	8002b2c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	685b      	ldr	r3, [r3, #4]
 8002b1c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	605a      	str	r2, [r3, #4]
  }
}
 8002b2c:	bf00      	nop
 8002b2e:	370c      	adds	r7, #12
 8002b30:	46bd      	mov	sp, r7
 8002b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b36:	4770      	bx	lr

08002b38 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8002b38:	b580      	push	{r7, lr}
 8002b3a:	b086      	sub	sp, #24
 8002b3c:	af02      	add	r7, sp, #8
 8002b3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2200      	movs	r2, #0
 8002b44:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8002b46:	f7fd fddb 	bl	8000700 <HAL_GetTick>
 8002b4a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0308 	and.w	r3, r3, #8
 8002b56:	2b08      	cmp	r3, #8
 8002b58:	d10e      	bne.n	8002b78 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b5a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b5e:	9300      	str	r3, [sp, #0]
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	2200      	movs	r2, #0
 8002b64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8002b68:	6878      	ldr	r0, [r7, #4]
 8002b6a:	f000 f82a 	bl	8002bc2 <UART_WaitOnFlagUntilTimeout>
 8002b6e:	4603      	mov	r3, r0
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d001      	beq.n	8002b78 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002b74:	2303      	movs	r3, #3
 8002b76:	e020      	b.n	8002bba <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	f003 0304 	and.w	r3, r3, #4
 8002b82:	2b04      	cmp	r3, #4
 8002b84:	d10e      	bne.n	8002ba4 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8002b86:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	68fb      	ldr	r3, [r7, #12]
 8002b8e:	2200      	movs	r2, #0
 8002b90:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8002b94:	6878      	ldr	r0, [r7, #4]
 8002b96:	f000 f814 	bl	8002bc2 <UART_WaitOnFlagUntilTimeout>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d001      	beq.n	8002ba4 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8002ba0:	2303      	movs	r3, #3
 8002ba2:	e00a      	b.n	8002bba <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2220      	movs	r2, #32
 8002ba8:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2220      	movs	r2, #32
 8002bae:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2200      	movs	r2, #0
 8002bb4:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	3710      	adds	r7, #16
 8002bbe:	46bd      	mov	sp, r7
 8002bc0:	bd80      	pop	{r7, pc}

08002bc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8002bc2:	b580      	push	{r7, lr}
 8002bc4:	b084      	sub	sp, #16
 8002bc6:	af00      	add	r7, sp, #0
 8002bc8:	60f8      	str	r0, [r7, #12]
 8002bca:	60b9      	str	r1, [r7, #8]
 8002bcc:	603b      	str	r3, [r7, #0]
 8002bce:	4613      	mov	r3, r2
 8002bd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002bd2:	e02a      	b.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x68>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bd4:	69bb      	ldr	r3, [r7, #24]
 8002bd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002bda:	d026      	beq.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bdc:	f7fd fd90 	bl	8000700 <HAL_GetTick>
 8002be0:	4602      	mov	r2, r0
 8002be2:	683b      	ldr	r3, [r7, #0]
 8002be4:	1ad3      	subs	r3, r2, r3
 8002be6:	69ba      	ldr	r2, [r7, #24]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d302      	bcc.n	8002bf2 <UART_WaitOnFlagUntilTimeout+0x30>
 8002bec:	69bb      	ldr	r3, [r7, #24]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d11b      	bne.n	8002c2a <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8002c00:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	689a      	ldr	r2, [r3, #8]
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	f022 0201 	bic.w	r2, r2, #1
 8002c10:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	2220      	movs	r2, #32
 8002c16:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	2220      	movs	r2, #32
 8002c1c:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	2200      	movs	r2, #0
 8002c22:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e00f      	b.n	8002c4a <UART_WaitOnFlagUntilTimeout+0x88>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	69da      	ldr	r2, [r3, #28]
 8002c30:	68bb      	ldr	r3, [r7, #8]
 8002c32:	4013      	ands	r3, r2
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	429a      	cmp	r2, r3
 8002c38:	bf0c      	ite	eq
 8002c3a:	2301      	moveq	r3, #1
 8002c3c:	2300      	movne	r3, #0
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	461a      	mov	r2, r3
 8002c42:	79fb      	ldrb	r3, [r7, #7]
 8002c44:	429a      	cmp	r2, r3
 8002c46:	d0c5      	beq.n	8002bd4 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002c48:	2300      	movs	r3, #0
}
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	3710      	adds	r7, #16
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bd80      	pop	{r7, pc}
	...

08002c54 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c58:	f7fd fce6 	bl	8000628 <HAL_Init>

  /* USER CODE BEGIN Init */
  Sch_Init(&Sch_Cfg);
 8002c5c:	4805      	ldr	r0, [pc, #20]	; (8002c74 <main+0x20>)
 8002c5e:	f000 fb17 	bl	8003290 <Sch_Init>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c62:	f000 f809 	bl	8002c78 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c66:	f000 f8ad 	bl	8002dc4 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8002c6a:	f000 f87b 	bl	8002d64 <MX_USART2_UART_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  Sch_Main();
 8002c6e:	f000 fb1f 	bl	80032b0 <Sch_Main>
 8002c72:	e7fc      	b.n	8002c6e <main+0x1a>
 8002c74:	20000040 	.word	0x20000040

08002c78 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	b0b8      	sub	sp, #224	; 0xe0
 8002c7c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002c7e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002c82:	2244      	movs	r2, #68	; 0x44
 8002c84:	2100      	movs	r1, #0
 8002c86:	4618      	mov	r0, r3
 8002c88:	f000 fb9a 	bl	80033c0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002c8c:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002c90:	2200      	movs	r2, #0
 8002c92:	601a      	str	r2, [r3, #0]
 8002c94:	605a      	str	r2, [r3, #4]
 8002c96:	609a      	str	r2, [r3, #8]
 8002c98:	60da      	str	r2, [r3, #12]
 8002c9a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002c9c:	463b      	mov	r3, r7
 8002c9e:	2288      	movs	r2, #136	; 0x88
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	4618      	mov	r0, r3
 8002ca4:	f000 fb8c 	bl	80033c0 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8002ca8:	2302      	movs	r3, #2
 8002caa:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8002cae:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8002cb6:	2310      	movs	r3, #16
 8002cb8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002cbc:	2302      	movs	r3, #2
 8002cbe:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8002cc2:	2302      	movs	r3, #2
 8002cc4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 8002cce:	230a      	movs	r3, #10
 8002cd0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8002cd4:	2307      	movs	r3, #7
 8002cd6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8002cda:	2302      	movs	r3, #2
 8002cdc:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8002ce0:	2302      	movs	r3, #2
 8002ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8002ce6:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 8002cea:	4618      	mov	r0, r3
 8002cec:	f7fe f888 	bl	8000e00 <HAL_RCC_OscConfig>
 8002cf0:	4603      	mov	r3, r0
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d001      	beq.n	8002cfa <SystemClock_Config+0x82>
  {
    Error_Handler();
 8002cf6:	f000 f9c1 	bl	800307c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002cfa:	230f      	movs	r3, #15
 8002cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002d00:	2303      	movs	r3, #3
 8002d02:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002d06:	2300      	movs	r3, #0
 8002d08:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002d12:	2300      	movs	r3, #0
 8002d14:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8002d18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8002d1c:	2104      	movs	r1, #4
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fe fc1e 	bl	8001560 <HAL_RCC_ClockConfig>
 8002d24:	4603      	mov	r3, r0
 8002d26:	2b00      	cmp	r3, #0
 8002d28:	d001      	beq.n	8002d2e <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8002d2a:	f000 f9a7 	bl	800307c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002d2e:	2302      	movs	r3, #2
 8002d30:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002d32:	2300      	movs	r3, #0
 8002d34:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002d36:	463b      	mov	r3, r7
 8002d38:	4618      	mov	r0, r3
 8002d3a:	f7fe fe15 	bl	8001968 <HAL_RCCEx_PeriphCLKConfig>
 8002d3e:	4603      	mov	r3, r0
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d001      	beq.n	8002d48 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8002d44:	f000 f99a 	bl	800307c <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8002d48:	f44f 7000 	mov.w	r0, #512	; 0x200
 8002d4c:	f7fe f802 	bl	8000d54 <HAL_PWREx_ControlVoltageScaling>
 8002d50:	4603      	mov	r3, r0
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d001      	beq.n	8002d5a <SystemClock_Config+0xe2>
  {
    Error_Handler();
 8002d56:	f000 f991 	bl	800307c <Error_Handler>
  }
}
 8002d5a:	bf00      	nop
 8002d5c:	37e0      	adds	r7, #224	; 0xe0
 8002d5e:	46bd      	mov	sp, r7
 8002d60:	bd80      	pop	{r7, pc}
	...

08002d64 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002d68:	4b14      	ldr	r3, [pc, #80]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d6a:	4a15      	ldr	r2, [pc, #84]	; (8002dc0 <MX_USART2_UART_Init+0x5c>)
 8002d6c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8002d6e:	4b13      	ldr	r3, [pc, #76]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d70:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002d74:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002d76:	4b11      	ldr	r3, [pc, #68]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d78:	2200      	movs	r2, #0
 8002d7a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002d7c:	4b0f      	ldr	r3, [pc, #60]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d7e:	2200      	movs	r2, #0
 8002d80:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002d82:	4b0e      	ldr	r3, [pc, #56]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d84:	2200      	movs	r2, #0
 8002d86:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002d88:	4b0c      	ldr	r3, [pc, #48]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d8a:	220c      	movs	r2, #12
 8002d8c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002d8e:	4b0b      	ldr	r3, [pc, #44]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d90:	2200      	movs	r2, #0
 8002d92:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002d94:	4b09      	ldr	r3, [pc, #36]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d96:	2200      	movs	r2, #0
 8002d98:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002d9a:	4b08      	ldr	r3, [pc, #32]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002da0:	4b06      	ldr	r3, [pc, #24]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002da2:	2200      	movs	r2, #0
 8002da4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002da6:	4805      	ldr	r0, [pc, #20]	; (8002dbc <MX_USART2_UART_Init+0x58>)
 8002da8:	f7ff fa8e 	bl	80022c8 <HAL_UART_Init>
 8002dac:	4603      	mov	r3, r0
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d001      	beq.n	8002db6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002db2:	f000 f963 	bl	800307c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000070 	.word	0x20000070
 8002dc0:	40004400 	.word	0x40004400

08002dc4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8002dc4:	b580      	push	{r7, lr}
 8002dc6:	b08a      	sub	sp, #40	; 0x28
 8002dc8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002dca:	f107 0314 	add.w	r3, r7, #20
 8002dce:	2200      	movs	r2, #0
 8002dd0:	601a      	str	r2, [r3, #0]
 8002dd2:	605a      	str	r2, [r3, #4]
 8002dd4:	609a      	str	r2, [r3, #8]
 8002dd6:	60da      	str	r2, [r3, #12]
 8002dd8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dda:	4b45      	ldr	r3, [pc, #276]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dde:	4a44      	ldr	r2, [pc, #272]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002de6:	4b42      	ldr	r3, [pc, #264]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002dea:	f003 0304 	and.w	r3, r3, #4
 8002dee:	613b      	str	r3, [r7, #16]
 8002df0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002df2:	4b3f      	ldr	r3, [pc, #252]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002df4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002df6:	4a3e      	ldr	r2, [pc, #248]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002dfc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002dfe:	4b3c      	ldr	r3, [pc, #240]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002e00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002e06:	60fb      	str	r3, [r7, #12]
 8002e08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e0a:	4b39      	ldr	r3, [pc, #228]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002e0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e0e:	4a38      	ldr	r2, [pc, #224]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002e10:	f043 0301 	orr.w	r3, r3, #1
 8002e14:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e16:	4b36      	ldr	r3, [pc, #216]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002e18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e1a:	f003 0301 	and.w	r3, r3, #1
 8002e1e:	60bb      	str	r3, [r7, #8]
 8002e20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002e22:	4b33      	ldr	r3, [pc, #204]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002e24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e26:	4a32      	ldr	r2, [pc, #200]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002e28:	f043 0302 	orr.w	r3, r3, #2
 8002e2c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002e2e:	4b30      	ldr	r3, [pc, #192]	; (8002ef0 <MX_GPIO_Init+0x12c>)
 8002e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e32:	f003 0302 	and.w	r3, r3, #2
 8002e36:	607b      	str	r3, [r7, #4]
 8002e38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GREED_LED_Pin|PED_GREEN_LED_Pin|PED_RED_LED_Pin, GPIO_PIN_RESET);
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f44f 51c1 	mov.w	r1, #6176	; 0x1820
 8002e40:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e44:	f7fd ff22 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GREEN_LIGHT_LED_Pin|YELLOW_LIGHT_LED_Pin|RED_LIGHT_LED_Pin, GPIO_PIN_RESET);
 8002e48:	2200      	movs	r2, #0
 8002e4a:	f44f 71b0 	mov.w	r1, #352	; 0x160
 8002e4e:	4829      	ldr	r0, [pc, #164]	; (8002ef4 <MX_GPIO_Init+0x130>)
 8002e50:	f7fd ff1c 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PED_REQUEST_LED_GPIO_Port, PED_REQUEST_LED_Pin, GPIO_PIN_RESET);
 8002e54:	2200      	movs	r2, #0
 8002e56:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002e5a:	4827      	ldr	r0, [pc, #156]	; (8002ef8 <MX_GPIO_Init+0x134>)
 8002e5c:	f7fd ff16 	bl	8000c8c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : BLUE_BUTTON_Pin */
  GPIO_InitStruct.Pin = BLUE_BUTTON_Pin;
 8002e60:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002e64:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8002e66:	4b25      	ldr	r3, [pc, #148]	; (8002efc <MX_GPIO_Init+0x138>)
 8002e68:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e6a:	2300      	movs	r3, #0
 8002e6c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BLUE_BUTTON_GPIO_Port, &GPIO_InitStruct);
 8002e6e:	f107 0314 	add.w	r3, r7, #20
 8002e72:	4619      	mov	r1, r3
 8002e74:	481f      	ldr	r0, [pc, #124]	; (8002ef4 <MX_GPIO_Init+0x130>)
 8002e76:	f7fd fd61 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREED_LED_Pin PED_GREEN_LED_Pin PED_RED_LED_Pin */
  GPIO_InitStruct.Pin = GREED_LED_Pin|PED_GREEN_LED_Pin|PED_RED_LED_Pin;
 8002e7a:	f44f 53c1 	mov.w	r3, #6176	; 0x1820
 8002e7e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002e80:	2301      	movs	r3, #1
 8002e82:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e84:	2300      	movs	r3, #0
 8002e86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e8c:	f107 0314 	add.w	r3, r7, #20
 8002e90:	4619      	mov	r1, r3
 8002e92:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8002e96:	f7fd fd51 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pins : GREEN_LIGHT_LED_Pin YELLOW_LIGHT_LED_Pin RED_LIGHT_LED_Pin */
  GPIO_InitStruct.Pin = GREEN_LIGHT_LED_Pin|YELLOW_LIGHT_LED_Pin|RED_LIGHT_LED_Pin;
 8002e9a:	f44f 73b0 	mov.w	r3, #352	; 0x160
 8002e9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ea0:	2301      	movs	r3, #1
 8002ea2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002eac:	f107 0314 	add.w	r3, r7, #20
 8002eb0:	4619      	mov	r1, r3
 8002eb2:	4810      	ldr	r0, [pc, #64]	; (8002ef4 <MX_GPIO_Init+0x130>)
 8002eb4:	f7fd fd42 	bl	800093c <HAL_GPIO_Init>

  /*Configure GPIO pin : PED_REQUEST_LED_Pin */
  GPIO_InitStruct.Pin = PED_REQUEST_LED_Pin;
 8002eb8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002ebc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002ebe:	2301      	movs	r3, #1
 8002ec0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(PED_REQUEST_LED_GPIO_Port, &GPIO_InitStruct);
 8002eca:	f107 0314 	add.w	r3, r7, #20
 8002ece:	4619      	mov	r1, r3
 8002ed0:	4809      	ldr	r0, [pc, #36]	; (8002ef8 <MX_GPIO_Init+0x134>)
 8002ed2:	f7fd fd33 	bl	800093c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 1, 0);
 8002ed6:	2200      	movs	r2, #0
 8002ed8:	2101      	movs	r1, #1
 8002eda:	2028      	movs	r0, #40	; 0x28
 8002edc:	f7fd fcf7 	bl	80008ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002ee0:	2028      	movs	r0, #40	; 0x28
 8002ee2:	f7fd fd10 	bl	8000906 <HAL_NVIC_EnableIRQ>

}
 8002ee6:	bf00      	nop
 8002ee8:	3728      	adds	r7, #40	; 0x28
 8002eea:	46bd      	mov	sp, r7
 8002eec:	bd80      	pop	{r7, pc}
 8002eee:	bf00      	nop
 8002ef0:	40021000 	.word	0x40021000
 8002ef4:	48000800 	.word	0x48000800
 8002ef8:	48000400 	.word	0x48000400
 8002efc:	10210000 	.word	0x10210000

08002f00 <Task_10ms>:

/* USER CODE BEGIN 4 */
void Task_10ms(void) {
 8002f00:	b480      	push	{r7}
 8002f02:	af00      	add	r7, sp, #0

};
 8002f04:	bf00      	nop
 8002f06:	46bd      	mov	sp, r7
 8002f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0c:	4770      	bx	lr

08002f0e <Task_15ms>:

void Task_15ms(void) {
 8002f0e:	b480      	push	{r7}
 8002f10:	af00      	add	r7, sp, #0

};
 8002f12:	bf00      	nop
 8002f14:	46bd      	mov	sp, r7
 8002f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f1a:	4770      	bx	lr

08002f1c <PedestrianLight_Task_500ms>:

void PedestrianLight_Task_500ms(void) {
 8002f1c:	b580      	push	{r7, lr}
 8002f1e:	af00      	add	r7, sp, #0
	if(sig_pedestrian_request == STD_HIGH){
 8002f20:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <PedestrianLight_Task_500ms+0x1c>)
 8002f22:	781b      	ldrb	r3, [r3, #0]
 8002f24:	2b01      	cmp	r3, #1
 8002f26:	d104      	bne.n	8002f32 <PedestrianLight_Task_500ms+0x16>
		HAL_GPIO_TogglePin(GPIOB, PED_REQUEST_LED_Pin);
 8002f28:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002f2c:	4803      	ldr	r0, [pc, #12]	; (8002f3c <PedestrianLight_Task_500ms+0x20>)
 8002f2e:	f7fd fec5 	bl	8000cbc <HAL_GPIO_TogglePin>
	};

};
 8002f32:	bf00      	nop
 8002f34:	bd80      	pop	{r7, pc}
 8002f36:	bf00      	nop
 8002f38:	200000f4 	.word	0x200000f4
 8002f3c:	48000400 	.word	0x48000400

08002f40 <CarTrafficLight_Task_1000ms>:

void CarTrafficLight_Task_1000ms(void) {
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
	static uint8_t CL_state_count;//time in seconds spent in each state
	static uint8_t CL_cycle_count;//time in sescond for one traffic light cycle (red->yellow->green)
	CL_cycle_count++;
 8002f44:	4b49      	ldr	r3, [pc, #292]	; (800306c <CarTrafficLight_Task_1000ms+0x12c>)
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	3301      	adds	r3, #1
 8002f4a:	b2da      	uxtb	r2, r3
 8002f4c:	4b47      	ldr	r3, [pc, #284]	; (800306c <CarTrafficLight_Task_1000ms+0x12c>)
 8002f4e:	701a      	strb	r2, [r3, #0]
	if(sig_pedestrian_request == STD_HIGH && CL_cycle_count >=20){
 8002f50:	4b47      	ldr	r3, [pc, #284]	; (8003070 <CarTrafficLight_Task_1000ms+0x130>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d10f      	bne.n	8002f78 <CarTrafficLight_Task_1000ms+0x38>
 8002f58:	4b44      	ldr	r3, [pc, #272]	; (800306c <CarTrafficLight_Task_1000ms+0x12c>)
 8002f5a:	781b      	ldrb	r3, [r3, #0]
 8002f5c:	2b13      	cmp	r3, #19
 8002f5e:	d90b      	bls.n	8002f78 <CarTrafficLight_Task_1000ms+0x38>
		CL_state = CL_RED;
 8002f60:	4b44      	ldr	r3, [pc, #272]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8002f62:	2200      	movs	r2, #0
 8002f64:	701a      	strb	r2, [r3, #0]
		CL_state_count= 0;
 8002f66:	4b44      	ldr	r3, [pc, #272]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002f68:	2200      	movs	r2, #0
 8002f6a:	701a      	strb	r2, [r3, #0]
		CL_cycle_count = 0;
 8002f6c:	4b3f      	ldr	r3, [pc, #252]	; (800306c <CarTrafficLight_Task_1000ms+0x12c>)
 8002f6e:	2200      	movs	r2, #0
 8002f70:	701a      	strb	r2, [r3, #0]
		sig_pedestrian_request = STD_LOW;
 8002f72:	4b3f      	ldr	r3, [pc, #252]	; (8003070 <CarTrafficLight_Task_1000ms+0x130>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
	};
	switch(CL_state){
 8002f78:	4b3e      	ldr	r3, [pc, #248]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8002f7a:	781b      	ldrb	r3, [r3, #0]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d86f      	bhi.n	8003060 <CarTrafficLight_Task_1000ms+0x120>
 8002f80:	a201      	add	r2, pc, #4	; (adr r2, 8002f88 <CarTrafficLight_Task_1000ms+0x48>)
 8002f82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002f86:	bf00      	nop
 8002f88:	08002f9d 	.word	0x08002f9d
 8002f8c:	08002ff9 	.word	0x08002ff9
 8002f90:	08003027 	.word	0x08003027
 8002f94:	08002fcb 	.word	0x08002fcb
 8002f98:	08003055 	.word	0x08003055
		case CL_RED :
			if (CL_state_count <=5) {
 8002f9c:	4b36      	ldr	r3, [pc, #216]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	2b05      	cmp	r3, #5
 8002fa2:	d80b      	bhi.n	8002fbc <CarTrafficLight_Task_1000ms+0x7c>
				CL_SetLightColor(CL_state);
 8002fa4:	4b33      	ldr	r3, [pc, #204]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	4618      	mov	r0, r3
 8002faa:	f7fd fa8d 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 8002fae:	4b32      	ldr	r3, [pc, #200]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002fb0:	781b      	ldrb	r3, [r3, #0]
 8002fb2:	3301      	adds	r3, #1
 8002fb4:	b2da      	uxtb	r2, r3
 8002fb6:	4b30      	ldr	r3, [pc, #192]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002fb8:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_FLASH_RED;
				CL_state_count =0;
			}
			break;
 8002fba:	e055      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_FLASH_RED;
 8002fbc:	4b2d      	ldr	r3, [pc, #180]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8002fbe:	2203      	movs	r2, #3
 8002fc0:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 8002fc2:	4b2d      	ldr	r3, [pc, #180]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	701a      	strb	r2, [r3, #0]
			break;
 8002fc8:	e04e      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
		case CL_FLASH_RED :
			if(CL_state_count <=3) {
 8002fca:	4b2b      	ldr	r3, [pc, #172]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002fcc:	781b      	ldrb	r3, [r3, #0]
 8002fce:	2b03      	cmp	r3, #3
 8002fd0:	d80b      	bhi.n	8002fea <CarTrafficLight_Task_1000ms+0xaa>
				CL_SetLightColor(CL_state);
 8002fd2:	4b28      	ldr	r3, [pc, #160]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8002fd4:	781b      	ldrb	r3, [r3, #0]
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fd fa76 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 8002fdc:	4b26      	ldr	r3, [pc, #152]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002fde:	781b      	ldrb	r3, [r3, #0]
 8002fe0:	3301      	adds	r3, #1
 8002fe2:	b2da      	uxtb	r2, r3
 8002fe4:	4b24      	ldr	r3, [pc, #144]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002fe6:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_YELLOW;
				CL_state_count =0;
			}
			break;
 8002fe8:	e03e      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_YELLOW;
 8002fea:	4b22      	ldr	r3, [pc, #136]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8002fec:	2201      	movs	r2, #1
 8002fee:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 8002ff0:	4b21      	ldr	r3, [pc, #132]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002ff2:	2200      	movs	r2, #0
 8002ff4:	701a      	strb	r2, [r3, #0]
			break;
 8002ff6:	e037      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
		case CL_YELLOW :
			if (CL_state_count <=2) {
 8002ff8:	4b1f      	ldr	r3, [pc, #124]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8002ffa:	781b      	ldrb	r3, [r3, #0]
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d80b      	bhi.n	8003018 <CarTrafficLight_Task_1000ms+0xd8>
				CL_SetLightColor(CL_state);
 8003000:	4b1c      	ldr	r3, [pc, #112]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	4618      	mov	r0, r3
 8003006:	f7fd fa5f 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 800300a:	4b1b      	ldr	r3, [pc, #108]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 800300c:	781b      	ldrb	r3, [r3, #0]
 800300e:	3301      	adds	r3, #1
 8003010:	b2da      	uxtb	r2, r3
 8003012:	4b19      	ldr	r3, [pc, #100]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8003014:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_GREEN;
				CL_state_count =0;
			}
			break;
 8003016:	e027      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_GREEN;
 8003018:	4b16      	ldr	r3, [pc, #88]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 800301a:	2202      	movs	r2, #2
 800301c:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 800301e:	4b16      	ldr	r3, [pc, #88]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8003020:	2200      	movs	r2, #0
 8003022:	701a      	strb	r2, [r3, #0]
			break;
 8003024:	e020      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
		case CL_GREEN :
			if (CL_state_count <=5) {
 8003026:	4b14      	ldr	r3, [pc, #80]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8003028:	781b      	ldrb	r3, [r3, #0]
 800302a:	2b05      	cmp	r3, #5
 800302c:	d80b      	bhi.n	8003046 <CarTrafficLight_Task_1000ms+0x106>
				CL_SetLightColor(CL_state);
 800302e:	4b11      	ldr	r3, [pc, #68]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8003030:	781b      	ldrb	r3, [r3, #0]
 8003032:	4618      	mov	r0, r3
 8003034:	f7fd fa48 	bl	80004c8 <CL_SetLightColor>
				CL_state_count = CL_state_count+1;
 8003038:	4b0f      	ldr	r3, [pc, #60]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	3301      	adds	r3, #1
 800303e:	b2da      	uxtb	r2, r3
 8003040:	4b0d      	ldr	r3, [pc, #52]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 8003042:	701a      	strb	r2, [r3, #0]
			}
			else {
				CL_state = CL_DEFAULT_GREEN;
				CL_state_count =0;
			}
			break;
 8003044:	e010      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
				CL_state = CL_DEFAULT_GREEN;
 8003046:	4b0b      	ldr	r3, [pc, #44]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8003048:	2204      	movs	r2, #4
 800304a:	701a      	strb	r2, [r3, #0]
				CL_state_count =0;
 800304c:	4b0a      	ldr	r3, [pc, #40]	; (8003078 <CarTrafficLight_Task_1000ms+0x138>)
 800304e:	2200      	movs	r2, #0
 8003050:	701a      	strb	r2, [r3, #0]
			break;
 8003052:	e009      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>
		case CL_DEFAULT_GREEN :
				CL_SetLightColor(CL_state);
 8003054:	4b07      	ldr	r3, [pc, #28]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8003056:	781b      	ldrb	r3, [r3, #0]
 8003058:	4618      	mov	r0, r3
 800305a:	f7fd fa35 	bl	80004c8 <CL_SetLightColor>
			break;
 800305e:	e003      	b.n	8003068 <CarTrafficLight_Task_1000ms+0x128>

		default :
			CL_state = CL_DEFAULT_GREEN;
 8003060:	4b04      	ldr	r3, [pc, #16]	; (8003074 <CarTrafficLight_Task_1000ms+0x134>)
 8003062:	2204      	movs	r2, #4
 8003064:	701a      	strb	r2, [r3, #0]
			break;
 8003066:	bf00      	nop
	};
};
 8003068:	bf00      	nop
 800306a:	bd80      	pop	{r7, pc}
 800306c:	20000064 	.word	0x20000064
 8003070:	200000f4 	.word	0x200000f4
 8003074:	20000008 	.word	0x20000008
 8003078:	20000065 	.word	0x20000065

0800307c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8003080:	bf00      	nop
 8003082:	46bd      	mov	sp, r7
 8003084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003088:	4770      	bx	lr
	...

0800308c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003092:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_MspInit+0x44>)
 8003094:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003096:	4a0e      	ldr	r2, [pc, #56]	; (80030d0 <HAL_MspInit+0x44>)
 8003098:	f043 0301 	orr.w	r3, r3, #1
 800309c:	6613      	str	r3, [r2, #96]	; 0x60
 800309e:	4b0c      	ldr	r3, [pc, #48]	; (80030d0 <HAL_MspInit+0x44>)
 80030a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80030a2:	f003 0301 	and.w	r3, r3, #1
 80030a6:	607b      	str	r3, [r7, #4]
 80030a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80030aa:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_MspInit+0x44>)
 80030ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ae:	4a08      	ldr	r2, [pc, #32]	; (80030d0 <HAL_MspInit+0x44>)
 80030b0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80030b4:	6593      	str	r3, [r2, #88]	; 0x58
 80030b6:	4b06      	ldr	r3, [pc, #24]	; (80030d0 <HAL_MspInit+0x44>)
 80030b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030be:	603b      	str	r3, [r7, #0]
 80030c0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	40021000 	.word	0x40021000

080030d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b08a      	sub	sp, #40	; 0x28
 80030d8:	af00      	add	r7, sp, #0
 80030da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030dc:	f107 0314 	add.w	r3, r7, #20
 80030e0:	2200      	movs	r2, #0
 80030e2:	601a      	str	r2, [r3, #0]
 80030e4:	605a      	str	r2, [r3, #4]
 80030e6:	609a      	str	r2, [r3, #8]
 80030e8:	60da      	str	r2, [r3, #12]
 80030ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a17      	ldr	r2, [pc, #92]	; (8003150 <HAL_UART_MspInit+0x7c>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d128      	bne.n	8003148 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80030f6:	4b17      	ldr	r3, [pc, #92]	; (8003154 <HAL_UART_MspInit+0x80>)
 80030f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80030fa:	4a16      	ldr	r2, [pc, #88]	; (8003154 <HAL_UART_MspInit+0x80>)
 80030fc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003100:	6593      	str	r3, [r2, #88]	; 0x58
 8003102:	4b14      	ldr	r3, [pc, #80]	; (8003154 <HAL_UART_MspInit+0x80>)
 8003104:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003106:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800310a:	613b      	str	r3, [r7, #16]
 800310c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800310e:	4b11      	ldr	r3, [pc, #68]	; (8003154 <HAL_UART_MspInit+0x80>)
 8003110:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003112:	4a10      	ldr	r2, [pc, #64]	; (8003154 <HAL_UART_MspInit+0x80>)
 8003114:	f043 0301 	orr.w	r3, r3, #1
 8003118:	64d3      	str	r3, [r2, #76]	; 0x4c
 800311a:	4b0e      	ldr	r3, [pc, #56]	; (8003154 <HAL_UART_MspInit+0x80>)
 800311c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800311e:	f003 0301 	and.w	r3, r3, #1
 8003122:	60fb      	str	r3, [r7, #12]
 8003124:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003126:	230c      	movs	r3, #12
 8003128:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800312a:	2302      	movs	r3, #2
 800312c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800312e:	2300      	movs	r3, #0
 8003130:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003132:	2303      	movs	r3, #3
 8003134:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003136:	2307      	movs	r3, #7
 8003138:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800313a:	f107 0314 	add.w	r3, r7, #20
 800313e:	4619      	mov	r1, r3
 8003140:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8003144:	f7fd fbfa 	bl	800093c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003148:	bf00      	nop
 800314a:	3728      	adds	r7, #40	; 0x28
 800314c:	46bd      	mov	sp, r7
 800314e:	bd80      	pop	{r7, pc}
 8003150:	40004400 	.word	0x40004400
 8003154:	40021000 	.word	0x40021000

08003158 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003158:	b480      	push	{r7}
 800315a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800315c:	bf00      	nop
 800315e:	46bd      	mov	sp, r7
 8003160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003164:	4770      	bx	lr

08003166 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003166:	b480      	push	{r7}
 8003168:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800316a:	e7fe      	b.n	800316a <HardFault_Handler+0x4>

0800316c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800316c:	b480      	push	{r7}
 800316e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003170:	e7fe      	b.n	8003170 <MemManage_Handler+0x4>

08003172 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003172:	b480      	push	{r7}
 8003174:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003176:	e7fe      	b.n	8003176 <BusFault_Handler+0x4>

08003178 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003178:	b480      	push	{r7}
 800317a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800317c:	e7fe      	b.n	800317c <UsageFault_Handler+0x4>

0800317e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800317e:	b480      	push	{r7}
 8003180:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003182:	bf00      	nop
 8003184:	46bd      	mov	sp, r7
 8003186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318a:	4770      	bx	lr

0800318c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800318c:	b480      	push	{r7}
 800318e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003190:	bf00      	nop
 8003192:	46bd      	mov	sp, r7
 8003194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003198:	4770      	bx	lr

0800319a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800319a:	b480      	push	{r7}
 800319c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800319e:	bf00      	nop
 80031a0:	46bd      	mov	sp, r7
 80031a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a6:	4770      	bx	lr

080031a8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80031a8:	b580      	push	{r7, lr}
 80031aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80031ac:	f7fd fa96 	bl	80006dc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80031b0:	bf00      	nop
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80031b8:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80031bc:	f7fd fd98 	bl	8000cf0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  sig_pedestrian_request = STD_HIGH;
 80031c0:	4b02      	ldr	r3, [pc, #8]	; (80031cc <EXTI15_10_IRQHandler+0x18>)
 80031c2:	2201      	movs	r2, #1
 80031c4:	701a      	strb	r2, [r3, #0]

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80031c6:	bf00      	nop
 80031c8:	bd80      	pop	{r7, pc}
 80031ca:	bf00      	nop
 80031cc:	200000f4 	.word	0x200000f4

080031d0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80031d4:	4b17      	ldr	r3, [pc, #92]	; (8003234 <SystemInit+0x64>)
 80031d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031da:	4a16      	ldr	r2, [pc, #88]	; (8003234 <SystemInit+0x64>)
 80031dc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80031e0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 80031e4:	4b14      	ldr	r3, [pc, #80]	; (8003238 <SystemInit+0x68>)
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	4a13      	ldr	r2, [pc, #76]	; (8003238 <SystemInit+0x68>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 80031f0:	4b11      	ldr	r3, [pc, #68]	; (8003238 <SystemInit+0x68>)
 80031f2:	2200      	movs	r2, #0
 80031f4:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 80031f6:	4b10      	ldr	r3, [pc, #64]	; (8003238 <SystemInit+0x68>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	4a0f      	ldr	r2, [pc, #60]	; (8003238 <SystemInit+0x68>)
 80031fc:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8003200:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8003204:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003206:	4b0c      	ldr	r3, [pc, #48]	; (8003238 <SystemInit+0x68>)
 8003208:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800320c:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800320e:	4b0a      	ldr	r3, [pc, #40]	; (8003238 <SystemInit+0x68>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4a09      	ldr	r2, [pc, #36]	; (8003238 <SystemInit+0x68>)
 8003214:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003218:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 800321a:	4b07      	ldr	r3, [pc, #28]	; (8003238 <SystemInit+0x68>)
 800321c:	2200      	movs	r2, #0
 800321e:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003220:	4b04      	ldr	r3, [pc, #16]	; (8003234 <SystemInit+0x64>)
 8003222:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003226:	609a      	str	r2, [r3, #8]
#endif
}
 8003228:	bf00      	nop
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	e000ed00 	.word	0xe000ed00
 8003238:	40021000 	.word	0x40021000

0800323c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 800323c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003274 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8003240:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8003242:	e003      	b.n	800324c <LoopCopyDataInit>

08003244 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8003244:	4b0c      	ldr	r3, [pc, #48]	; (8003278 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8003246:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8003248:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 800324a:	3104      	adds	r1, #4

0800324c <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 800324c:	480b      	ldr	r0, [pc, #44]	; (800327c <LoopForever+0xa>)
	ldr	r3, =_edata
 800324e:	4b0c      	ldr	r3, [pc, #48]	; (8003280 <LoopForever+0xe>)
	adds	r2, r0, r1
 8003250:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8003252:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8003254:	d3f6      	bcc.n	8003244 <CopyDataInit>
	ldr	r2, =_sbss
 8003256:	4a0b      	ldr	r2, [pc, #44]	; (8003284 <LoopForever+0x12>)
	b	LoopFillZerobss
 8003258:	e002      	b.n	8003260 <LoopFillZerobss>

0800325a <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 800325a:	2300      	movs	r3, #0
	str	r3, [r2], #4
 800325c:	f842 3b04 	str.w	r3, [r2], #4

08003260 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8003260:	4b09      	ldr	r3, [pc, #36]	; (8003288 <LoopForever+0x16>)
	cmp	r2, r3
 8003262:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8003264:	d3f9      	bcc.n	800325a <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8003266:	f7ff ffb3 	bl	80031d0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800326a:	f000 f885 	bl	8003378 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800326e:	f7ff fcf1 	bl	8002c54 <main>

08003272 <LoopForever>:

LoopForever:
    b LoopForever
 8003272:	e7fe      	b.n	8003272 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8003274:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8003278:	08003440 	.word	0x08003440
	ldr	r0, =_sdata
 800327c:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8003280:	20000048 	.word	0x20000048
	ldr	r2, =_sbss
 8003284:	20000048 	.word	0x20000048
	ldr	r3, = _ebss
 8003288:	200000f8 	.word	0x200000f8

0800328c <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800328c:	e7fe      	b.n	800328c <ADC1_2_IRQHandler>
	...

08003290 <Sch_Init>:
#include <sch.h>
#include <sig_cfg.h>

static Sch_Cfg_Type * Sch_Cfg_Ptr;

void Sch_Init(Sch_Cfg_Type * cfg_ptr) {
 8003290:	b480      	push	{r7}
 8003292:	b083      	sub	sp, #12
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]

    Sch_Cfg_Ptr = cfg_ptr;
 8003298:	4a04      	ldr	r2, [pc, #16]	; (80032ac <Sch_Init+0x1c>)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6013      	str	r3, [r2, #0]

}
 800329e:	bf00      	nop
 80032a0:	370c      	adds	r7, #12
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr
 80032aa:	bf00      	nop
 80032ac:	20000068 	.word	0x20000068

080032b0 <Sch_Main>:

void Sch_Main(void) {
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
    uint32_t tick;
    uint8_t num_tasks;
    Sch_Task_Type *tasks;

    num_tasks = Sch_Cfg_Ptr->size;
 80032b6:	4b2b      	ldr	r3, [pc, #172]	; (8003364 <Sch_Main+0xb4>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	781b      	ldrb	r3, [r3, #0]
 80032bc:	73bb      	strb	r3, [r7, #14]
    tasks = Sch_Cfg_Ptr->tasks;
 80032be:	4b29      	ldr	r3, [pc, #164]	; (8003364 <Sch_Main+0xb4>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	685b      	ldr	r3, [r3, #4]
 80032c4:	60bb      	str	r3, [r7, #8]
    // The main while loop.  This while loop will run the program forever
    while(1) {
#ifndef SCH_ISR_SYSTICK
        Sys_TimerHandler();
#endif
        tick = Sys_GetTimer();       // Get current system tick
 80032c6:	f000 f84f 	bl	8003368 <Sys_GetTimer>
 80032ca:	6078      	str	r0, [r7, #4]

        // Loop through all tasks.  First, run all continuous tasks.  Then,
        // if the number of ticks since the last time the task was run is
        // greater than or equal to the task interval, execute the task.
        for(uint8_t task_index = 0; task_index < num_tasks; task_index++) {
 80032cc:	2300      	movs	r3, #0
 80032ce:	73fb      	strb	r3, [r7, #15]
 80032d0:	e043      	b.n	800335a <Sch_Main+0xaa>
            if(tasks[task_index].interval == 0) {
 80032d2:	7bfa      	ldrb	r2, [r7, #15]
 80032d4:	4613      	mov	r3, r2
 80032d6:	005b      	lsls	r3, r3, #1
 80032d8:	4413      	add	r3, r2
 80032da:	009b      	lsls	r3, r3, #2
 80032dc:	461a      	mov	r2, r3
 80032de:	68bb      	ldr	r3, [r7, #8]
 80032e0:	4413      	add	r3, r2
 80032e2:	881b      	ldrh	r3, [r3, #0]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d10a      	bne.n	80032fe <Sch_Main+0x4e>
                // Run continuous tasks.
                (*tasks[task_index].func)();
 80032e8:	7bfa      	ldrb	r2, [r7, #15]
 80032ea:	4613      	mov	r3, r2
 80032ec:	005b      	lsls	r3, r3, #1
 80032ee:	4413      	add	r3, r2
 80032f0:	009b      	lsls	r3, r3, #2
 80032f2:	461a      	mov	r2, r3
 80032f4:	68bb      	ldr	r3, [r7, #8]
 80032f6:	4413      	add	r3, r2
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	4798      	blx	r3
 80032fc:	e02a      	b.n	8003354 <Sch_Main+0xa4>
            }
            else if(tick >= tasks[task_index].next_tick) {
 80032fe:	7bfa      	ldrb	r2, [r7, #15]
 8003300:	4613      	mov	r3, r2
 8003302:	005b      	lsls	r3, r3, #1
 8003304:	4413      	add	r3, r2
 8003306:	009b      	lsls	r3, r3, #2
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	685b      	ldr	r3, [r3, #4]
 8003310:	687a      	ldr	r2, [r7, #4]
 8003312:	429a      	cmp	r2, r3
 8003314:	d31e      	bcc.n	8003354 <Sch_Main+0xa4>
                (*tasks[task_index].func)();         // Execute Task
 8003316:	7bfa      	ldrb	r2, [r7, #15]
 8003318:	4613      	mov	r3, r2
 800331a:	005b      	lsls	r3, r3, #1
 800331c:	4413      	add	r3, r2
 800331e:	009b      	lsls	r3, r3, #2
 8003320:	461a      	mov	r2, r3
 8003322:	68bb      	ldr	r3, [r7, #8]
 8003324:	4413      	add	r3, r2
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	4798      	blx	r3

                tasks[task_index].next_tick = tick + tasks[task_index].interval;  // Save last tick the task was ran.
 800332a:	7bfa      	ldrb	r2, [r7, #15]
 800332c:	4613      	mov	r3, r2
 800332e:	005b      	lsls	r3, r3, #1
 8003330:	4413      	add	r3, r2
 8003332:	009b      	lsls	r3, r3, #2
 8003334:	461a      	mov	r2, r3
 8003336:	68bb      	ldr	r3, [r7, #8]
 8003338:	4413      	add	r3, r2
 800333a:	881b      	ldrh	r3, [r3, #0]
 800333c:	4619      	mov	r1, r3
 800333e:	7bfa      	ldrb	r2, [r7, #15]
 8003340:	4613      	mov	r3, r2
 8003342:	005b      	lsls	r3, r3, #1
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	461a      	mov	r2, r3
 800334a:	68bb      	ldr	r3, [r7, #8]
 800334c:	4413      	add	r3, r2
 800334e:	687a      	ldr	r2, [r7, #4]
 8003350:	440a      	add	r2, r1
 8003352:	605a      	str	r2, [r3, #4]
        for(uint8_t task_index = 0; task_index < num_tasks; task_index++) {
 8003354:	7bfb      	ldrb	r3, [r7, #15]
 8003356:	3301      	adds	r3, #1
 8003358:	73fb      	strb	r3, [r7, #15]
 800335a:	7bfa      	ldrb	r2, [r7, #15]
 800335c:	7bbb      	ldrb	r3, [r7, #14]
 800335e:	429a      	cmp	r2, r3
 8003360:	d3b7      	bcc.n	80032d2 <Sch_Main+0x22>
        tick = Sys_GetTimer();       // Get current system tick
 8003362:	e7b0      	b.n	80032c6 <Sch_Main+0x16>
 8003364:	20000068 	.word	0x20000068

08003368 <Sys_GetTimer>:
#include <stm32l4xx_hal.h>
#include <sys_timer.h>
#include <stm32l476xx.h>


uint32_t Sys_GetTimer(void) {
 8003368:	b580      	push	{r7, lr}
 800336a:	af00      	add	r7, sp, #0
    return HAL_GetTick();
 800336c:	f7fd f9c8 	bl	8000700 <HAL_GetTick>
 8003370:	4603      	mov	r3, r0
}
 8003372:	4618      	mov	r0, r3
 8003374:	bd80      	pop	{r7, pc}
	...

08003378 <__libc_init_array>:
 8003378:	b570      	push	{r4, r5, r6, lr}
 800337a:	4e0d      	ldr	r6, [pc, #52]	; (80033b0 <__libc_init_array+0x38>)
 800337c:	4c0d      	ldr	r4, [pc, #52]	; (80033b4 <__libc_init_array+0x3c>)
 800337e:	1ba4      	subs	r4, r4, r6
 8003380:	10a4      	asrs	r4, r4, #2
 8003382:	2500      	movs	r5, #0
 8003384:	42a5      	cmp	r5, r4
 8003386:	d109      	bne.n	800339c <__libc_init_array+0x24>
 8003388:	4e0b      	ldr	r6, [pc, #44]	; (80033b8 <__libc_init_array+0x40>)
 800338a:	4c0c      	ldr	r4, [pc, #48]	; (80033bc <__libc_init_array+0x44>)
 800338c:	f000 f820 	bl	80033d0 <_init>
 8003390:	1ba4      	subs	r4, r4, r6
 8003392:	10a4      	asrs	r4, r4, #2
 8003394:	2500      	movs	r5, #0
 8003396:	42a5      	cmp	r5, r4
 8003398:	d105      	bne.n	80033a6 <__libc_init_array+0x2e>
 800339a:	bd70      	pop	{r4, r5, r6, pc}
 800339c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033a0:	4798      	blx	r3
 80033a2:	3501      	adds	r5, #1
 80033a4:	e7ee      	b.n	8003384 <__libc_init_array+0xc>
 80033a6:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80033aa:	4798      	blx	r3
 80033ac:	3501      	adds	r5, #1
 80033ae:	e7f2      	b.n	8003396 <__libc_init_array+0x1e>
 80033b0:	08003438 	.word	0x08003438
 80033b4:	08003438 	.word	0x08003438
 80033b8:	08003438 	.word	0x08003438
 80033bc:	0800343c 	.word	0x0800343c

080033c0 <memset>:
 80033c0:	4402      	add	r2, r0
 80033c2:	4603      	mov	r3, r0
 80033c4:	4293      	cmp	r3, r2
 80033c6:	d100      	bne.n	80033ca <memset+0xa>
 80033c8:	4770      	bx	lr
 80033ca:	f803 1b01 	strb.w	r1, [r3], #1
 80033ce:	e7f9      	b.n	80033c4 <memset+0x4>

080033d0 <_init>:
 80033d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033d2:	bf00      	nop
 80033d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033d6:	bc08      	pop	{r3}
 80033d8:	469e      	mov	lr, r3
 80033da:	4770      	bx	lr

080033dc <_fini>:
 80033dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80033de:	bf00      	nop
 80033e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80033e2:	bc08      	pop	{r3}
 80033e4:	469e      	mov	lr, r3
 80033e6:	4770      	bx	lr
